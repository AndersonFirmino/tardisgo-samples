package tardis;
// This code generated using the TARDIS Go tool, elements are
// Copyright 2014 Elliott Stoneham and The TARDIS Go Authors
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file at https://github.com/tardisgo/tardisgo


class Deep { 
	//**** This class adapted from https://gist.github.com/Asmageddon/4013485 @author Asmageddon
	//** 
	//** Deep copy of anything using reflection (so don't hope for much performance)
	//** 
	// TODO this should not be a separate haxe class, as no non-pogo code needs access to it
	public static function copy( v:Dynamic ) : Dynamic  { 	//***** new line was: public static function copy<T>( v:T ) : T  { 
		if (!Reflect.isObject(v)) { // simple type 
			return v; 
		}
		else if (Std.is(v, String)) { // string
			return v;
		}
		else if (Std.is(v, Pointer)) { // Pointer *** new code
			return Pointer.copy(v);
		}
		else if (Std.is(v, Closure)) { // Closure *** new code
			return v;
		}
		else if(Std.is( v, Array )) { // array 
			var result = Type.createInstance(Type.getClass(v), []); 
			untyped { 
				for( ii in 0...v.length ) {
					result.push(copy(v[ii]));
				}
			} 
			return result;
		}
		else if(Std.is( v, Map )) { // **** this code section written new - TODO: test
			var result = Type.createInstance(Type.getClass(v), []);
			untyped {
				var keys : Iterator<Dynamic> = v.keys();
				for( key in keys ) {
					result.set(key, copy(v.get(key)));
				}
			} 
			return result;
		} //*** end new code
		else if(Std.is( v, List )) { // list
			//List would be copied just fine without this special case, but I want to avoid going recursive
			var result = Type.createInstance(Type.getClass(v), []);
			untyped {
				var iter : Iterator<Dynamic> = v.iterator();
				for( ii in iter ) {
					result.add(ii);
				}
			} 
			return result; 
		}
		else if(Type.getClass(v) == null) { // anonymous object 
			var obj : Dynamic = {}; 
			for( ff in Reflect.fields(v) ) { 
				Reflect.setField(obj, ff, copy(Reflect.field(v, ff))); 
			}
			return obj; 
		} 
		else { // class 
			var obj = Type.createEmptyInstance(Type.getClass(v)); 
			for(ff in Reflect.fields(v)) {
				Reflect.setField(obj, ff, copy(Reflect.field(v, ff))); 
			}
			return obj; 
		} 
		// return null;  //**** commented out to remove an unreachable code error 
	}
 
}

class Force { // TODO maybe this should not be a separate haxe class, as no non-Go code needs access to it

	public static inline function toUint8(v:Int):Int {
		return v & 0xFF;
	}	
	public static inline function toUint16(v:Int):Int {
		return v & 0xFFFF;
	}	
	public static inline function toUint32(v:Int):Int { 
		#if js
			// return v | 0; // this is the emscripten technique to force values to int, it is shorter, but does it always work for uint32?
			return v & untyped __js__("0xffffffff"); // the obvious solution
		#elseif php
       		return v & untyped __php__("0xffffffff");
		#else
			return v; 
		#end
	}	
	public static inline function toUint64(v:GOint64):GOint64 {
		return v;
	}	
	public static function toInt8(v:Int):Int {
		var r:Int = v & 0xFF;
		if ((r & 0x80) != 0){ // it should be -ve
			return -1 - 0xFF + r;
		}
		return r;
	}	
	public static function toInt16(v:Int):Int {
		var r:Int = v & 0xFFFF;
		if ((r & 0x8000) != 0){ // it should be -ve
			return -1 - 0xFFFF + r;
		}
		return r;
	}	
	public static function toInt32(v:Int):Int {
		#if js 
			var int32_mostNeg:Int = -2147483648;
			var r:Int = v & untyped __js__("0x7FFFFFFF");
			if ((v & untyped __js__("0x80000000")) != 0){ // it should be -ve
				return int32_mostNeg+r;				
			}
			return r;
		#elseif php
			//see: http://stackoverflow.com/questions/300840/force-php-integer-overflow
     		v = (v & untyped __php__("0xFFFFFFFF"));
 		    if( (v & untyped __php__("0x80000000")) != 0)
		        v = -((~v & untyped __php__("0xFFFFFFFF")) + 1);
		    return v;
		#else
			return v;
		#end
	}	
	public static inline function toInt64(v:GOint64):GOint64 { // this in case special handling is required for some platforms
		return v;
	}	
	public static inline function toInt(v:Dynamic):Int { // get an Int from a Dynamic variable (uintptr is stored as Dynamic)
		if (!Reflect.isObject(v))  			// simple type, so leave quickly and take defaults 
			return v; 
		else
			if(Std.is(v,Interface)) {
				v=v.val; // it is in an interface, so get the value
				if (!Reflect.isObject(v))  			// simple type from inside an interface, so take defaults 
					return v; 
				else								// it should be an Int64 from inside an Interface
					return GOint64.toInt(v);	
			} else								// it should be an Int64 if not an interface
				return GOint64.toInt(v);	
	}
	public static inline function toFloat(v:Float):Float {
		// neko target platform requires special handling because it auto-converts whole-number Float into Int without asking
		// see: https://github.com/HaxeFoundation/haxe/issues/1282 which was marked as closed, but was not fixed as at 2013.9.6
		#if neko
			if(Std.is(v,Int))
				return v + 2.2251e-308; // add the smallest value possible for a 64-bit float to ensure neko doesn't still think it is an int
			else
				return v;
		#else
			return v;
		#end
	}	
	public static function uintCompare(x:Int,y:Int):Int { // +ve if uint(x)>unint(y), 0 equal, else -ve 
			if(x==y) return 0; // simple case first for speed TODO is it faster with this in or out?
			if(x>=0) {
				if(y>=0){ // both +ve so normal comparison
					return (x-y);
				}else{ // y -ve and so larger than x
					return -1;
				}
			}else { // x -ve
				if(y>=0){ // -ve x larger than +ve y
					return 1;
				}else{ // both are -ve so the normal comparison
					return (x-y); //eg -1::-7 gives -1--7 = +6 meaning -1 > -7
				}
			}
	}
	private static function checkIntDiv(x:Int,y:Int,byts:Int):Int { // implement the special processing required by Go
		var r:Int=y;
		switch(y) {
		case 0:
			Scheduler.panicFromHaxe("attempt to divide integer value by 0"); 
		case -1:
			switch (byts) {
			case 1:
				if(x== -128) r=1; // special case in the Go spec
			case 2:
				if(x== -32768) r=1; // special case in the Go spec
 			case 4:
				if(x== -2147483648) r=1; // special case in the Go spec
			default:
				// noOp
			}
		}
		return r;
	}
	//TODO maybe optimize by not passing the special value and having multiple versions of functions
	public static function intDiv(x:Int,y:Int,sv:Int):Int {
		y = checkIntDiv(x,y,sv);
		if(y==1) return x; // x div 1 is x
		var f:Float=  x / y;
		return f>=0?Math.floor(f):Math.ceil(f);
	}
	public static function intMod(x:Int,y:Int,sv:Int):Int {
		y = checkIntDiv(x,y,sv);
		if(y==1) return 0; // x mod 1 is 0
		return x % y;
	}
	public static function floatDiv(x:Float,y:Float):Float {
		if(y==0.0)
			Scheduler.panicFromHaxe("attempt to divide float value by 0"); 
		return x/y;
	}
	public static function floatMod(x:Float,y:Float):Float {
		if(y==0.0)
			Scheduler.panicFromHaxe("attempt to modulo float value by 0"); 
		return x%y;
	}

	public static function toUTF8length(gr:Int,s:String):Int {
		return "字".length==3 ? s.length : toUTF8slice(gr,s).len(); // no need to unpack the string if already UTF8
	}
	// return the UTF8 version of a UTF16 string in a Slice
	public static function toUTF8slice(gr:Int,s:String):Slice {
		var a:Array<Int> = new Array();
		var mask:Int=0xff; // TODO review if this masking is required, here defensively
		if ( "字".length==1 ) { // needs to be translated from UTF16
			mask=0xffff;
		}				
		for(i in 0...s.length){
				var t:Null<Int>=s.charCodeAt(i) ;
				if(t==null) 
					Scheduler.panicFromHaxe("Haxe runtime Force.toUTF8slice() unexpected null encountered");
				else
					a[i]=cast(t,Int) & mask;
		}
		var sl:Slice = new Slice(new Pointer(a),0,-1);
		if ( "字".length==3 ) return sl; // already UTF8 encoded
		var v1:Slice=Go_haxegoruntime_UTF16toRunes.callFromRT(gr,sl);
		return Go_haxegoruntime_RunesToUTF8.callFromRT(gr,v1);
	}
	public static function toRawString(gr:Int,sl:Slice):String {
		var ret:String="";
		var mask:Int=0xff; // TODO review if this masking is required, here defensively
		if ( "字".length==1 ) { // needs to be translated to UTF16
			var v1:Slice=Go_haxegoruntime_UTF8toRunes.callFromRT(gr,sl);
			sl=Go_haxegoruntime_RunesToUTF16.callFromRT(gr,v1);
			mask=0xffff;
		}
		for(i in 0...sl.len()) {
			ret += String.fromCharCode( sl.getAt(i) & mask );
		}
		return ret;
	}
}

// TODO: consider putting these go-compatibiliy classes into a separate library for general Haxe use when calling Go


@:keep
class UnsafePointer extends Pointer {  // Unsafe Pointers are not yet supported, but Go library code requires that they can be created
	public function new(x:Dynamic){
		super(x);
	}
}

@:keep
class Pointer {
	private var heapObj:Dynamic; // the actual object holding the value
	private var offs:Array<Int>; // the offsets into the object, if any

	public function new(from:Dynamic){
		heapObj = from;
		offs = new Array<Int>();
	}
	public inline function load():Dynamic { 
		// this was intended to return a copy of the object, rather than a reference to it, as in:
		// return Deep.copy(this.ref()); 
		// but seems to work without problem, and significantly more quickly, without this safeguard
		return this.ref(); // TODO review
	}
	public function ref():Dynamic { // this returns a reference to the pointed-at object, not for general use!
		var ret:Dynamic = heapObj;
		for(i in 0...offs.length) 
				ret = ret[offs[i]];
		return ret;	
	}
	public  function store(v:Dynamic){
		if(offs==null) offs=[]; // C# seems to need this for HaxeInt64Typedef values
		switch ( offs.length ) {
		case 0: heapObj=v;
		case 1: heapObj[offs[0]]=v;
		default:
			var a:Dynamic = heapObj;
			for(i in 0...offs.length-1) a = a[offs[i]];
			a[offs[offs.length-1]] = v;
		}
	}
	public function addr(off:Int):Pointer {
		if(off<0 || off >= this.ref().length) Scheduler.panicFromHaxe("index out of range for valid pointer address");
		var ret:Pointer = new Pointer(this.heapObj);
		ret.offs = this.offs.copy();
		ret.offs[this.offs.length]=off;
		return ret;
	}
	public function len():Int { // used by array bounds check (which ocurrs twice as belt-and-braces while we are in beta testing, see above) TODO optimise
		return this.ref().length; 
	}
	public static function copy(v:Pointer):Pointer {
		var r:Pointer = new Pointer(v.heapObj); // no copy of data, just the reference
		r.offs = v.offs.copy();
		return r;
	}
}

@:keep
class Slice {
	private var baseArray:Pointer;
	private var start:Int;
	private var end:Int;
	
	public function new(fromArray:Pointer, low:Int, high:Int) {
		baseArray = fromArray;
		if(baseArray==null) {
			start = 0;
			end = 0;
		} else {
			if(high==-1) high = baseArray.ref().length; //default upper bound is the capacity of the underlying array
			if( low<0 ) Scheduler.panicFromHaxe( "new Slice() low bound -ve"); 
			if( high > baseArray.ref().length ) Scheduler.panicFromHaxe("new Slice() high bound exceeds underlying array length"); 
			if( low>high ) Scheduler.panicFromHaxe("new Slice() low bound exceeds high bound"); 
			start = low;
			end = high;
		}
		//length = end-start;
	} 
	public function subSlice(low:Int, high:Int):Slice {
		if(high==-1) high = this.len(); //default upper bound is the length of the current slice
		return new Slice(baseArray,low+start,high+start);
	}
	public function getAt(dynIdx:Dynamic):Dynamic {
		var idx:Int=Force.toInt(dynIdx);
		if (idx<0 || idx>=(end-start)) Scheduler.panicFromHaxe("Slice index out of range for getAt()");
		if (baseArray==null) Scheduler.panicFromHaxe("Slice base array is null");
		return baseArray.load()[idx+start];
	}
	public function setAt(dynIdx:Dynamic,v:Dynamic) {
		var idx:Int=Force.toInt(dynIdx);
		if (idx<0 || idx>=(end-start)) Scheduler.panicFromHaxe("Slice index out of range for setAt()");
		if (baseArray==null) Scheduler.panicFromHaxe("Slice base array is null");
		baseArray.ref()[idx+start]=v; // this code relies on the object reference passing back
	}
	public inline function len():Int{
		return end-start;
	}
	public function cap():Int {
		if(baseArray==null) return 0;
		return cast(baseArray.ref().length,Int)-start;
	}
	public function addr(dynIdx:Dynamic):Pointer {
		var idx:Int=Force.toInt(dynIdx);
		if (idx<0 || idx>=(end-start)) Scheduler.panicFromHaxe("Slice index out of range for addr()");
		if (baseArray==null) Scheduler.panicFromHaxe("Slice base array is null");
		return baseArray.addr(idx+start);
	}
	public function toString():String {
		var ret:String = "Slice{"+start+","+end+",[";
		if(baseArray!=null) 
			for(i in 0...baseArray.ref().length) {
				if(i!=0) ret += ",";
				ret+=baseArray.ref()[i];
			}
		return ret+"]}";
	}
}

@:keep
class Closure { // "closure" is a keyword in PHP but solved using compiler flag  --php-prefix go  //TODO tidy names
	public var fn:Dynamic; 
	public var bds:Array<Dynamic>;

	public function new(f:Dynamic,b:Array<Dynamic>) {
		if(Std.is(f,Closure))	{
			if(!Reflect.isFunction(f.fn)) Scheduler.panicFromHaxe( "invalid function reference passed to make Closure(): "+f.fn);
			fn=f.fn; 
		} else{
			if(!Reflect.isFunction(f)) Scheduler.panicFromHaxe("invalid function reference passed to make Closure(): "+f); 
	 		fn=f;
		}
		if(fn==null) Scheduler.panicFromHaxe("new Closure() function has become null!"); // error test for flash/cpp TODO remove when issue resolved
		bds=b;
	}
	public function toString():String {
		var ret:String = "Closure{"+fn+",[";
		for(i in 0...bds.length) {
			if(i!=0) ret += ",";
			ret+= bds[i];
		}
		return ret+"]}";
	}
	public function methVal(t:Dynamic,v:Dynamic):Dynamic{
		var tmp:Dynamic = Deep.copy(t);
		return Reflect.callMethod(null, fn, [[],tmp,v]);
	}
	public function callFn(params:Array<Dynamic>):Dynamic {
		if(fn==null) Scheduler.panicFromHaxe("attempt to call null function reference in Closure()");
		if(!Reflect.isFunction(fn)) Scheduler.panicFromHaxe("invalid function reference in Closure(): "+fn);
		return Reflect.callMethod(null, fn, params);
	}
}

class Interface{ // "interface" is a keyword in PHP but solved using compiler flag  --php-prefix go //TODO tidy names 
	public var typ:Int; // the possibly interface type that has been cast to
	public var val:Dynamic;

	public function new(t:Int,v:Dynamic){
		typ=t;
		val=Deep.copy(v); 
	}
	public function toString():String {
		if(val==null)
			return "Interface{null:"+TypeInfo.getName(typ)+"}";
		else
			return "Interface{"+val+":"+TypeInfo.getName(typ)+"}";
	}
	public static function change(t:Int,i:Interface):Interface {
		if(i==null)	
			if(TypeInfo.isConcrete(t)) 
				return new Interface(t,TypeInfo.zeroValue(t)); 
			else {
				Scheduler.panicFromHaxe( "can't change the Interface of a nil value to Interface type: " +TypeInfo.getName(t));  
				return new Interface(t,TypeInfo.zeroValue(t));	 //dummy value as we have hit the panic button
			}
		else 
			if(Std.is(i,Interface)) 	
				if(TypeInfo.isConcrete(t)) 
					return new Interface(t,Deep.copy(i.val)); 
				else
					return new Interface(i.typ,Deep.copy(i.val)); // do not allow non-concrete types for Interfaces
			else {
				Scheduler.panicFromHaxe( "Can't change the Interface of a non-Interface type:"+i+" to: "+TypeInfo.getName(t));  
				return new Interface(t,TypeInfo.zeroValue(t));	 //dummy value as we have hit the panic button
			}
	}
	public static function isEqual(a:Interface,b:Interface):Bool {		// TODO ensure this very wide definition of equality is OK 
		if(a==null) 
			if(b==null) return true;
			else 		return false;
		if(b==null)		
			return false;
		if(! (TypeInfo.isIdentical(a.typ,b.typ)||TypeInfo.isAssignableTo(a.typ,b.typ)||	TypeInfo.isAssignableTo(b.typ,a.typ)) ) 
			return false;
		else
			if(a.val==b.val) 
				return true; // simple equality
			else // could still be equal underneath a pointer    //TODO is another special case required for Slice?
				if(Std.is(a.val,Pointer) && Std.is(b.val,Pointer))
					return a.val.load() == b.val.load();
				else
					return false;	
	}			
	/* from the SSA documentation:
	If AssertedType is a concrete type, TypeAssert checks whether the dynamic type in Interface X is equal to it, and if so, 
		the result of the conversion is a copy of the value in the Interface.
	If AssertedType is an Interface, TypeAssert checks whether the dynamic type of the Interface is assignable to it, 
		and if so, the result of the conversion is a copy of the Interface value X. If AssertedType is a superInterface of X.Type(), 
		the operation will fail iff the operand is nil. (Contrast with ChangeInterface, which performs no nil-check.)
	*/
	public static function assert(assTyp:Int,ifce:Interface):Dynamic{
		if(ifce==null) 
			Scheduler.panicFromHaxe( "Interface.assert null Interface");
		if(!(TypeInfo.isAssignableTo(ifce.typ,assTyp)||TypeInfo.isIdentical(assTyp,ifce.typ))) // TODO review need for isIdentical 
			Scheduler.panicFromHaxe( "type assert failed: expected "+TypeInfo.getName(assTyp)+", got "+TypeInfo.getName(ifce.typ) );
		if(TypeInfo.isConcrete(assTyp))	
			return Deep.copy(ifce.val);
		else	
			return new Interface(ifce.typ,ifce.val);
	}
	public static function assertOk(assTyp:Int,ifce:Interface):{r0:Dynamic,r1:Bool} {
		if(ifce==null) 
			return {r0:TypeInfo.zeroValue(assTyp),r1:false};
		if(!(TypeInfo.isAssignableTo(ifce.typ,assTyp)||TypeInfo.isIdentical(assTyp,ifce.typ))) // TODO review need for isIdentical 
			return {r0:TypeInfo.zeroValue(assTyp),r1:false};
		if(TypeInfo.isConcrete(assTyp))	
			return {r0:Deep.copy(ifce.val),r1:true};
		else	
			return {r0:new Interface(ifce.typ,ifce.val),r1:true};
	}
	public static function invoke(ifce:Interface,meth:String,args:Array<Dynamic>):Dynamic {
		if(ifce==null) 
			Scheduler.panicFromHaxe( "Interface.invoke null Interface"); 
		//trace("Invoke:"+ifce+":"+meth);
		if(!Std.is(ifce,Interface)) 
			Scheduler.panicFromHaxe( "Interface.invoke on non-Interface value"); 
		//return Reflect.callMethod(o:Dynamic, func:Dynamic, args:Array<Dynamic>);
		var fn:Dynamic=TypeInfo.method(ifce.typ,meth);
		//trace("Invoke:"+TypeInfo.getName(ifce.typ)+":"+meth+":"+ifce.val+":"+fn);
		//return fn([],Deep.copy(ifce.val));
		return Reflect.callMethod(null, fn, args);
	}
}

class Channel<T> { //TODO check close & rangeing over a channel
var entries:Array<T>;
var max_entries:Int;
var num_entries:Int;
var oldest_entry:Int;	
var closed:Bool;

public function new(how_many_entries:Int) {
	if(how_many_entries<=0)
		how_many_entries=1;
	entries = new Array<T>();
	max_entries = how_many_entries;
	oldest_entry = 0;
	num_entries = 0;
	closed = false;
}
public function hasSpace():Bool {
	if(this==null) return false; // non-existant channels never have space
	if(closed) return false; // closed channels don't have space
	return num_entries < max_entries;
}
public function send(source:T):Bool {
	if(closed) Scheduler.panicFromHaxe( "attempt to send to closed channel"); 
	var next_element:Int;
	if (this.hasSpace()) {
		next_element = (oldest_entry + num_entries) % max_entries;
		num_entries++;
		entries[next_element]=Deep.copy(source); // we need a full copy in the channel, not just a reference 
		return true;
	} else
		return false;
}
public function hasNoContents():Bool { // used by channel read
	if (this==null) return true; // spec: "Receiving from a nil channel blocks forever."
	if (closed) return false; // spec: "Receiving from a closed channel always succeeds..."
	else return num_entries == 0;
}
public function hasContents():Bool { // used by select
	if (this==null) return false; // spec: "Receiving from a nil channel blocks forever."
	if (closed) return true; // spec: "Receiving from a closed channel always succeeds..."
	return num_entries != 0;
}
public function receive(zero:T):{r0:T ,r1:Bool} {
	var ret:T=zero;
	if (num_entries > 0) {
		ret=entries[oldest_entry];
		oldest_entry = (oldest_entry + 1) % max_entries;
		num_entries--;
		return {r0:ret,r1:true};
	} else
		if(closed)
			return {r0:ret,r1:false}; // spec: "Receiving from a closed channel always succeeds, immediately returning the element type's zero value."
		else {
			Scheduler.panicFromHaxe( "channel receive unreachable code!"); 
			return {r0:ret,r1:false}; //dummy value as we have hit the panic button
		}
}
public inline function len():Int { 
	return num_entries; 
}
public inline function cap():Int { 
	return max_entries; 
}
public inline function close() {
	if(this==null) Scheduler.panicFromHaxe( "attempt to close a nil channel" ); 
	closed = true;
}
}

class Complex {
	public var real:Float;
	public var imag:Float;
public inline function new(r:Float, i:Float) {
	real = r;
	imag = i;
}
public static inline function neg(x:Complex):Complex {
	return new Complex(0.0-x.real,0.0-x.imag);
}
public static inline function add(x:Complex,y:Complex):Complex {
	return new Complex(x.real+y.real,x.imag+y.imag);
}
public static inline function sub(x:Complex,y:Complex):Complex {
	return new Complex(x.real-y.real,x.imag-y.imag);
}
public static inline function mul(x:Complex,y:Complex):Complex {
	return new Complex( (x.real * y.real) - (x.imag * y.imag), (x.imag * y.real) + (x.real * y.imag));
}
public static function div(x:Complex,y:Complex):Complex {
	if( (y.real == 0.0) && (y.imag == 0.0) ){
		Scheduler.panicFromHaxe( "complex divide by zero");
		return new Complex(0.0,0.0); //dummy value as we have hit the panic button
	} else {
		return new Complex(
			((x.real * y.real) + (x.imag * y.imag)) / ((y.real * y.real) + (y.imag * y.imag)) ,
			((x.imag * y.real) - (x.real * y.imag)) / ((y.real * y.real) + (y.imag * y.imag)) );
	}
}
public static inline function eq(x:Complex,y:Complex):Bool { // "=="
	return (x.real == y.real) && (x.imag == y.imag);
}
public static inline function neq(x:Complex,y:Complex):Bool { // "!="
	return (x.real != y.real) || (x.imag != y.imag);
}
}

#if ( cs || java )
	typedef HaxeInt64Typedef = haxe.Int64; // these implementations are using native types
#else
	typedef HaxeInt64Typedef = Int64;  // use the copied and modified version of the standard library class below
	// TODO revert to haxe.Int64 when the version below (or better) finally reaches the released libray
#end

// this abstract type to enable correct handling for Go of HaxeInt64Typedef
abstract HaxeInt64abs(HaxeInt64Typedef) 
from HaxeInt64Typedef to HaxeInt64Typedef 
{ 
inline function new(v:HaxeInt64Typedef) this=v;

public static inline function toInt(v:HaxeInt64abs):Int {
	#if java 
		return HaxeInt64Typedef.toInt(v); // NOTE: java version just returns low 32 bits
	#else
		return HaxeInt64Typedef.getLow(v); // NOTE: does not throw an error if value overflows Int
	#end
}
public static inline function ofInt(v:Int):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.ofInt(v));
}
public static function toFloat(vp:HaxeInt64abs):Float{ // signed int64 to float (TODO auto-cast of Unsigned pos problem)
		//TODO native versions for java & cs
		var v:HaxeInt64Typedef=vp;
		var isNegVal:Bool=false;
		if(isNeg(v)) {
			if(compare(v,make(0x80000000,0))==0) return -9223372036854775808.0; // most -ve value can't be made +ve
			isNegVal=true;
			v=neg(v);	
		}
		var ret:Float=0.0;
		var multiplier:Float=1.0;
		var one:HaxeInt64abs=make(0,1);
		for(i in 0...63) { // TODO improve speed by calculating more than 1 bit at a time
			if(!isZero(and(v,one)))
				ret += multiplier;
			multiplier *= 2.0;
			v=ushr(v,1);
		}
		if(isNegVal) return -ret;
		return ret;
}
public static function toUFloat(vp:HaxeInt64abs):Float{ // unsigned int64 to float
		//TODO native versions for java & cs
		var v:HaxeInt64Typedef=vp;
		var ret:Float=0.0;
		var multiplier:Float=1.0;
		var one:HaxeInt64abs=make(0,1);
		for(i in 0...64) { // TODO improve speed by calculating more than 1 bit at a time
			if(!isZero(and(v,one)))
	 			ret += multiplier;
			multiplier *= 2.0;
			v=ushr(v,1);
		}
		return ret;
}
public static function ofFloat(v):HaxeInt64abs { // float to signed int64 (TODO auto-cast of Unsigned is a posible problem)
		//TODO native versions for java & cs
		if(v==0.0) return make(0,0); 
		if(Math.isNaN(v)) return make(0x80000000,0); // largest -ve number is returned by Go in this situation
		var isNegVal:Bool=false;
		if(v<0.0){
			isNegVal=true;
			v = -v;
		} 
		if(v<2147483647.0) { // optimization: if just a small integer, don't do the full conversion code below
			if(isNegVal) 	return new HaxeInt64abs(HaxeInt64Typedef.neg(HaxeInt64Typedef.ofInt(Math.ceil(v))));
			else			return new HaxeInt64abs(HaxeInt64Typedef.ofInt(Math.floor(v)));
		}
		if(v>9223372036854775807.0) { // number too big to encode in 63 bits 
			if(isNegVal)	return new HaxeInt64abs(HaxeInt64Typedef.make(0x80000000,0)); 			// largest -ve number
			else			return new HaxeInt64abs(HaxeInt64Typedef.make(0x7fffffff,0xffffffff)); 	// largest +ve number
		}
		var f32:Float = 4294967296.0 ; // the number of combinations in 32-bits
		var f16:Float = 65536.0; // the number of combinations in 16-bits
		var high:Int = Math.floor(v/f32); 
		var lowFloat:Float= Math.ffloor(v-(high*f32)) ;
		var lowTop16:Int = Math.floor(lowFloat/f16) ;
		var lowBot16:Int = Math.floor(lowFloat-(lowTop16*f16)) ;
		var res:HaxeInt64Typedef = HaxeInt64Typedef.make(high,lowBot16);
		res = HaxeInt64Typedef.or(res,HaxeInt64Typedef.shl(HaxeInt64Typedef.make(0,lowTop16),16));
		if(isNegVal) return new HaxeInt64abs(HaxeInt64Typedef.neg(res));
		return new HaxeInt64abs(res);
}
public static function ofUFloat(v):HaxeInt64abs { // float to un-signed int64 
		//TODO native versions for java & cs
		if(v<=0.0) return make(0,0); // -ve values are invalid, so return 0
		if(Math.isNaN(v)) return make(0x80000000,0); // largest -ve number is returned by Go in this situation
		if(v<2147483647.0) { // optimization: if just a small integer, don't do the full conversion code below
			return ofInt(Math.floor(v));
		}
		if(v>18446744073709551615.0) { // number too big to encode in 64 bits 
			return new HaxeInt64abs(HaxeInt64Typedef.make(0xffffffff,0xffffffff)); 	// largest unsigned number
		}
		var f32:Float = 4294967296.0 ; // the number of combinations in 32-bits
		var f16:Float = 65536.0; // the number of combinations in 16-bits
		var high:Int = Math.floor(v/f32); 
		var lowFloat:Float= Math.ffloor(v-(high*f32)) ;
		var lowTop16:Int = Math.floor(lowFloat/f16) ;
		var lowBot16:Int = Math.floor(lowFloat-(lowTop16*f16)) ;
		var res:HaxeInt64Typedef = HaxeInt64Typedef.make(high,lowBot16);
		res = HaxeInt64Typedef.or(res,HaxeInt64Typedef.shl(HaxeInt64Typedef.make(0,lowTop16),16));
		return new HaxeInt64abs(res);
}
public static inline function make(h:Int,l:Int):HaxeInt64abs {
		return new HaxeInt64abs(HaxeInt64Typedef.make(h,l));
}
public static inline function toString(v:HaxeInt64abs):String {
	return HaxeInt64Typedef.toStr(v);
}
public static inline function toStr(v:HaxeInt64abs):String {
	return HaxeInt64Typedef.toStr(v);
}
public static inline function neg(v:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.neg(v));
}
public static inline function isZero(v:HaxeInt64abs):Bool {
	return HaxeInt64Typedef.isZero(v);
}
public static inline function isNeg(v:HaxeInt64abs):Bool {
	return HaxeInt64Typedef.isNeg(v);
}
public static inline function add(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.add(x,y));
}
public static inline function and(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.and(x,y));
}
private static function checkDiv(x:HaxeInt64abs,y:HaxeInt64abs,isSigned:Bool):HaxeInt64abs {
	if(HaxeInt64Typedef.isZero(y))
		Scheduler.panicFromHaxe( "attempt to divide 64-bit value by 0"); 
	if(isSigned && (HaxeInt64Typedef.compare(y,HaxeInt64Typedef.ofInt(-1))==0) && (HaxeInt64Typedef.compare(x,HaxeInt64Typedef.make(0x80000000,0))==0) ) 
	{
		//trace("checkDiv 64-bit special case");
		y=HaxeInt64Typedef.ofInt(1); // special case in the Go spec
	}
	return new HaxeInt64abs(y);
}
public static function div(x:HaxeInt64abs,y:HaxeInt64abs,isSigned:Bool):HaxeInt64abs {
	y=checkDiv(x,y,isSigned);
	if(HaxeInt64Typedef.compare(y,HaxeInt64Typedef.ofInt(1))==0) return new HaxeInt64abs(x);
	return new HaxeInt64abs(HaxeInt64Typedef.div(x,y));
}
public static function mod(x:HaxeInt64abs,y:HaxeInt64abs,isSigned:Bool):HaxeInt64abs {
	y=checkDiv(x,y,isSigned);
	if(HaxeInt64Typedef.compare(y,HaxeInt64Typedef.ofInt(1))==0) return new HaxeInt64abs(HaxeInt64Typedef.ofInt(0));
	return new HaxeInt64abs(HaxeInt64Typedef.mod(x,checkDiv(x,y,isSigned)));
}
public static inline function mul(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.mul(x,y));
}
public static inline function or(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.or(x,y));
}
public static inline function shl(x:HaxeInt64abs,y:Int):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.shl(x,y));
}
public static inline function ushr(x:HaxeInt64abs,y:Int):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.ushr(x,y));
}
public static inline function sub(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.sub(x,y));
}
public static inline function xor(x:HaxeInt64abs,y:HaxeInt64abs):HaxeInt64abs {
	return new HaxeInt64abs(HaxeInt64Typedef.xor(x,y));
}
public static inline function compare(x:HaxeInt64abs,y:HaxeInt64abs):Int {
	return HaxeInt64Typedef.compare(x,y);
}
public static function ucompare(x:HaxeInt64abs,y:HaxeInt64abs):Int {
	#if ( java || cs )
		// unsigned compare library code does not work properly for these platforms 
		if(HaxeInt64Typedef.isZero(x)) {
			if(HaxeInt64Typedef.isZero(y)) {
				return 0;
			} else {
				return -1; // any value is larger than x 
			}
		}
		if(HaxeInt64Typedef.isZero(y)) { // if we are here, we know that x is non-zero
				return 1; // any value of x is larger than y 
		}
		if(!HaxeInt64Typedef.isNeg(x)) { // x +ve
			if(!HaxeInt64Typedef.isNeg(y)){ // both +ve so normal comparison
				return HaxeInt64Typedef.compare(x,y);
			}else{ // y -ve and so larger than x
				return -1;
			}
		}else { // x -ve
			if(!HaxeInt64Typedef.isNeg(y)){ // -ve x larger than +ve y
				return 1;
			}else{ // both are -ve so the normal comparison
				return HaxeInt64Typedef.compare(x,y); //eg -1::-7 gives -1--7 = +6 meaning -1 > -7 which is correct for unsigned
			}
		}
	#else
	 	return HaxeInt64Typedef.ucompare(x,y);
	#end
}
}

#if ( java || cs )
// this class required to allow load/save of this type via pointer class in Java, as lib fn casts Dynamic to Int64 via Int
// also required in c# to avoid integer overflow errors, probably because of a related problem
// TODO consider ways to optimize

class GOint64  { 
private var i64:HaxeInt64abs;

private inline function new(v:HaxeInt64abs) {
	i64=v;
}
public inline function toString():String {
	return HaxeInt64abs.toStr(i64);
}

public static inline function make(h:Int,l:Int):GOint64 {
	return new GOint64(HaxeInt64abs.make(h,l));
}
public static inline function toInt(v:GOint64):Int {
	return HaxeInt64abs.toInt(v.i64);
}
public static inline function toFloat(v:GOint64):Float{
	return HaxeInt64abs.toFloat(v.i64);
}
public static inline function toUFloat(v:GOint64):Float{
	return HaxeInt64abs.toUFloat(v.i64);
}
public static inline function toStr(v:GOint64):String {
	return HaxeInt64abs.toStr(v.i64);
}
public static inline function ofInt(v:Int):GOint64 {
	return new GOint64(HaxeInt64abs.ofInt(v));
}
public static inline function ofFloat(v:Float):GOint64 {
	return new GOint64(HaxeInt64abs.ofFloat(v));
}
public static inline function ofUFloat(v:Float):GOint64 {
	return new GOint64(HaxeInt64abs.ofUFloat(v));
}
public static inline function neg(v:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.neg(v.i64));
}
public static inline function isZero(v:GOint64):Bool {
	return HaxeInt64abs.isZero(v.i64);
}
public static inline function isNeg(v:GOint64):Bool {
	return HaxeInt64abs.isNeg(v.i64);
}
public static inline function add(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.add(x.i64,y.i64));
}
public static inline function and(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.and(x.i64,y.i64));
}
public static inline function div(x:GOint64,y:GOint64,isSigned:Bool):GOint64 {
	return new GOint64(HaxeInt64abs.div(x.i64,y.i64,isSigned));
}
public static inline function mod(x:GOint64,y:GOint64,isSigned:Bool):GOint64 {
	return new GOint64(HaxeInt64abs.mod(x.i64,y.i64,isSigned));
}
public static inline function mul(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.mul(x.i64,y.i64));
}
public static inline function or(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.or(x.i64,y.i64));
}
public static inline function shl(x:GOint64,y:Int):GOint64 {
	return new GOint64(HaxeInt64abs.shl(x.i64,y));
}
public static inline function ushr(x:GOint64,y:Int):GOint64 {
	return new GOint64(HaxeInt64abs.ushr(x.i64,y));
}
public static inline function sub(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.sub(x.i64,y.i64));
}
public static inline function xor(x:GOint64,y:GOint64):GOint64 {
	return new GOint64(HaxeInt64abs.xor(x.i64,y.i64));
}
public static inline function compare(x:GOint64,y:GOint64):Int {
	return HaxeInt64abs.compare(x.i64,y.i64);
}
public static inline function ucompare(x:GOint64,y:GOint64):Int {
	return HaxeInt64abs.ucompare(x.i64,y.i64);
}
}
#else
	typedef GOint64 = HaxeInt64abs;
#end

//**************** rewrite of std Haxe library function haxe.Int64 for PHP integer overflow an other errors
/*
Modify haxe.Int64.hx to work on php and fix other errors
- php integer overflow and ushr are incorrect (for 32-bits Int),
special functions now correct for these faults for Int64.
- both div and mod now have the sign correct when double-negative.
- special cases of div or mod by 0 or 1 now correct.
*/
/*
 * Copyright (C)2005-2012 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

class Int64 { 

	var high : Int;
	var low : Int;

	inline function new(high, low) {
		this.high = i32(high);
		this.low = i32(low);
	}

	#if php
	/*
		private function to correctly handle 32-bit integer overflow on php 
		see: http://stackoverflow.com/questions/300840/force-php-integer-overflow
	*/
	private static function i32php(value:Int):Int { 
			value = (value & untyped __php__("0xFFFFFFFF"));
 		    if ( (value & untyped __php__("0x80000000"))!=0 )
		        value = -(((~value) & untyped __php__("0xFFFFFFFF")) + 1);
		    return value;
	}
	#end

	/*
		private function to correctly handle 32-bit ushr on php
		see: https://github.com/HaxeFoundation/haxe/commit/1a878aa90708040a41b0dd59f518d83b09ede209
	*/
	private static inline function ushr32(v:Int,n:Int):Int { 
		#if php
		 	return (v >> n) & (untyped __php__("0x7fffffff") >> (n-1));
		#else
			return v>>>n;
		#end
	}

	@:extern static inline function i32(i) {
		#if (js || flash8)
			return i | 0;
		#elseif php
			return i32php(i); // handle overflow of 32-bit integers correctly 
		#else
			return i;
		#end
	}

	@:extern static inline function i32mul(a:Int,b:Int) {
		#if (php || js || flash8)
		/*
			We can't simply use i32(a*b) since we might overflow (52 bits precision in doubles)
		*/
		return i32(i32((a * (b >>> 16)) << 16) + (a * (b&0xFFFF)));
		#else
		return a * b;
		#end
	}
	
	#if as3 public #end function toString() {
		if ((high|low) == 0 )
			return "0";
		var str = "";
		var neg = false;
		var i = this;
		if( isNeg(i) ) {
			neg = true;
			i = Int64.neg(i);
		}
		var ten = ofInt(10);
		while( !isZero(i) ) {
			var r = divMod(i, ten);
			str = r.modulus.low + str; 
			i = r.quotient; 
		}
		if( neg ) str = "-" + str;
		return str;
	}

	public static inline function make( high : Int, low : Int ) : Int64 {
		return new Int64(high, low); 
	}

	public static inline function ofInt( x : Int ) : Int64 {
		return new Int64(x >> 31,x);
	}

	public static function toInt( x : Int64 ) : Int {
		if( x.high != 0 ) {
			if( x.high < 0 )
				return -toInt(neg(x));
			throw "Overflow"; //NOTE go panic not used here as it is in the Haxe libary code
		}
		return x.low; 
	}

	public static function getLow( x : Int64 ) : Int {
		return x.low;
	}

	public static function getHigh( x : Int64 ) : Int {
		return x.high;
	}

	public static function add( a : Int64, b : Int64 ) : Int64 {
		var high = i32(a.high + b.high);
		var low = i32(a.low + b.low);
		if( uicompare(low,a.low) < 0 )
			high++;
		return new Int64(high, low);
	}

	public static function sub( a : Int64, b : Int64 ) : Int64 {
		var high = i32(a.high - b.high); // i32() call required to match add
		var low = i32(a.low - b.low); // i32() call required to match add
		if( uicompare(a.low,b.low) < 0 )
			high--;
		return new Int64(high, low);
	}

	public static function mul( a : Int64, b : Int64 ) : Int64 {
		var mask = 0xFFFF;
		var al = a.low & mask, ah = ushr32(a.low , 16); 
		var bl = b.low & mask, bh = ushr32(b.low , 16); 
		var p00 = al * bl;
		var p10 = ah * bl;
		var p01 = al * bh;
		var p11 = ah * bh;
		var low = p00;
		var high = i32(p11 + ushr32(p01 , 16) + ushr32(p10 , 16));
		p01 = i32(p01 << 16); low = i32(low + p01); if( uicompare(low, p01) < 0 ) high = i32(high + 1);
		p10 = i32(p10 << 16); low = i32(low + p10); if( uicompare(low, p10) < 0 ) high = i32(high + 1);
		high = i32(high + i32mul(a.low,b.high));
		high = i32(high + i32mul(a.high,b.low));
		return new Int64(high, low);
	}

	static function divMod( modulus : Int64, divisor : Int64 ) {
		var quotient = new Int64(0, 0);
		var mask = new Int64(0, 1);
		divisor = new Int64(divisor.high, divisor.low);
		while( divisor.high >= 0 ) { 
			var cmp = ucompare(divisor, modulus);
			divisor.high = i32( i32(divisor.high << 1) | ushr32(divisor.low , 31) ); 
			divisor.low = i32(divisor.low << 1); 
			mask.high = i32( i32(mask.high << 1) | ushr32(mask.low , 31) ); 
			mask.low = i32(mask.low << 1);
			if( cmp >= 0 ) break;
		}
		while( i32(mask.low | mask.high) != 0 ) { 
			if( ucompare(modulus, divisor) >= 0 ) {
				quotient.high= i32(quotient.high | mask.high); 
				quotient.low= i32(quotient.low | mask.low); 
				modulus = sub(modulus,divisor);
			}
			mask.low = i32( ushr32(mask.low , 1) | i32(mask.high << 31) ); 
			mask.high = ushr32(mask.high , 1); 

			divisor.low = i32( ushr32(divisor.low , 1) | i32(divisor.high << 31) ); 
			divisor.high = ushr32(divisor.high , 1); 
		}
		return { quotient : quotient, modulus : modulus };
	}

	public static function div( a : Int64, b : Int64 ) : Int64 { 
		if(b.high==0) // handle special cases of 0 and 1
			switch(b.low) {
			case 0:	throw "divide by zero";  //NOTE go panic not used here as it is in the Haxe libary code
			case 1: return new Int64(a.high,a.low);
			} 
		var sign = ((a.high<0) || (b.high<0)) && (!( (a.high<0) && (b.high<0))); // make sure we get the correct sign
		if( a.high < 0 ) a = neg(a);
		if( b.high < 0 ) b = neg(b);
		var q = divMod(a, b).quotient;
		return sign ? neg(q) : q;
	}

	public static function mod( a : Int64, b : Int64 ) : Int64 {
		if(b.high==0) // handle special cases of 0 and 1
			switch(b.low) {
			case 0:	throw "modulus by zero";  //NOTE go panic not used here as it is in the Haxe libary code
			case 1: return ofInt(0);
			}
		var sign = a.high<0; // the sign of a modulus is the sign of the value being mod'ed
		if( a.high < 0 ) a = neg(a);
		if( b.high < 0 ) b = neg(b);
		var m = divMod(a, b).modulus;
		return sign ? neg(m) : m;
	}

	public static inline function shl( a : Int64, b : Int ) : Int64 {
		return if( b & 63 == 0 ) a else if( b & 63 < 32 ) new Int64( (a.high << b) | ushr32(a.low, i32(32-(b&63))), a.low << b ) else new Int64( a.low << i32(b - 32), 0 );
	}

	public static inline function shr( a : Int64, b : Int ) : Int64 {
		return if( b & 63 == 0 ) a else if( b & 63 < 32 ) new Int64( a.high >> b, ushr32(a.low,b) | (a.high << i32(32 - (b&63))) ) else new Int64( a.high >> 31, a.high >> i32(b - 32) );
	}

	public static inline function ushr( a : Int64, b : Int ) : Int64 {
		return if( b & 63 == 0 ) a else if( b & 63 < 32 ) new Int64( ushr32(a.high, b), ushr32(a.low, b) | (a.high << i32(32 - (b&63))) ) else new Int64( 0, ushr32(a.high, i32(b - 32)) );
	}

	public static inline function and( a : Int64, b : Int64 ) : Int64 {
		return new Int64( a.high & b.high, a.low & b.low );
	}

	public static inline function or( a : Int64, b : Int64 ) : Int64 {
		return new Int64( a.high | b.high, a.low | b.low );
	}

	public static inline function xor( a : Int64, b : Int64 ) : Int64 {
		return new Int64( a.high ^ b.high, a.low ^ b.low );
	}

	public static inline function neg( a : Int64 ) : Int64 {
		var high = i32(~a.high); 
		var low = i32(-a.low); 
		if( low == 0 )
			high++;
		return new Int64(high,low);
	}

	public static inline function isNeg( a : Int64 ) : Bool {
		return a.high < 0;
	}

	public static inline function isZero( a : Int64 ) : Bool {
		return (a.high | a.low) == 0;
	}

	static function uicompare( a : Int, b : Int ) {
		return a < 0 ? (b < 0 ? i32(~b - ~a) : 1) : (b < 0 ? -1 : i32(a - b));
	}

	public static inline function compare( a : Int64, b : Int64 ) : Int {
		var v = i32(a.high - b.high); 
		return if( v != 0 ) v else uicompare(a.low,b.low);
	}

	/**
		Compare two Int64 in unsigned mode.
	**/
	public static inline function ucompare( a : Int64, b : Int64 ) : Int {
		var v = uicompare(a.high,b.high);
		return if( v != 0 ) v else uicompare(a.low, b.low);
	}

	public static inline function toStr( a : Int64 ) : String {
		return a.toString();
	}

}

//**************** END REWRITE of haxe.Int64 for php and to correct errors


// GoRoutine 
class StackFrameBasis
{
public var _incomplete(default,null):Bool=true;
public var _latestPH:Int=0;
public var _latestBlock:Int=0;
public var _functionPH:Int;
public var _functionName:String;
public var _goroutine(default,null):Int;
public var _bds:Array<Dynamic>; // bindings for closures
public var _deferStack:List<StackFrame>;

public function new(gr:Int,ph:Int,name:String){
	_goroutine=gr;
	_functionPH=ph;
	_functionName=name;
	_deferStack=new List<StackFrame>();
	// TODO optionally profile function entry here
}

public inline function setLatest(ph:Int,blk:Int){
	this.setPH(ph);
	_latestBlock=blk;
	// TODO optionally profile block entry here
}

public inline function setPH(ph:Int){
	_latestPH=ph;
	// TODO optionally profile instruction line entry here	
}

public inline function defer(fn:StackFrame){
	//trace("defer");
	_deferStack.add(fn); // add to the end of the list, so that runDefers() get them in the right order
}

public function runDefers(){
	//trace("runDefers");
	while(!_deferStack.isEmpty()){
		//trace("runDefers-pop");
		Scheduler.push(_goroutine,_deferStack.pop());
		//Scheduler.traceStackDump();
	}
}


}

interface StackFrame
{
public var _incomplete(default,null):Bool;
public var _latestPH:Int;
public var _latestBlock:Int;
public var _functionPH:Int;
public var _functionName:String;
public var _goroutine(default,null):Int;
public var _bds:Array<Dynamic>; // bindings for closures
public var _deferStack:List<StackFrame>;
function run():StackFrame; // function state machine (set up by each Go function Haxe class)
function res():Dynamic; // function result (set up by each Go function Haxe class)
}

class Scheduler { // NOTE this code requires a single-thread, as there is no locking 
// public
public static var doneInit:Bool=false; // flag to limit go-routines to 1 during the init() processing phase
// private
static var grStacks:Array<List<StackFrame>>=new Array<List<StackFrame>>(); 
static var grInPanic:Array<Bool>=new Array<Bool>();
static var grPanicMsg:Array<Interface>=new Array<Interface>();
static var panicStackDump:String="";
static var entryCount:Int=0; // this to be able to monitor the re-entrys into this routine for debug
static var currentGR:Int=0; // the current goroutine, used by Scheduler.panicFromHaxe(), NOTE this requires a single thread

public static function timerEventHandler(dummy:Dynamic) { // if the scheduler is being run from a timer, this is where it comes to
	runAll();
}

public static function runAll() { // this must be re-entrant, in order to allow Haxe->Go->Haxe->Go for some runtime functions
	var cg:Int=0; // reentrant current goroutine
	entryCount++;
	if(entryCount>2) { // this is the simple limit to runtime recursion  
		throw "Scheduler.runAll() entryCount exceeded - "+stackDump();
	}

	// special handling for goroutine 0, which is used in the initialisation phase and re-entrantly, where only one goroutine may operate		
	if(grStacks[0].isEmpty()) { // check if there is ever likley to be anything to do
		if(grStacks.length<=1) { 
			throw "Scheduler: there is only one goroutine and its stack is empty\n"+stackDump();		
		}
	} else { // run goroutine zero
		runOne(0,entryCount);
	}

	if(doneInit  && entryCount==1 ) {	// don't run extra goroutines when we are re-entrant or have not finished initialistion
									// NOTE this means that Haxe->Go->Haxe->Go code cannot run goroutines 
		for(cg in 1...grStacks.length) { // length may grow during a run through, NOTE goroutine 0 not run again
			if(!grStacks[cg].isEmpty()) {
				runOne(cg,entryCount);
			}
		}
		// prune the list of goroutines only at the end (goroutine numbers are in the stack frames, so can't be altered) 
		while(grStacks.length>1){
			if(grStacks[grStacks.length-1].isEmpty())
				grStacks.pop();
			else
				break;
		}
	}
	entryCount--;
}
static inline function runOne(gr:Int,entryCount:Int){ // called from above to call individual goroutines TODO: Review for multi-threading
	if(grInPanic[gr]) {
		if(entryCount!=1) { // we are in re-entrant code, so we can't panic again, as this may be part of the panic handling...
				// NOTE this means that Haxe->Go->Haxe->Go code cannot use panic() reliably 
				run1(gr);
		} else {
			while(grInPanic[gr]){
				if(grStacks[gr].isEmpty())
					throw "Panic in goroutine "+gr+"\n"+panicStackDump; // use stored stack dump
				else {
					var sf:StackFrame=grStacks[gr].pop();
					while(!sf._deferStack.isEmpty()){ 
						// NOTE this will run all of the defered code for a function, even if recover() is encountered
						// TODO go back to recover code block in SSA function struct after a recover
						var def:StackFrame=sf._deferStack.pop();
						Scheduler.push(gr,def);
						while(def._incomplete) 
							runAll(); // with entryCount >1, so run as above 
					}
				}
			}
		}
	} else {
		run1(gr);
	}
}
public static inline function run1(gr:Int){ // used by callFromRT() for every go function
		if(grStacks[gr].first()==null) { 
			throw "Panic:"+grPanicMsg+"\nScheduler: null stack entry for goroutine "+gr+"\n"+stackDump();
		} else {
			currentGR=gr;
			grStacks[gr].first().run(); // run() may call haxe which calls these routines recursively 
		}	
}
public static function makeGoroutine():Int {
	for (r in 0 ... grStacks.length)
		if(grStacks[r].isEmpty())
		{
			grInPanic[r]=false;
			grPanicMsg[r]=null;
			return r;	// reuse a previous goroutine number if possible
		}
	var l:Int=grStacks.length;
	grStacks[l]=new List<StackFrame>();
	grInPanic[l]=false;
	grPanicMsg[l]=null;
	return l;
}
public static function pop(gr:Int):StackFrame {
	if(gr>=grStacks.length||gr<0)
		throw "Scheduler.pop() invalid goroutine";
	return grStacks[gr].pop();
}
public static function push(gr:Int,sf:StackFrame){
	if(gr>=grStacks.length||gr<0)
		throw "Scheduler.push() invalid goroutine";
	grStacks[gr].push(sf);
}

public static function stackDump():String {
	var ret:String = "";
	var gr:Int;
	ret += "runAll() entryCount="+entryCount+"\n";
	for(gr in 0...grStacks.length) {
		ret += "Goroutine " + gr + " "+grPanicMsg[gr]+"\n"; //may need to unpack the interface
		if(grStacks[gr].isEmpty()) {
			ret += "Stack is empty\n";
		} else {
			ret += "Stack has " +grStacks[gr].length+ " entries:\n";
			var it=grStacks[gr].iterator();
			while(it.hasNext()) {
				var ent=it.next();
				if(ent==null) {
					ret += "\tStack entry is null\n";
				} else {
					ret += "\t"+ent._functionName+" starting at "+Go.CPos(ent._functionPH);
					ret += " latest position "+Go.CPos(ent._latestPH);
					ret += " latest block "+ent._latestBlock+"\n";
				}
			}
		}
	}
	return ret;
}

public static function traceStackDump() {trace(stackDump());}

public static function panic(gr:Int,err:Interface){
	if(gr>=grStacks.length||gr<0)
		throw "Scheduler.panic() invalid goroutine";
	if(!grInPanic[gr]) { // if we are already in a panic, keep the first message and stack-dump
		grInPanic[gr]=true;
		grPanicMsg[gr]=err;
		panicStackDump=stackDump();
	}
}
public static function recover(gr:Int):Interface{
	if(gr>=grStacks.length||gr<0)
		throw "Scheduler.recover() invalid goroutine";
	grInPanic[gr]=false;
	return grPanicMsg[gr];
}
public static function panicFromHaxe(err:String) { 
	if(currentGR>=grStacks.length||currentGR<0) 
		// if currnent goroutine is -ve, or out of range, always panics in goroutine 0
		panic(0,new Interface(TypeInfo.getId("string"),"Runtime panic, unknown goroutine, "+err+" "));
	else
		panic(currentGR,new Interface(TypeInfo.getId("string"),"Runtime panic, "+err+" "));
}
public static function bbi() {
	panicFromHaxe("bad block ID (internal phi error)");
}
public static function ioor() {
	panicFromHaxe("index out of range");
}
public static inline function NumGoroutine():Int {
	return grStacks.length;
}
}



#if js @:expose("Go_utf8_RuneLen") #end class Go_utf8_RuneLen extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:310:6
var p_r:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Int) {
super(gr,5554,"Go_utf8_RuneLen");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Int) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_RuneLen(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Int) : Int {
var _sf=new Go_utf8_RuneLen(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Int) : Go_utf8_RuneLen
{return new Go_utf8_RuneLen(gr,_bds, p_r);
}
public function run():Go_utf8_RuneLen {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5554,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(5554,1);
this.setPH(5557);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:313:3

case 2: // switch.body
this.setLatest(5557,2);
this.setPH(5559);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:315:3

case 3: // switch.next
this.setLatest(5559,3);
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(5559,4);
this.setPH(5561);
_res= 2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:317:3

case 5: // switch.next
this.setLatest(5561,5);
this.SubFn2();
_Phi=5;
case 6: // switch.body
this.setLatest(5561,6);
this.setPH(5563);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:319:3

case 7: // switch.next
this.setLatest(5563,7);
this.SubFn3();
_Phi=7;
case 8: // switch.body
this.setLatest(5563,8);
this.setPH(5565);
_res= 3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 3:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:321:3

case 9: // switch.next
this.setLatest(5565,9);
this.SubFn4();
_Phi=9;
case 10: // binop.rhs
this.setLatest(5565,10);
this.SubFn5();
_Phi=10;
case 11: // binop.done
this.setLatest(5565,11);
this.setPH(5562);
_t6=((_Phi==7)?false:(_Phi==10)?_t5:false); // _t6 = phi [7.switch.next: false:bool, 10.binop.rhs: t5] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:25
this.SubFn6();
_Phi=11;
case 12: // switch.body
this.setLatest(5562,12);
this.setPH(5567);
_res= 4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 4:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:323:3

case 13: // switch.next
this.setLatest(5567,13);
this.SubFn7();
_Phi=13;
case 14: // switch.next
this.setLatest(5567,14);
this.setPH(5569);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:325:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(5556);
_t0=(p_r<0); // _t0 = r < 0:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:312:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:312:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(5558);
_t1=(p_r<=127); // _t1 = r <= 127:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:314:9
_Next=_t1 ? 2 : 5; // if t1 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:314:9
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(5560);
_t2=(p_r<=2047); // _t2 = r <= 2047:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:316:9
_Next=_t2 ? 4 : 7; // if t2 goto 4.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:316:9
}// end SubFn2
private inline  function SubFn3():Void {
var _t3:Bool;
this.setPH(5562);
_t3=(55296<=p_r); // _t3 = 55296:rune <= r *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:20
_Next=_t3 ? 10 : 11; // if t3 goto 10.binop.rhs else 11.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:20
}// end SubFn3
private inline  function SubFn4():Void {
var _t4:Bool;
this.setPH(5564);
_t4=(p_r<=65535); // _t4 = r <= 65535:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:320:9
_Next=_t4 ? 8 : 13; // if t4 goto 8.switch.body else 13.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:320:9
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(5562);
_t5=(p_r<=57343); // _t5 = r <= 57343:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:30
_Next=11; // jump 11.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:30
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t6 ? 6 : 9; // if t6 goto 6.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:318:30
}// end SubFn6
private inline  function SubFn7():Void {
var _t7:Bool;
this.setPH(5566);
_t7=(p_r<=1114111); // _t7 = r <= 1114111:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:322:9
_Next=_t7 ? 12 : 14; // if t7 goto 12.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:322:9
}// end SubFn7
}
#if js @:expose("Go_math_Float64bits") #end class Go_math_Float64bits extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/unsafe.go:17:6
var p_f:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float) {
super(gr,4991,"Go_math_Float64bits");
this._bds=_bds;
this.p_f=p_f;
Scheduler.push(gr,this);
}
var _res:GOint64;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:UnsafePointer=null;
var _t2:Pointer=null;
var _t3:GOint64=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float) : GOint64 {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Float64bits(0,[], p_f).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float) : GOint64 {
var _sf=new Go_math_Float64bits(_gr,[], p_f).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float) : Go_math_Float64bits
{return new Go_math_Float64bits(gr,_bds, p_f);
}
public function run():Go_math_Float64bits {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4991,0);
this.SubFn0();
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/unsafe.go:17:38

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:UnsafePointer;
var _t2:Pointer;
_t0=new Pointer(0.0); // _t0 = new float64 (f) *ssa.Alloc @ /usr/local/go/src/pkg/math/unsafe.go:17:18
_t0.store(p_f); // *t0 = f *ssa.Store near /usr/local/go/src/pkg/math/unsafe.go:17:18
_t1=new UnsafePointer(_t0); // _t1 = convert unsafe.Pointer <- *float64 (t0) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:17:70
_t2=cast(_t1,Pointer); // _t2 = convert *uint64 <- unsafe.Pointer (t1) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:17:55
_t3=_t2.load(); // _t3 = *t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/unsafe.go:17:45
}// end SubFn0
}
#if (!php) private #end class Go_math_expm1 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/expm1.go:126:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1531,"Go_math_expm1");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _SF3:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _SF4:StackFrame;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Int=0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Bool=false;
var _t36:Bool=false;
var _t37:Int=0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Int=0;
var _t49:Int=0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Int=0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Bool=false;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Bool=false;
var _t69:Bool=false;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _SF5:StackFrame;
var _t72:GOint64=null;
var _t73:GOint64=null;
var _t74:GOint64=null;
var _t75:GOint64=null;
var _SF6:StackFrame;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Bool=false;
var _t79:Float=0.0;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Bool=false;
var _t86:Bool=false;
var _t87:Bool=false;
var _t88:Int=0;
var _t89:GOint64=null;
var _t90:GOint64=null;
var _SF7:StackFrame;
var _t91:Float=0.0;
var _t92:Float=0.0;
var _t93:Float=0.0;
var _SF8:StackFrame;
var _t94:GOint64=null;
var _t95:GOint64=null;
var _t96:GOint64=null;
var _t97:GOint64=null;
var _SF9:StackFrame;
var _t98:Float=0.0;
var _t99:Int=0;
var _t100:Int=0;
var _t101:GOint64=null;
var _SF10:StackFrame;
var _t102:Float=0.0;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Float=0.0;
var _SF11:StackFrame;
var _t106:GOint64=null;
var _t107:GOint64=null;
var _t108:GOint64=null;
var _t109:GOint64=null;
var _SF12:StackFrame;
var _t110:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_expm1(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_expm1(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_expm1
{return new Go_math_expm1(gr,_bds, p_x);
}
public function run():Go_math_expm1 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1531,0);
this.setPH(1551);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -1;
return this;
case -1:
this.setLatest(1551,-1);
_t0=_SF1.res();
 // _t0 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:146:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1551,1);
this.setPH(1552);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:147:3

case 2: // switch.body
this.setLatest(1552,2);
this.setPH(1554);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:149:3

case 3: // switch.next
this.setLatest(1554,3);
this.setPH(1553);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -2;
return this;
case -2:
this.setLatest(1553,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:148:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1553,4);
this.setPH(1551);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(1551,-3);
_t2=_SF3.res();
 // _t2 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:146:27
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1551,5);
_t3=((_Phi==0)?true:(_Phi==4)?_t2:false); // _t3 = phi [0.entry: true:bool, 4.binop.rhs: t2] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:146:19
this.SubFn3();
_Phi=5;
case 6: // switch.next
this.setLatest(1551,6);
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(1551,7);
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(1551,8);
this.setPH(1557);
_t6=((_Phi==6)?p_x:(_Phi==7)?_t5:0.0); // _t6 = phi [6.switch.next: x, 7.if.then: t5] #absx *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:152:2
this.setPH(1558);
_t7=((_Phi==6)?false:(_Phi==7)?true:false); // _t7 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:153:2
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(1558,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(1558,10);
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(1558,11);
this.setPH(1567);
_t11=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t11 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:162:14
_res= _t11;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t11 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:162:4

case 12: // if.done
this.setLatest(1567,12);
this.SubFn9();
_Phi=12;
case 13: // if.then
this.setLatest(1567,13);
this.setPH(1570);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:165:4

case 14: // if.then
this.setLatest(1570,14);
this.SubFn10();
_Phi=14;
case 15: // if.done
this.setLatest(1570,15);
this.setPH(1531);
_t13=((_Phi==18)?_t41:(_Phi==26)?p_x:0.0); // _t13 = phi [18.if.done: t41, 26.if.else: x] #x *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:126:12
this.setPH(1575);
_t14=((_Phi==18)?_t43:(_Phi==26)?0:0.0); // _t14 = phi [18.if.done: t43, 26.if.else: 0:float64] #c *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:170:6
this.setPH(1576);
_t15=((_Phi==18)?_t37:(_Phi==26)?0:0); // _t15 = phi [18.if.done: t37, 26.if.else: 0:int] #k *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:171:6
this.SubFn11();
_Phi=15;
case 16: // if.else
this.setLatest(1576,16);
this.SubFn12();
_Phi=16;
case 17: // if.then
this.setLatest(1576,17);
this.SubFn13();
_Phi=17;
case 18: // if.done
this.setLatest(1576,18);
_t37=((_Phi==20)?1:(_Phi==23)?_t49:(_Phi==21)?(-1):0); // _t37 = phi [20.if.then: 1:int, 23.if.done: t49, 21.if.else: -1:int] #k *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:171:6
this.setPH(1578);
_t38=((_Phi==20)?_t44:(_Phi==23)?_t52:(_Phi==21)?_t45:0.0); // _t38 = phi [20.if.then: t44, 23.if.done: t52, 21.if.else: t45] #hi *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:173:7
_t39=((_Phi==20)?1.9082149292705877e-10:(_Phi==23)?_t53:(_Phi==21)?(-1.9082149292705877e-10):0.0); // _t39 = phi [20.if.then: 95410746463529385001/500000000000000000000000000000:float64, 23.if.done: t53, 21.if.else: -95410746463529385001/500000000000000000000000000000:float64] #lo *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:173:11
this.setPH(1595);
_t40=((_Phi==20)?0:(_Phi==23)?_t50:(_Phi==21)?0:0.0); // _t40 = phi [20.if.then: 0:float64, 23.if.done: t50, 21.if.else: 0:float64] #t *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:190:4
this.SubFn14();
_Phi=18;
case 19: // if.else
this.setLatest(1595,19);
this.SubFn15();
_Phi=19;
case 20: // if.then
this.setLatest(1595,20);
this.SubFn16();
_Phi=20;
case 21: // if.else
this.setLatest(1595,21);
this.SubFn17();
_Phi=21;
case 22: // if.then
this.setLatest(1595,22);
this.SubFn18();
_Phi=22;
case 23: // if.done
this.setLatest(1595,23);
this.setPH(1576);
_t49=((_Phi==22)?_t48:(_Phi==24)?_t56:0); // _t49 = phi [22.if.then: t48, 24.if.else: t56] #k *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:171:6
this.SubFn19();
_Phi=23;
case 24: // if.else
this.setLatest(1576,24);
this.SubFn20();
_Phi=24;
case 25: // if.then
this.setLatest(1576,25);
this.setPH(1602);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:197:3

case 26: // if.else
this.setLatest(1602,26);
this.SubFn21();
_Phi=26;
case 27: // if.then
this.setLatest(1602,27);
this.SubFn22();
_Phi=27;
case 28: // if.done
this.setLatest(1602,28);
this.SubFn23();
this.setPH(1641);
_res= _t64;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t64 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:236:2

case 29: // switch.body
this.setLatest(1641,29);
this.SubFn24();
this.setPH(1618);
_res= _t67;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t67 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:213:4

case 30: // switch.body
this.setLatest(1618,30);
this.SubFn25();
_Phi=30;
case 31: // switch.next
this.setLatest(1618,31);
this.SubFn26();
_Phi=31;
case 32: // switch.body
this.setLatest(1618,32);
this.SubFn27();
this.setPH(1626);
_SF5=Go_math_Float64bits.call(this._goroutine,[],_t71);
_Next = -5;
return this;
case -5:
this.setLatest(1626,-5);
_t72=_SF5.res();
 // _t72 = Float64bits(t71) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:221:35
this.SubFn28();
_SF6=Go_math_Float64frombits.call(this._goroutine,[],_t75);
_Next = -6;
return this;
case -6:
this.setLatest(1626,-6);
_t76=_SF6.res();
 // _t76 = Float64frombits(t75) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:221:23
this.SubFn29();
this.setPH(1627);
_res= _t77;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t77 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:222:4

case 33: // switch.next
this.setLatest(1627,33);
this.SubFn30();
_Phi=33;
case 34: // if.then
this.setLatest(1627,34);
this.SubFn31();
this.setPH(1621);
_res= _t81;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t81 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:216:5

case 35: // if.done
this.setLatest(1621,35);
this.SubFn32();
this.setPH(1623);
_res= _t84;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t84 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:218:4

case 36: // switch.next
this.setLatest(1623,36);
this.SubFn33();
_Phi=36;
case 37: // binop.rhs
this.setLatest(1623,37);
this.SubFn34();
_Phi=37;
case 38: // binop.done
this.setLatest(1623,38);
this.setPH(1624);
_t87=((_Phi==33)?true:(_Phi==37)?_t86:false); // _t87 = phi [33.switch.next: true:bool, 37.binop.rhs: t86] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:219:16
this.SubFn35();
_Phi=38;
case 39: // if.then
this.setLatest(1624,39);
this.SubFn36();
this.setPH(1630);
_SF7=Go_math_Float64frombits.call(this._goroutine,[],_t90);
_Next = -7;
return this;
case -7:
this.setLatest(1630,-7);
_t91=_SF7.res();
 // _t91 = Float64frombits(t90) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:225:24
this.SubFn37();
this.setPH(1632);
_SF8=Go_math_Float64bits.call(this._goroutine,[],_t93);
_Next = -8;
return this;
case -8:
this.setLatest(1632,-8);
_t94=_SF8.res();
 // _t94 = Float64bits(t93) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:227:35
this.SubFn38();
_SF9=Go_math_Float64frombits.call(this._goroutine,[],_t97);
_Next = -9;
return this;
case -9:
this.setLatest(1632,-9);
_t98=_SF9.res();
 // _t98 = Float64frombits(t97) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:227:23
this.setPH(1633);
_res= _t98;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t98 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:228:4

case 40: // if.done
this.setLatest(1633,40);
this.SubFn39();
this.setPH(1635);
_SF10=Go_math_Float64frombits.call(this._goroutine,[],_t101);
_Next = -10;
return this;
case -10:
this.setLatest(1635,-10);
_t102=_SF10.res();
 // _t102 = Float64frombits(t101) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:230:23
this.SubFn40();
this.setPH(1638);
_SF11=Go_math_Float64bits.call(this._goroutine,[],_t105);
_Next = -11;
return this;
case -11:
this.setLatest(1638,-11);
_t106=_SF11.res();
 // _t106 = Float64bits(t105) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:233:34
this.SubFn41();
_SF12=Go_math_Float64frombits.call(this._goroutine,[],_t109);
_Next = -12;
return this;
case -12:
this.setLatest(1638,-12);
_t110=_SF12.res();
 // _t110 = Float64frombits(t109) *ssa.Call @ /usr/local/go/src/pkg/math/expm1.go:233:22
this.setPH(1639);
_res= _t110;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t110 *ssa.Return @ /usr/local/go/src/pkg/math/expm1.go:234:3

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/expm1.go:234:3
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 6; // if t1 goto 2.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/expm1.go:234:3
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:234:3
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 1 : 3; // if t3 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/expm1.go:234:3
}// end SubFn3
private inline  function SubFn4():Void {
var _t4:Bool;
this.setPH(1559);
_t4=(Force.toFloat(p_x)<Force.toFloat(0)); // _t4 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:154:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:154:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(1560);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/expm1.go:155:10
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:155:10
}// end SubFn5
private inline  function SubFn6():Void {
var _t8:Bool;
this.setPH(1565);
_t8=(Force.toFloat(_t6)>=Force.toFloat(38.816242111356935)); // _t8 = t6 >= 194081210556784686637/5000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:160:10
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:160:10
}// end SubFn6
private inline  function SubFn7():Void {
var _t9:Bool;
this.setPH(1566);
_t9=(Force.toFloat(_t6)>=Force.toFloat(709.782712893384)); // _t9 = t6 >= 88722839111672996637/125000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:161:11
_Next=_t9 ? 11 : 12; // if t9 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:161:11
}// end SubFn7
private inline  function SubFn8():Void {
var _t10:Bool;
this.setPH(1577);
_t10=(Force.toFloat(_t6)>Force.toFloat(0.34657359027997264)); // _t10 = t6 > 346573590279972654709/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:172:10
_Next=_t10 ? 14 : 16; // if t10 goto 14.if.then else 16.if.else *ssa.If near /usr/local/go/src/pkg/math/expm1.go:172:10
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t7 ? 13 : 10; // if t7 goto 13.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:172:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t12:Bool;
this.setPH(1579);
_t12=(Force.toFloat(_t6)<Force.toFloat(1.0397207708399179)); // _t12 = t6 < 103972077083991796413/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:174:11
_Next=_t12 ? 17 : 19; // if t12 goto 17.if.then else 19.if.else *ssa.If near /usr/local/go/src/pkg/math/expm1.go:174:11
}// end SubFn10
private inline  function SubFn11():Void {
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t28:Float;
var _t30:Float;
var _t31:Float;
var _t32:Float;
var _t33:Float;
var _t35:Bool;
this.setPH(1608);
_t16=(Force.toFloat(0.5)*Force.toFloat(_t13)); // _t16 = 1/2:float64 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:203:13
this.setPH(1609);
_t17=(Force.toFloat(_t13)*Force.toFloat(_t16)); // _t17 = t13 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:204:11
this.setPH(1610);
_t18=(Force.toFloat(_t17)*Force.toFloat((-2.0109921818362437e-07))); // _t18 = t17 * -100549609091812185663/500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:47
_t19=(Force.toFloat(4.008217827329362e-06)+Force.toFloat(_t18)); // _t19 = 6262840355202128743/1562500000000000000000000:float64 + t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:43
_t20=(Force.toFloat(_t17)*Force.toFloat(_t19)); // _t20 = t17 * t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:39
_t21=(Force.toFloat((-7.93650757867488e-05))+Force.toFloat(_t20)); // _t21 = -793650757867487942473/10000000000000000000000000:float64 + t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:35
_t22=(Force.toFloat(_t17)*Force.toFloat(_t21)); // _t22 = t17 * t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:31
_t23=(Force.toFloat(0.0015873015872548146)+Force.toFloat(_t22)); // _t23 = 31746031745096292033/20000000000000000000000:float64 + t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:27
_t24=(Force.toFloat(_t17)*Force.toFloat(_t23)); // _t24 = t17 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:23
_t25=(Force.toFloat((-0.03333333333333313))+Force.toFloat(_t24)); // _t25 = -83333333333332829107/2500000000000000000000:float64 + t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:19
_t26=(Force.toFloat(_t17)*Force.toFloat(_t25)); // _t26 = t17 * t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:15
_t27=(Force.toFloat(1)+Force.toFloat(_t26)); // _t27 = 1:float64 + t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:10
this.setPH(1611);
_t28=(Force.toFloat(_t27)*Force.toFloat(_t16)); // _t28 = t27 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:206:13
_t29=(Force.toFloat(3)-Force.toFloat(_t28)); // _t29 = 3:float64 - t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:206:9
this.setPH(1612);
_t30=(Force.toFloat(_t27)-Force.toFloat(_t29)); // _t30 = t27 - t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:207:18
_t31=(Force.toFloat(_t13)*Force.toFloat(_t29)); // _t31 = t13 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:207:33
_t32=(Force.toFloat(6)-Force.toFloat(_t31)); // _t32 = 6:float64 - t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:207:30
_t33=Force.floatDiv(Force.toFloat(_t30),Force.toFloat(_t32)); // _t33 = t30 / t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:207:23
_t34=(Force.toFloat(_t17)*Force.toFloat(_t33)); // _t34 = t17 * t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:207:11
this.setPH(1613);
_t35=(_t15!=0); // _t35 = t15 != 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:208:7
_Next=_t35 ? 27 : 28; // if t35 goto 27.if.then else 28.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:208:7
}// end SubFn11
private inline  function SubFn12():Void {
var _t36:Bool;
this.setPH(1601);
_t36=(Force.toFloat(_t6)<Force.toFloat(5.551115123125783e-17)); // _t36 = t6 < 1/18014398509481984:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:196:17
_Next=_t36 ? 25 : 26; // if t36 goto 25.if.then else 26.if.else *ssa.If near /usr/local/go/src/pkg/math/expm1.go:196:17
}// end SubFn12
private inline  function SubFn13():Void {
_Next=_t7 ? 21 : 20; // if t7 goto 21.if.else else 20.if.then *ssa.If near /usr/local/go/src/pkg/math/expm1.go:196:17
}// end SubFn13
private inline  function SubFn14():Void {
var _t42:Float;
this.setPH(1599);
_t41=(Force.toFloat(_t38)-Force.toFloat(_t39)); // _t41 = t38 - t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:194:10
this.setPH(1600);
_t42=(Force.toFloat(_t38)-Force.toFloat(_t41)); // _t42 = t38 - t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:195:11
_t43=(Force.toFloat(_t42)-Force.toFloat(_t39)); // _t43 = t42 - t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:195:16
_Next=15; // jump 15.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:195:16
}// end SubFn14
private inline  function SubFn15():Void {
_Next=_t7 ? 24 : 22; // if t7 goto 24.if.else else 22.if.then *ssa.If near /usr/local/go/src/pkg/math/expm1.go:195:16
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(1581);
_t44=(Force.toFloat(p_x)-Force.toFloat(0.6931471803691238)); // _t44 = x - 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:176:12
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:176:12
}// end SubFn16
private inline  function SubFn17():Void {
this.setPH(1585);
_t45=(Force.toFloat(p_x)+Force.toFloat(0.6931471803691238)); // _t45 = x + 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:180:12
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:180:12
}// end SubFn17
private inline  function SubFn18():Void {
var _t46:Float;
var _t47:Float;
this.setPH(1591);
_t46=(Force.toFloat(1.4426950408889634)*Force.toFloat(p_x)); // _t46 = 1442695040888963387/1000000000000000000:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:186:19
_t47=(Force.toFloat(_t46)+Force.toFloat(0.5)); // _t47 = t46 + 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:186:22
_t48={var _f:Float=_t47;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t48 = convert int <- float64 (t47) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:186:12
_Next=23; // jump 23.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:186:12
}// end SubFn18
private inline  function SubFn19():Void {
var _t51:Float;
this.setPH(1595);
_t50=_t49; // _t50 = convert float64 <- int (t49) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:190:16
this.setPH(1596);
_t51=(Force.toFloat(_t50)*Force.toFloat(0.6931471803691238)); // _t51 = t50 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:191:14
_t52=(Force.toFloat(p_x)-Force.toFloat(_t51)); // _t52 = x - t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:191:11
this.setPH(1597);
_t53=(Force.toFloat(_t50)*Force.toFloat(1.9082149292705877e-10)); // _t53 = t50 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:192:11
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:192:11
}// end SubFn19
private inline  function SubFn20():Void {
var _t54:Float;
var _t55:Float;
this.setPH(1593);
_t54=(Force.toFloat(1.4426950408889634)*Force.toFloat(p_x)); // _t54 = 1442695040888963387/1000000000000000000:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:188:19
_t55=(Force.toFloat(_t54)-Force.toFloat(0.5)); // _t55 = t54 - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:188:22
_t56={var _f:Float=_t55;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t56 = convert int <- float64 (t55) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:188:12
_Next=23; // jump 23.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:188:12
}// end SubFn20
private inline  function SubFn21():Void {
_Next=15; // jump 15.if.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:188:12
}// end SubFn21
private inline  function SubFn22():Void {
var _t57:Float;
var _t58:Float;
var _t61:Bool;
this.setPH(1614);
_t57=(Force.toFloat(_t34)-Force.toFloat(_t14)); // _t57 = t34 - t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:209:12
_t58=(Force.toFloat(_t13)*Force.toFloat(_t57)); // _t58 = t13 * t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:209:9
_t59=(Force.toFloat(_t58)-Force.toFloat(_t14)); // _t59 = t58 - t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:209:16
_t60=(Force.toFloat(_t59)-Force.toFloat(_t17)); // _t60 = t59 - t17 *ssa.BinOp near /usr/local/go/src/pkg/math/expm1.go:209:16
this.setPH(1617);
_t61=(_t15==(-1)); // _t61 = t15 == -1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:212:10
_Next=_t61 ? 29 : 31; // if t61 goto 29.switch.body else 31.switch.next *ssa.If near /usr/local/go/src/pkg/math/expm1.go:212:10
}// end SubFn22
private inline  function SubFn23():Void {
var _t62:Float;
var _t63:Float;
this.setPH(1641);
_t62=(Force.toFloat(_t13)*Force.toFloat(_t34)); // _t62 = t13 * t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:236:15
_t63=(Force.toFloat(_t62)-Force.toFloat(_t17)); // _t63 = t62 - t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:236:18
_t64=(Force.toFloat(_t13)-Force.toFloat(_t63)); // _t64 = t13 - t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:236:11
}// end SubFn23
private inline  function SubFn24():Void {
var _t65:Float;
var _t66:Float;
this.setPH(1618);
_t65=(Force.toFloat(_t13)-Force.toFloat(_t60)); // _t65 = t13 - t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:213:17
_t66=(Force.toFloat(0.5)*Force.toFloat(_t65)); // _t66 = 1/2:float64 * t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:213:14
_t67=(Force.toFloat(_t66)-Force.toFloat(0.5)); // _t67 = t66 - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:213:21
}// end SubFn24
private inline  function SubFn25():Void {
var _t68:Bool;
this.setPH(1620);
_t68=(Force.toFloat(_t13)<Force.toFloat((-0.25))); // _t68 = t13 < -1/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:215:9
_Next=_t68 ? 34 : 35; // if t68 goto 34.if.then else 35.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:215:9
}// end SubFn25
private inline  function SubFn26():Void {
var _t69:Bool;
this.setPH(1619);
_t69=(_t15==1); // _t69 = t15 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:214:10
_Next=_t69 ? 30 : 33; // if t69 goto 30.switch.body else 33.switch.next *ssa.If near /usr/local/go/src/pkg/math/expm1.go:214:10
}// end SubFn26
private inline  function SubFn27():Void {
var _t70:Float;
this.setPH(1625);
_t70=(Force.toFloat(_t60)-Force.toFloat(_t13)); // _t70 = t60 - t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:220:16
_t71=(Force.toFloat(1)-Force.toFloat(_t70)); // _t71 = 1:float64 - t70 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:220:11
}// end SubFn27
private inline  function SubFn28():Void {
var _t73:GOint64;
var _t74:GOint64;
this.setPH(1626);
_t73=GOint64.ofInt(_t15); // _t73 = convert uint64 <- int (t15) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:221:47
_t74=Force.toUint64(GOint64.shl(_t73,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t74 = t73 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:221:50
_t75=Force.toUint64(GOint64.add(_t72,_t74)); // _t75 = t72 + t74 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:221:39
}// end SubFn28
private inline  function SubFn29():Void {
this.setPH(1627);
_t77=(Force.toFloat(_t76)-Force.toFloat(1)); // _t77 = t76 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:222:13
}// end SubFn29
private inline  function SubFn30():Void {
var _t78:Bool;
this.setPH(1624);
_t78=(_t15<=(-2)); // _t78 = t15 <= -2:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:219:10
_Next=_t78 ? 38 : 37; // if t78 goto 38.binop.done else 37.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/expm1.go:219:10
}// end SubFn30
private inline  function SubFn31():Void {
var _t79:Float;
var _t80:Float;
this.setPH(1621);
_t79=(Force.toFloat(_t13)+Force.toFloat(0.5)); // _t79 = t13 + 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:216:25
_t80=(Force.toFloat(_t60)-Force.toFloat(_t79)); // _t80 = t60 - t79 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:216:20
_t81=(Force.toFloat((-2))*Force.toFloat(_t80)); // _t81 = -2:float64 * t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:216:15
}// end SubFn31
private inline  function SubFn32():Void {
var _t82:Float;
var _t83:Float;
this.setPH(1623);
_t82=(Force.toFloat(_t13)-Force.toFloat(_t60)); // _t82 = t13 - t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:218:19
_t83=(Force.toFloat(2)*Force.toFloat(_t82)); // _t83 = 2:float64 * t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:218:16
_t84=(Force.toFloat(1)+Force.toFloat(_t83)); // _t84 = 1:float64 + t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:218:13
}// end SubFn32
private inline  function SubFn33():Void {
var _t85:Bool;
this.setPH(1629);
_t85=(_t15<20); // _t85 = t15 < 20:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:224:8
_Next=_t85 ? 39 : 40; // if t85 goto 39.if.then else 40.if.done *ssa.If near /usr/local/go/src/pkg/math/expm1.go:224:8
}// end SubFn33
private inline  function SubFn34():Void {
this.setPH(1624);
_t86=(_t15>56); // _t86 = t15 > 56:int *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:219:21
_Next=38; // jump 38.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/expm1.go:219:21
}// end SubFn34
private inline  function SubFn35():Void {
_Next=_t87 ? 32 : 36; // if t87 goto 32.switch.body else 36.switch.next *ssa.If near /usr/local/go/src/pkg/math/expm1.go:219:21
}// end SubFn35
private inline  function SubFn36():Void {
var _t88:Int;
var _t89:GOint64;
this.setPH(1630);
_t88=_t15; // _t88 = convert uint <- int (t15) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:225:71
_t89=Force.toUint64(GOint64.ushr(GOint64.make(0x200000,0x0),_t88)); // _t89 = 9007199254740992:uint64 >> t88 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:225:64
_t90=Force.toUint64(GOint64.sub(GOint64.make(0x3ff00000,0x0),_t89)); // _t90 = 4607182418800017408:uint64 - t89 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:225:44
}// end SubFn36
private inline  function SubFn37():Void {
var _t92:Float;
this.setPH(1631);
_t92=(Force.toFloat(_t60)-Force.toFloat(_t13)); // _t92 = t60 - t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:226:16
_t93=(Force.toFloat(_t91)-Force.toFloat(_t92)); // _t93 = t91 - t92 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:226:11
}// end SubFn37
private inline  function SubFn38():Void {
var _t95:GOint64;
var _t96:GOint64;
this.setPH(1632);
_t95=GOint64.ofInt(_t15); // _t95 = convert uint64 <- int (t15) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:227:47
_t96=Force.toUint64(GOint64.shl(_t95,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t96 = t95 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:227:50
_t97=Force.toUint64(GOint64.add(_t94,_t96)); // _t97 = t94 + t96 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:227:39
}// end SubFn38
private inline  function SubFn39():Void {
var _t99:Int;
var _t100:Int;
this.setPH(1635);
_t99=(1023-_t15); // _t99 = 1023:int - t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:230:38
_t100=(_t99<<GOint64.toInt(GOint64.make(0x0,0x34))); // _t100 = t99 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:230:43
_t101=GOint64.ofInt(_t100); // _t101 = convert uint64 <- int (t100) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:230:30
}// end SubFn39
private inline  function SubFn40():Void {
var _t103:Float;
this.setPH(1636);
_t103=(Force.toFloat(_t60)+Force.toFloat(_t102)); // _t103 = t60 + t102 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:231:15
_t104=(Force.toFloat(_t13)-Force.toFloat(_t103)); // _t104 = t13 - t103 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:231:10
_t105=(Force.toFloat(_t104)+Force.toFloat(1)); // _t105 = t104 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/expm1.go:231:10
}// end SubFn40
private inline  function SubFn41():Void {
var _t107:GOint64;
var _t108:GOint64;
this.setPH(1638);
_t107=GOint64.ofInt(_t15); // _t107 = convert uint64 <- int (t15) *ssa.Convert @ /usr/local/go/src/pkg/math/expm1.go:233:46
_t108=Force.toUint64(GOint64.shl(_t107,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t108 = t107 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:233:49
_t109=Force.toUint64(GOint64.add(_t106,_t108)); // _t109 = t106 + t108 *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:233:38
}// end SubFn41
}
#if (!php) private #end class Go_math_modf extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/modf.go:15:6
var p_f:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float) {
super(gr,2324,"Go_math_modf");
this._bds=_bds;
this.p_f=p_f;
Scheduler.push(gr,this);
}
var _res:{r0:Float, r1:Float};
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:GOint64=null;
var _t3:GOint64=null;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Int=0;
var _t7:Bool=false;
var _t8:Float=0.0;
var _SF2:StackFrame;
var _t9:{r0:Float,r1:Float}=null;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Int=0;
var _t15:GOint64=null;
var _t16:GOint64=null;
var _t17:GOint64=null;
var _t18:GOint64=null;
var _SF3:StackFrame;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float) : {r0:Float, r1:Float} {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_modf(0,[], p_f).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float) : {r0:Float, r1:Float} {
var _sf=new Go_math_modf(_gr,[], p_f).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float) : Go_math_modf
{return new Go_math_modf(gr,_bds, p_f);
}
public function run():Go_math_modf {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2324,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(2324,1);
this.SubFn1();
_Phi=1;
case 2: // if.done
this.setLatest(2324,2);
this.setPH(2333);
_SF1=Go_math_Float64bits.call(this._goroutine,[],p_f);
_Next = -1;
return this;
case -1:
this.setLatest(2333,-1);
_t2=_SF1.res();
 // _t2 = Float64bits(f) *ssa.Call @ /usr/local/go/src/pkg/math/modf.go:24:18
this.SubFn2();
_Phi=2;
case 3: // if.then
this.setLatest(2333,3);
this.SubFn3();
this.setPH(2327);
_SF2=Go_math_modf.call(this._goroutine,[],_t8);
_Next = -2;
return this;
case -2:
this.setLatest(2327,-2);
_t9=_SF2.res();
 // _t9 = Modf(t8) *ssa.Call @ /usr/local/go/src/pkg/math/modf.go:18:20
this.SubFn4();
this.setPH(2328);
_res= {r0:_t12,r1:_t13};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t12, t13 *ssa.Return @ /usr/local/go/src/pkg/math/modf.go:19:4

case 4: // if.done
this.setLatest(2328,4);
this.setPH(2330);
_res= {r0:0,r1:p_f};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64, f *ssa.Return @ /usr/local/go/src/pkg/math/modf.go:21:3

case 5: // if.then
this.setLatest(2330,5);
this.SubFn5();
_Phi=5;
case 6: // if.done
this.setLatest(2330,6);
this.setPH(2333);
_t18=((_Phi==2)?_t2:(_Phi==5)?_t17:GOint64.make(0,0)); // _t18 = phi [2.if.done: t2, 5.if.then: t17] #x *ssa.Phi @ /usr/local/go/src/pkg/math/modf.go:24:2
this.setPH(2340);
_SF3=Go_math_Float64frombits.call(this._goroutine,[],_t18);
_Next = -3;
return this;
case -3:
this.setLatest(2340,-3);
_t19=_SF3.res();
 // _t19 = Float64frombits(t18) *ssa.Call @ /usr/local/go/src/pkg/math/modf.go:31:23
this.SubFn6();
this.setPH(2342);
_res= {r0:_t19,r1:_t20};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19, t20 *ssa.Return @ /usr/local/go/src/pkg/math/modf.go:33:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2325);
_t0=(Force.toFloat(p_f)<Force.toFloat(1)); // _t0 = f < 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:16:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/modf.go:16:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(2326);
_t1=(Force.toFloat(p_f)<Force.toFloat(0)); // _t1 = f < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:17:8
_Next=_t1 ? 3 : 4; // if t1 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/modf.go:17:8
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:GOint64;
var _t4:Int;
var _t5:Int;
var _t7:Bool;
this.setPH(2334);
_t3=Force.toUint64(GOint64.ushr(_t2,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t3 = t2 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:25:13
_t4=GOint64.toInt(_t3); // _t4 = convert uint <- uint64 (t3) *ssa.Convert @ /usr/local/go/src/pkg/math/modf.go:25:11
_t5=(_t4&2047); // _t5 = t4 & 2047:uint *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:25:21
_t6=(_t5-1023); // _t6 = t5 - 1023:uint *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:25:27
this.setPH(2337);
_t7=(Force.uintCompare(_t6,52)<0); // _t7 = t6 < 52:uint *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:28:7
_Next=_t7 ? 5 : 6; // if t7 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/modf.go:28:7
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(2327);
_t8=(-Force.toFloat(p_f)); // _t8 = -f *ssa.UnOp @ /usr/local/go/src/pkg/math/modf.go:18:21
}// end SubFn3
private inline  function SubFn4():Void {
_t10=_t9.r0; // _t10 = extract t9 #0 *ssa.Extract near /usr/local/go/src/pkg/math/modf.go:18:21
_t11=_t9.r1; // _t11 = extract t9 #1 *ssa.Extract near /usr/local/go/src/pkg/math/modf.go:18:21
this.setPH(2328);
_t12=(-Force.toFloat(_t10)); // _t12 = -t10 *ssa.UnOp @ /usr/local/go/src/pkg/math/modf.go:19:11
_t13=(-Force.toFloat(_t11)); // _t13 = -t11 *ssa.UnOp @ /usr/local/go/src/pkg/math/modf.go:19:17
}// end SubFn4
private inline  function SubFn5():Void {
var _t14:Int;
var _t15:GOint64;
var _t16:GOint64;
this.setPH(2338);
_t14=(52-_t6); // _t14 = 52:uint - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:29:18
_t15=Force.toUint64(GOint64.shl(GOint64.make(0x0,0x1),_t14)); // _t15 = 1:uint64 << t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:29:10
_t16=Force.toUint64(GOint64.sub(_t15,GOint64.make(0x0,0x1))); // _t16 = t15 - 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:29:22
_t17=Force.toUint64(GOint64.and(_t2,GOint64.xor(_t16,GOint64.make(-1,-1)))); // _t17 = t2 &^ t16 *ssa.BinOp near /usr/local/go/src/pkg/math/modf.go:29:22
_Next=6; // jump 6.if.done *ssa.Jump near /usr/local/go/src/pkg/math/modf.go:29:22
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(2341);
_t20=(Force.toFloat(p_f)-Force.toFloat(_t19)); // _t20 = f - t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/modf.go:32:11
}// end SubFn6
}
#if js @:expose("Go_math_Atanh") #end class Go_math_Atanh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/atanh.go:47:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,322,"Go_math_Atanh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Float=0.0;
var _t3:Bool=false;
var _SF3:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Bool=false;
var _SF4:StackFrame;
var _t7:Float=0.0;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Bool=false;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _SF5:StackFrame;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _SF6:StackFrame;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Atanh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Atanh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Atanh
{return new Go_math_Atanh(gr,_bds, p_x);
}
public function run():Go_math_Atanh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(322,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(322,1);
this.setPH(327);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:52:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/atanh.go:52:3

case 2: // switch.body
this.setLatest(327,2);
this.setPH(329);
_t2=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t2 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:54:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/atanh.go:54:3

case 3: // switch.next
this.setLatest(329,3);
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(329,4);
this.setPH(326);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(326,-3);
_t4=_SF3.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:51:31
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(326,5);
_t5=((_Phi==0)?true:(_Phi==6)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 6.cond.false: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/atanh.go:51:23
this.SubFn3();
_Phi=5;
case 6: // cond.false
this.setLatest(326,6);
this.SubFn4();
_Phi=6;
case 7: // switch.body
this.setLatest(326,7);
this.setPH(331);
_t7=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t7 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:56:13
_res= _t7;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t7 *ssa.Return @ /usr/local/go/src/pkg/math/atanh.go:56:3

case 8: // switch.next
this.setLatest(331,8);
this.SubFn5();
_Phi=8;
case 9: // switch.next
this.setLatest(331,9);
this.SubFn6();
_Phi=9;
case 10: // if.then
this.setLatest(331,10);
this.SubFn7();
_Phi=10;
case 11: // if.done
this.setLatest(331,11);
this.setPH(322);
_t11=((_Phi==9)?p_x:(_Phi==10)?_t10:0.0); // _t11 = phi [9.switch.next: x, 10.if.then: t10] #x *ssa.Phi @ /usr/local/go/src/pkg/math/atanh.go:47:12
this.setPH(333);
_t12=((_Phi==9)?false:(_Phi==10)?true:false); // _t12 = phi [9.switch.next: false:bool, 10.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/atanh.go:58:2
this.SubFn8();
_Phi=11;
case 12: // switch.done
this.setLatest(333,12);
this.setPH(338);
_t14=((_Phi==13)?_t11:(_Phi==14)?_t21:(_Phi==16)?_t27:0.0); // _t14 = phi [13.switch.body: t11, 14.switch.body: t21, 16.switch.next: t27] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/atanh.go:63:6
this.SubFn9();
_Phi=12;
case 13: // switch.body
this.setLatest(338,13);
this.SubFn10();
_Phi=13;
case 14: // switch.body
this.setLatest(338,14);
this.SubFn11();
this.setPH(344);
_SF5=Go_math_log1p.call(this._goroutine,[],_t19);
_Next = -5;
return this;
case -5:
this.setLatest(344,-5);
_t20=_SF5.res();
 // _t20 = Log1p(t19) *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:69:21
this.SubFn12();
_Phi=14;
case 15: // switch.next
this.setLatest(344,15);
this.SubFn13();
_Phi=15;
case 16: // switch.next
this.setLatest(344,16);
this.SubFn14();
this.setPH(346);
_SF6=Go_math_log1p.call(this._goroutine,[],_t25);
_Next = -6;
return this;
case -6:
this.setLatest(346,-6);
_t26=_SF6.res();
 // _t26 = Log1p(t25) *ssa.Call @ /usr/local/go/src/pkg/math/atanh.go:71:21
this.SubFn15();
_Phi=16;
case 17: // if.then
this.setLatest(346,17);
this.SubFn16();
_Phi=17;
case 18: // if.done
this.setLatest(346,18);
this.setPH(338);
_t29=((_Phi==12)?_t14:(_Phi==17)?_t28:0.0); // _t29 = phi [12.switch.done: t14, 17.if.then: t28] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/atanh.go:63:6
this.setPH(351);
_res= _t29;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t29 *ssa.Return @ /usr/local/go/src/pkg/math/atanh.go:76:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(326);
_t0=(Force.toFloat(p_x)<Force.toFloat((-1))); // _t0 = x < -1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:51:9
_Next=_t0 ? 5 : 6; // if t0 goto 5.binop.done else 6.cond.false *ssa.If near /usr/local/go/src/pkg/math/atanh.go:51:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Bool;
this.setPH(328);
_t3=(Force.toFloat(p_x)==Force.toFloat(1)); // _t3 = x == 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:53:9
_Next=_t3 ? 2 : 8; // if t3 goto 2.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/atanh.go:53:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:53:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/atanh.go:53:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(326);
_t6=(Force.toFloat(p_x)>Force.toFloat(1)); // _t6 = x > 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:51:19
_Next=_t6 ? 5 : 4; // if t6 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/atanh.go:51:19
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(330);
_t8=(Force.toFloat(p_x)==Force.toFloat((-1))); // _t8 = x == -1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:55:9
_Next=_t8 ? 7 : 9; // if t8 goto 7.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/math/atanh.go:55:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Bool;
this.setPH(334);
_t9=(Force.toFloat(p_x)<Force.toFloat(0)); // _t9 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:59:7
_Next=_t9 ? 10 : 11; // if t9 goto 10.if.then else 11.if.done *ssa.If near /usr/local/go/src/pkg/math/atanh.go:59:7
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(335);
_t10=(-Force.toFloat(p_x)); // _t10 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/atanh.go:60:7
_Next=11; // jump 11.if.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:60:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t13:Bool;
this.setPH(340);
_t13=(Force.toFloat(_t11)<Force.toFloat(3.725290298461914e-09)); // _t13 = t11 < 1/268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:65:9
_Next=_t13 ? 13 : 15; // if t13 goto 13.switch.body else 15.switch.next *ssa.If near /usr/local/go/src/pkg/math/atanh.go:65:9
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t12 ? 17 : 18; // if t12 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/atanh.go:65:9
}// end SubFn9
private inline  function SubFn10():Void {
_Next=12; // jump 12.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:65:9
}// end SubFn10
private inline  function SubFn11():Void {
var _t16:Float;
var _t17:Float;
var _t18:Float;
this.setPH(343);
_t15=(Force.toFloat(_t11)+Force.toFloat(_t11)); // _t15 = t11 + t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:68:12
this.setPH(344);
_t16=(Force.toFloat(_t15)*Force.toFloat(_t11)); // _t16 = t15 * t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:69:31
_t17=(Force.toFloat(1)-Force.toFloat(_t11)); // _t17 = 1:float64 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:69:36
_t18=Force.floatDiv(Force.toFloat(_t16),Force.toFloat(_t17)); // _t18 = t16 / t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:69:33
_t19=(Force.toFloat(_t15)+Force.toFloat(_t18)); // _t19 = t15 + t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:69:26
}// end SubFn11
private inline  function SubFn12():Void {
_t21=(Force.toFloat(0.5)*Force.toFloat(_t20)); // _t21 = 1/2:float64 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:69:14
_Next=12; // jump 12.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:69:14
}// end SubFn12
private inline  function SubFn13():Void {
var _t22:Bool;
this.setPH(342);
_t22=(Force.toFloat(_t11)<Force.toFloat(0.5)); // _t22 = t11 < 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:67:9
_Next=_t22 ? 14 : 16; // if t22 goto 14.switch.body else 16.switch.next *ssa.If near /usr/local/go/src/pkg/math/atanh.go:67:9
}// end SubFn13
private inline  function SubFn14():Void {
var _t23:Float;
var _t24:Float;
this.setPH(346);
_t23=(Force.toFloat(_t11)+Force.toFloat(_t11)); // _t23 = t11 + t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:71:24
_t24=(Force.toFloat(1)-Force.toFloat(_t11)); // _t24 = 1:float64 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:71:30
_t25=Force.floatDiv(Force.toFloat(_t23),Force.toFloat(_t24)); // _t25 = t23 / t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:71:27
}// end SubFn14
private inline  function SubFn15():Void {
_t27=(Force.toFloat(0.5)*Force.toFloat(_t26)); // _t27 = 1/2:float64 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/atanh.go:71:14
_Next=12; // jump 12.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:71:14
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(349);
_t28=(-Force.toFloat(_t14)); // _t28 = -t14 *ssa.UnOp @ /usr/local/go/src/pkg/math/atanh.go:74:10
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:74:10
}// end SubFn16
}
#if (!php) private #end class Go_haxegoruntime_init extends StackFrameBasis implements StackFrame { 
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,349,"Go_haxegoruntime_init");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _SF2:StackFrame;
var _SF3:StackFrame;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_init(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_haxegoruntime_init(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_haxegoruntime_init
{return new Go_haxegoruntime_init(gr,_bds);
}
public function run():Go_haxegoruntime_init {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(349,0);
this.SubFn0();

case 1: // init.start
this.setLatest(349,1);
this.SubFn1();
Go_utf16_init.call(this._goroutine,[]);
_Next = -1;
return this;
case -1:
this.setLatest(349,-1);
 // _t1 = unicode/utf16.init() *ssa.Call near /usr/local/go/src/pkg/math/atanh.go:74:10 [REGISTER VALUE UN-USED]
Go_utf8_init.call(this._goroutine,[]);
_Next = -2;
return this;
case -2:
this.setLatest(349,-2);
 // _t2 = unicode/utf8.init() *ssa.Call near /usr/local/go/src/pkg/math/atanh.go:74:10 [REGISTER VALUE UN-USED]
Go_haxegoruntime_init_36_1.call(this._goroutine,[]);
_Next = -3;
return this;
case -3:
this.setLatest(349,-3);
 // _t3 = init$1() *ssa.Call near /usr/local/go/src/pkg/math/atanh.go:74:10 [REGISTER VALUE UN-USED]
this.SubFn2();

case 2: // init.done
this.setLatest(349,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/atanh.go:74:10

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=Go.haxegoruntime_init_36_guard.load(); // _t0 = *init$guard *ssa.UnOp near /usr/local/go/src/pkg/math/atanh.go:74:10
_Next=_t0 ? 2 : 1; // if t0 goto 2.init.done else 1.init.start *ssa.If near /usr/local/go/src/pkg/math/atanh.go:74:10
}// end SubFn0
private inline  function SubFn1():Void {
Go.haxegoruntime_init_36_guard.store(true); // *init$guard = true:bool *ssa.Store near /usr/local/go/src/pkg/math/atanh.go:74:10
}// end SubFn1
private inline  function SubFn2():Void {
_Next=2; // jump 2.init.done *ssa.Jump near /usr/local/go/src/pkg/math/atanh.go:74:10
}// end SubFn2
}
#if js @:expose("Go_math_Lgamma") #end class Go_math_Lgamma extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/lgamma.go:174:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4105,"Go_math_Lgamma");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:{r0:Float, r1:Int};
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _SF3:StackFrame;
var _t2:Float=0.0;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Int=0;
var _SF4:StackFrame;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Int=0;
var _t14:Float=0.0;
var _t15:Bool=false;
var _SF5:StackFrame;
var _t16:Float=0.0;
var _SF6:StackFrame;
var _t17:Float=0.0;
var _t18:Bool=false;
var _SF7:StackFrame;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _SF8:StackFrame;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _SF9:StackFrame;
var _t23:Float=0.0;
var _t24:Bool=false;
var _t25:Float=0.0;
var _t26:Bool=false;
var _t27:Bool=false;
var _t28:Bool=false;
var _t29:Bool=false;
var _t30:Int=0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Array<Float>=null;
var _t40:Float=0.0;
var _t41:Array<Float>=null;
var _t42:Float=0.0;
var _t43:Array<Float>=null;
var _t44:Float=0.0;
var _t45:Array<Float>=null;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Array<Float>=null;
var _t61:Float=0.0;
var _t62:Array<Float>=null;
var _t63:Float=0.0;
var _t64:Array<Float>=null;
var _t65:Float=0.0;
var _t66:Array<Float>=null;
var _t67:Float=0.0;
var _t68:Array<Float>=null;
var _t69:Float=0.0;
var _t70:Array<Float>=null;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Float=0.0;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Float=0.0;
var _t87:Bool=false;
var _t88:Bool=false;
var _SF10:StackFrame;
var _t89:Float=0.0;
var _t90:Float=0.0;
var _t91:Bool=false;
var _t92:Float=0.0;
var _t93:Float=0.0;
var _t94:Int=0;
var _t95:Bool=false;
var _t96:Bool=false;
var _t97:Float=0.0;
var _t98:Float=0.0;
var _t99:Bool=false;
var _t100:Float=0.0;
var _t101:Float=0.0;
var _t102:Bool=false;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Array<Float>=null;
var _t106:Float=0.0;
var _t107:Array<Float>=null;
var _t108:Float=0.0;
var _t109:Array<Float>=null;
var _t110:Float=0.0;
var _t111:Array<Float>=null;
var _t112:Float=0.0;
var _t113:Array<Float>=null;
var _t114:Float=0.0;
var _t115:Array<Float>=null;
var _t116:Float=0.0;
var _t117:Float=0.0;
var _t118:Float=0.0;
var _t119:Float=0.0;
var _t120:Float=0.0;
var _t121:Float=0.0;
var _t122:Float=0.0;
var _t123:Float=0.0;
var _t124:Float=0.0;
var _t125:Float=0.0;
var _t126:Float=0.0;
var _t127:Array<Float>=null;
var _t128:Float=0.0;
var _t129:Array<Float>=null;
var _t130:Float=0.0;
var _t131:Array<Float>=null;
var _t132:Float=0.0;
var _t133:Array<Float>=null;
var _t134:Float=0.0;
var _t135:Array<Float>=null;
var _t136:Float=0.0;
var _t137:Array<Float>=null;
var _t138:Float=0.0;
var _t139:Float=0.0;
var _t140:Float=0.0;
var _t141:Float=0.0;
var _t142:Float=0.0;
var _t143:Float=0.0;
var _t144:Float=0.0;
var _t145:Float=0.0;
var _t146:Float=0.0;
var _t147:Float=0.0;
var _t148:Float=0.0;
var _t149:Float=0.0;
var _t150:Float=0.0;
var _t151:Float=0.0;
var _t152:Float=0.0;
var _t153:Float=0.0;
var _t154:Float=0.0;
var _t155:Float=0.0;
var _t156:Float=0.0;
var _t157:Array<Float>=null;
var _t158:Float=0.0;
var _t159:Array<Float>=null;
var _t160:Float=0.0;
var _t161:Array<Float>=null;
var _t162:Float=0.0;
var _t163:Array<Float>=null;
var _t164:Float=0.0;
var _t165:Array<Float>=null;
var _t166:Float=0.0;
var _t167:Float=0.0;
var _t168:Float=0.0;
var _t169:Float=0.0;
var _t170:Float=0.0;
var _t171:Float=0.0;
var _t172:Float=0.0;
var _t173:Float=0.0;
var _t174:Float=0.0;
var _t175:Array<Float>=null;
var _t176:Float=0.0;
var _t177:Array<Float>=null;
var _t178:Float=0.0;
var _t179:Array<Float>=null;
var _t180:Float=0.0;
var _t181:Array<Float>=null;
var _t182:Float=0.0;
var _t183:Array<Float>=null;
var _t184:Float=0.0;
var _t185:Float=0.0;
var _t186:Float=0.0;
var _t187:Float=0.0;
var _t188:Float=0.0;
var _t189:Float=0.0;
var _t190:Float=0.0;
var _t191:Float=0.0;
var _t192:Float=0.0;
var _t193:Array<Float>=null;
var _t194:Float=0.0;
var _t195:Array<Float>=null;
var _t196:Float=0.0;
var _t197:Array<Float>=null;
var _t198:Float=0.0;
var _t199:Array<Float>=null;
var _t200:Float=0.0;
var _t201:Array<Float>=null;
var _t202:Float=0.0;
var _t203:Float=0.0;
var _t204:Float=0.0;
var _t205:Float=0.0;
var _t206:Float=0.0;
var _t207:Float=0.0;
var _t208:Float=0.0;
var _t209:Float=0.0;
var _t210:Float=0.0;
var _t211:Float=0.0;
var _t212:Float=0.0;
var _t213:Float=0.0;
var _t214:Float=0.0;
var _t215:Float=0.0;
var _t216:Float=0.0;
var _t217:Float=0.0;
var _t218:Float=0.0;
var _t219:Bool=false;
var _t220:Array<Float>=null;
var _t221:Float=0.0;
var _t222:Array<Float>=null;
var _t223:Float=0.0;
var _t224:Array<Float>=null;
var _t225:Float=0.0;
var _t226:Array<Float>=null;
var _t227:Float=0.0;
var _t228:Array<Float>=null;
var _t229:Float=0.0;
var _t230:Array<Float>=null;
var _t231:Float=0.0;
var _t232:Float=0.0;
var _t233:Float=0.0;
var _t234:Float=0.0;
var _t235:Float=0.0;
var _t236:Float=0.0;
var _t237:Float=0.0;
var _t238:Float=0.0;
var _t239:Float=0.0;
var _t240:Float=0.0;
var _t241:Float=0.0;
var _t242:Float=0.0;
var _t243:Array<Float>=null;
var _t244:Float=0.0;
var _t245:Array<Float>=null;
var _t246:Float=0.0;
var _t247:Array<Float>=null;
var _t248:Float=0.0;
var _t249:Array<Float>=null;
var _t250:Float=0.0;
var _t251:Array<Float>=null;
var _t252:Float=0.0;
var _t253:Float=0.0;
var _t254:Float=0.0;
var _t255:Float=0.0;
var _t256:Float=0.0;
var _t257:Float=0.0;
var _t258:Float=0.0;
var _t259:Float=0.0;
var _t260:Float=0.0;
var _t261:Float=0.0;
var _t262:Float=0.0;
var _t263:Float=0.0;
var _t264:Float=0.0;
var _t265:Float=0.0;
var _t266:Float=0.0;
var _t267:Bool=false;
var _SF11:StackFrame;
var _t268:Float=0.0;
var _t269:Float=0.0;
var _t270:Float=0.0;
var _t271:Array<Float>=null;
var _t272:Float=0.0;
var _t273:Array<Float>=null;
var _t274:Float=0.0;
var _t275:Array<Float>=null;
var _t276:Float=0.0;
var _t277:Array<Float>=null;
var _t278:Float=0.0;
var _t279:Array<Float>=null;
var _t280:Float=0.0;
var _t281:Array<Float>=null;
var _t282:Float=0.0;
var _t283:Array<Float>=null;
var _t284:Float=0.0;
var _t285:Float=0.0;
var _t286:Float=0.0;
var _t287:Float=0.0;
var _t288:Float=0.0;
var _t289:Float=0.0;
var _t290:Float=0.0;
var _t291:Float=0.0;
var _t292:Float=0.0;
var _t293:Float=0.0;
var _t294:Float=0.0;
var _t295:Float=0.0;
var _t296:Float=0.0;
var _t297:Float=0.0;
var _t298:Float=0.0;
var _t299:Float=0.0;
var _t300:Float=0.0;
var _t301:Bool=false;
var _t302:Float=0.0;
var _t303:Float=0.0;
var _t304:Float=0.0;
var _t305:Float=0.0;
var _t306:Float=0.0;
var _t307:Bool=false;
var _t308:Float=0.0;
var _t309:Float=0.0;
var _t310:Float=0.0;
var _t311:Bool=false;
var _t312:Float=0.0;
var _t313:Float=0.0;
var _t314:Float=0.0;
var _t315:Bool=false;
var _t316:Float=0.0;
var _t317:Float=0.0;
var _t318:Float=0.0;
var _SF12:StackFrame;
var _t319:Float=0.0;
var _t320:Float=0.0;
var _t321:Bool=false;
var _SF13:StackFrame;
var _t322:Float=0.0;
var _t323:Float=0.0;
var _t324:Float=0.0;
var _t325:Float=0.0;
var _t326:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : {r0:Float, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Lgamma(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : {r0:Float, r1:Int} {
var _sf=new Go_math_Lgamma(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Lgamma
{return new Go_math_Lgamma(gr,_bds, p_x);
}
public function run():Go_math_Lgamma {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4105,0);
this.setPH(4120);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(4120,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:189:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(4120,1);
this.setPH(4122);
_res= {r0:p_x,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x, 1:int *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:191:3

case 2: // switch.body
this.setLatest(4122,2);
this.setPH(4125);
_res= {r0:p_x,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x, 1:int *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:194:3

case 3: // switch.next
this.setLatest(4125,3);
this.setPH(4123);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(4123,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:192:12
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(4123,4);
this.setPH(4127);
_t2=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t2 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:196:15
this.setPH(4128);
_res= {r0:_t2,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2, 1:int *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:197:3

case 5: // switch.next
this.setLatest(4128,5);
this.SubFn2();
_Phi=5;
case 6: // switch.next
this.setLatest(4128,6);
this.SubFn3();
_Phi=6;
case 7: // if.then
this.setLatest(4128,7);
this.SubFn4();
_Phi=7;
case 8: // if.done
this.setLatest(4128,8);
this.setPH(4105);
_t6=((_Phi==6)?p_x:(_Phi==7)?_t5:0.0); // _t6 = phi [6.switch.next: x, 7.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:13
this.setPH(4131);
_t7=((_Phi==6)?false:(_Phi==7)?true:false); // _t7 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #neg *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:200:2
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(4131,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(4131,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(4131,11);
this.SubFn8();
_Phi=11;
case 12: // if.done
this.setLatest(4131,12);
this.setPH(4105);
_t9=((_Phi==9)?1:(_Phi==11)?(-1):0); // _t9 = phi [9.if.then: 1:int, 11.if.then: -1:int] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:41
this.setPH(4141);
_t10=Math.log(_t6); // _t10 = Log(t6) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:210:16
this.SubFn9();
this.setPH(4142);
_res= {r0:_t11,r1:_t9};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t11, t9 *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:211:3

case 13: // if.then
this.setLatest(4142,13);
this.SubFn10();
_Phi=13;
case 14: // if.done
this.setLatest(4142,14);
this.setPH(4105);
_t13=((_Phi==10)?1:(_Phi==18)?1:(_Phi==19)?(-1):0); // _t13 = phi [10.if.done: 1:int, 18.if.done: 1:int, 19.if.then: -1:int] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:41
this.setPH(4144);
_t14=((_Phi==10)?0:(_Phi==18)?_t23:(_Phi==19)?_t23:0.0); // _t14 = phi [10.if.done: 0:float64, 18.if.done: t23, 19.if.then: t23] #nadj *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:213:6
this.SubFn11();
_Phi=14;
case 15: // if.then
this.setLatest(4144,15);
this.setPH(4147);
_t16=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t16 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:216:16
this.setPH(4148);
_res= {r0:_t16,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t16, 1:int *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:217:4

case 16: // if.done
this.setLatest(4148,16);
this.setPH(4150);
_SF6=Go_math_sinPi.call(this._goroutine,[],_t6);
_Next = -6;
return this;
case -6:
this.setLatest(4150,-6);
_t17=_SF6.res();
 // _t17 = sinPi(t6) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:219:13
this.SubFn12();
_Phi=16;
case 17: // if.then
this.setLatest(4150,17);
this.setPH(4152);
_t19=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t19 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:221:16
this.setPH(4153);
_res= {r0:_t19,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19, 1:int *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:222:4

case 18: // if.done
this.setLatest(4153,18);
this.SubFn13();
this.setPH(4155);
_t21=Math.abs(_t20); // _t21 = Abs(t20) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:224:22
this.SubFn14();
_t23=Math.log(_t22); // _t23 = Log(t22) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:224:13
this.SubFn15();
_Phi=18;
case 19: // if.then
this.setLatest(4155,19);
this.SubFn16();
_Phi=19;
case 20: // switch.done
this.setLatest(4155,20);
this.setPH(4105);
_t25=((_Phi==39)?_t154:(_Phi==53)?_t320:(_Phi==44)?_t300:(_Phi==55)?_t324:(_Phi==40)?_t218:(_Phi==42)?_t266:(_Phi==43)?_t92:(_Phi==54)?_t86:0.0); // _t25 = phi [39.switch.body: t154, 53.switch.body: t320, 44.switch.body: t300, 55.switch.next: t324, 40.switch.body: t218, 42.switch.body: t266, 43.switch.next: t92, 54.switch.next: t86] #lgamma *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:25
this.SubFn17();
_Phi=20;
case 21: // switch.body
this.setLatest(4105,21);
this.setPH(4164);
_res= {r0:0,r1:_t13};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64, t13 *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:233:3

case 22: // switch.body
this.setLatest(4164,22);
this.SubFn18();
_Phi=22;
case 23: // switch.next
this.setLatest(4164,23);
this.SubFn19();
_Phi=23;
case 24: // binop.rhs
this.setLatest(4164,24);
this.SubFn20();
_Phi=24;
case 25: // binop.done
this.setLatest(4164,25);
this.setPH(4162);
_t29=((_Phi==14)?true:(_Phi==24)?_t28:false); // _t29 = phi [14.if.done: true:bool, 24.binop.rhs: t28] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:231:14
this.SubFn21();
_Phi=25;
case 26: // switch.body
this.setLatest(4162,26);
this.SubFn22();
_Phi=26;
case 27: // switch.next
this.setLatest(4162,27);
this.SubFn23();
_Phi=27;
case 28: // if.then
this.setLatest(4162,28);
this.setPH(4169);
_t89=Math.log(_t6); // _t89 = Log(t6) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:238:17
this.SubFn24();
_Phi=28;
case 29: // if.done
this.setLatest(4169,29);
this.setPH(4105);
_t92=((_Phi==31)?_t90:(_Phi==35)?0:(_Phi==32)?_t90:(_Phi==34)?_t90:(_Phi==36)?0:(_Phi==38)?0:0.0); // _t92 = phi [31.switch.body: t90, 35.switch.body: 0:float64, 32.switch.body: t90, 34.switch.next: t90, 36.switch.body: 0:float64, 38.switch.next: 0:float64] #lgamma *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:25
this.setPH(4166);
_t93=((_Phi==31)?_t97:(_Phi==35)?_t100:(_Phi==32)?_t98:(_Phi==34)?_t6:(_Phi==36)?_t101:(_Phi==38)?_t103:0.0); // _t93 = phi [31.switch.body: t97, 35.switch.body: t100, 32.switch.body: t98, 34.switch.next: t6, 36.switch.body: t101, 38.switch.next: t103] #y *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:235:7
this.setPH(4167);
_t94=((_Phi==31)?0:(_Phi==35)?0:(_Phi==32)?1:(_Phi==34)?2:(_Phi==36)?1:(_Phi==38)?2:0); // _t94 = phi [31.switch.body: 0:int, 35.switch.body: 0:int, 32.switch.body: 1:int, 34.switch.next: 2:int, 36.switch.body: 1:int, 38.switch.next: 2:int] #i *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:236:7
this.SubFn25();
_Phi=29;
case 30: // if.else
this.setLatest(4167,30);
this.SubFn26();
_Phi=30;
case 31: // switch.body
this.setLatest(4167,31);
this.SubFn27();
_Phi=31;
case 32: // switch.body
this.setLatest(4167,32);
this.SubFn28();
_Phi=32;
case 33: // switch.next
this.setLatest(4167,33);
this.SubFn29();
_Phi=33;
case 34: // switch.next
this.setLatest(4167,34);
this.SubFn30();
_Phi=34;
case 35: // switch.body
this.setLatest(4167,35);
this.SubFn31();
_Phi=35;
case 36: // switch.body
this.setLatest(4167,36);
this.SubFn32();
_Phi=36;
case 37: // switch.next
this.setLatest(4167,37);
this.SubFn33();
_Phi=37;
case 38: // switch.next
this.setLatest(4167,38);
this.SubFn34();
_Phi=38;
case 39: // switch.body
this.setLatest(4167,39);
this.SubFn35();
_Phi=39;
case 40: // switch.body
this.setLatest(4167,40);
this.SubFn36();
_Phi=40;
case 41: // switch.next
this.setLatest(4167,41);
this.SubFn37();
_Phi=41;
case 42: // switch.body
this.setLatest(4167,42);
this.SubFn38();
_Phi=42;
case 43: // switch.next
this.setLatest(4167,43);
this.SubFn39();
_Phi=43;
case 44: // switch.body
this.setLatest(4167,44);
this.setPH(4240);
_t268=Math.log(_t6); // _t268 = Log(t6) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:309:11
this.SubFn40();
_Phi=44;
case 45: // switch.next
this.setLatest(4240,45);
this.SubFn41();
_Phi=45;
case 46: // switch.body
this.setLatest(4240,46);
this.SubFn42();
_Phi=46;
case 47: // switch.body
this.setLatest(4240,47);
this.setPH(4221);
_t304=((_Phi==46)?_t303:(_Phi==48)?1:0.0); // _t304 = phi [46.switch.body: t303, 48.switch.next: 1:float64] #z *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:290:3
this.SubFn43();
_Phi=47;
case 48: // switch.next
this.setLatest(4221,48);
this.SubFn44();
_Phi=48;
case 49: // switch.body
this.setLatest(4221,49);
_t308=((_Phi==47)?_t306:(_Phi==50)?1:0.0); // _t308 = phi [47.switch.body: t306, 50.switch.next: 1:float64] #z *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:290:3
this.SubFn45();
_Phi=49;
case 50: // switch.next
this.setLatest(4221,50);
this.SubFn46();
_Phi=50;
case 51: // switch.body
this.setLatest(4221,51);
_t312=((_Phi==49)?_t310:(_Phi==52)?1:0.0); // _t312 = phi [49.switch.body: t310, 52.switch.next: 1:float64] #z *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:290:3
this.SubFn47();
_Phi=51;
case 52: // switch.next
this.setLatest(4221,52);
this.SubFn48();
_Phi=52;
case 53: // switch.body
this.setLatest(4221,53);
_t316=((_Phi==51)?_t314:(_Phi==54)?1:0.0); // _t316 = phi [51.switch.body: t314, 54.switch.next: 1:float64] #z *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:290:3
this.SubFn49();
this.setPH(4237);
_t319=Math.log(_t318); // _t319 = Log(t318) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:306:17
this.SubFn50();
_Phi=53;
case 54: // switch.next
this.setLatest(4237,54);
this.SubFn51();
_Phi=54;
case 55: // switch.next
this.setLatest(4237,55);
this.setPH(4246);
_t322=Math.log(_t6); // _t322 = Log(t6) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:315:20
this.SubFn52();
_Phi=55;
case 56: // if.then
this.setLatest(4246,56);
this.SubFn53();
_Phi=56;
case 57: // if.done
this.setLatest(4246,57);
this.setPH(4105);
_t326=((_Phi==20)?_t25:(_Phi==56)?_t325:0.0); // _t326 = phi [20.switch.done: t25, 56.if.then: t325] #lgamma *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:174:25
this.setPH(4251);
_res= {r0:_t326,r1:_t13};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t326, t13 *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:320:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:320:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 5; // if t1 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:320:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
this.setPH(4126);
_t3=(Force.toFloat(p_x)==Force.toFloat(0)); // _t3 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:195:9
_Next=_t3 ? 4 : 6; // if t3 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:195:9
}// end SubFn2
private inline  function SubFn3():Void {
var _t4:Bool;
this.setPH(4132);
_t4=(Force.toFloat(p_x)<Force.toFloat(0)); // _t4 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:201:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:201:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(4133);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:202:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:202:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(4137);
_t8=(Force.toFloat(_t6)<Force.toFloat(8.470329472543003e-22)); // _t8 = t6 < 1/1180591620717411303424:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:206:7
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:206:7
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t7 ? 11 : 12; // if t7 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:206:7
}// end SubFn6
private inline  function SubFn7():Void {
_Next=_t7 ? 13 : 14; // if t7 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:206:7
}// end SubFn7
private inline  function SubFn8():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:206:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(4141);
_t11=(-Force.toFloat(_t10)); // _t11 = -t10 *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:210:12
}// end SubFn9
private inline  function SubFn10():Void {
var _t12:Bool;
this.setPH(4146);
_t12=(Force.toFloat(_t6)>=Force.toFloat(4.503599627370496e+15)); // _t12 = t6 >= 4503599627370496:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:215:8
_Next=_t12 ? 15 : 16; // if t12 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:215:8
}// end SubFn10
private inline  function SubFn11():Void {
var _t15:Bool;
this.setPH(4162);
_t15=(Force.toFloat(_t6)==Force.toFloat(1)); // _t15 = t6 == 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:231:9
_Next=_t15 ? 25 : 24; // if t15 goto 25.binop.done else 24.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:231:9
}// end SubFn11
private inline  function SubFn12():Void {
var _t18:Bool;
this.setPH(4151);
_t18=(Force.toFloat(_t17)==Force.toFloat(0)); // _t18 = t17 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:220:8
_Next=_t18 ? 17 : 18; // if t18 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:220:8
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(4155);
_t20=(Force.toFloat(_t17)*Force.toFloat(_t6)); // _t20 = t17 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:224:24
}// end SubFn13
private inline  function SubFn14():Void {
_t22=Force.floatDiv(Force.toFloat(3.141592653589793),Force.toFloat(_t21)); // _t22 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 / t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:224:17
}// end SubFn14
private inline  function SubFn15():Void {
var _t24:Bool;
this.setPH(4156);
_t24=(Force.toFloat(_t17)<Force.toFloat(0)); // _t24 = t17 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:225:8
_Next=_t24 ? 19 : 14; // if t24 goto 19.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:225:8
}// end SubFn15
private inline  function SubFn16():Void {
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:225:8
}// end SubFn16
private inline  function SubFn17():Void {
_Next=_t7 ? 56 : 57; // if t7 goto 56.if.then else 57.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:225:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t26:Bool;
this.setPH(4168);
_t26=(Force.toFloat(_t6)<=Force.toFloat(0.9)); // _t26 = t6 <= 9/10:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:237:8
_Next=_t26 ? 28 : 30; // if t26 goto 28.if.then else 30.if.else *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:237:8
}// end SubFn18
private inline  function SubFn19():Void {
var _t27:Bool;
this.setPH(4165);
_t27=(Force.toFloat(_t6)<Force.toFloat(2)); // _t27 = t6 < 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:234:9
_Next=_t27 ? 22 : 27; // if t27 goto 22.switch.body else 27.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:234:9
}// end SubFn19
private inline  function SubFn20():Void {
this.setPH(4162);
_t28=(Force.toFloat(_t6)==Force.toFloat(2)); // _t28 = t6 == 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:231:19
_Next=25; // jump 25.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:231:19
}// end SubFn20
private inline  function SubFn21():Void {
_Next=_t29 ? 21 : 23; // if t29 goto 21.switch.body else 23.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:231:19
}// end SubFn21
private inline  function SubFn22():Void {
var _t31:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Array<Float>;
var _t40:Float;
var _t41:Array<Float>;
var _t42:Float;
var _t43:Array<Float>;
var _t44:Float;
var _t45:Array<Float>;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Float;
var _t54:Float;
var _t55:Float;
var _t56:Float;
var _t57:Float;
var _t58:Float;
var _t60:Array<Float>;
var _t61:Float;
var _t62:Array<Float>;
var _t63:Float;
var _t64:Array<Float>;
var _t65:Float;
var _t66:Array<Float>;
var _t67:Float;
var _t68:Array<Float>;
var _t69:Float;
var _t70:Array<Float>;
var _t71:Float;
var _t72:Float;
var _t73:Float;
var _t74:Float;
var _t75:Float;
var _t76:Float;
var _t77:Float;
var _t78:Float;
var _t79:Float;
var _t80:Float;
var _t81:Float;
var _t82:Float;
var _t84:Float;
var _t85:Float;
var _t87:Bool;
this.setPH(4216);
_t30={var _f:Float=_t6;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t30 = convert int <- float64 (t6) *ssa.Convert @ /usr/local/go/src/pkg/math/lgamma.go:285:11
this.setPH(4217);
_t31=_t30; // _t31 = convert float64 <- int (t30) *ssa.Convert @ /usr/local/go/src/pkg/math/lgamma.go:286:19
_t32=(Force.toFloat(_t6)-Force.toFloat(_t31)); // _t32 = t6 - t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:286:10
_t33=Go.math__lgamS.load(); // _t33 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:286:10
this.setPH(4218);
_t34=_t33[0]; // _t34 = t33[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:19
_t35=Go.math__lgamS.load(); // _t35 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:19
_t36=_t35[1]; // _t36 = t35[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:34
_t37=Go.math__lgamS.load(); // _t37 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:34
_t38=_t37[2]; // _t38 = t37[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:47
_t39=Go.math__lgamS.load(); // _t39 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:47
_t40=_t39[3]; // _t40 = t39[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:60
_t41=Go.math__lgamS.load(); // _t41 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:60
_t42=_t41[4]; // _t42 = t41[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:73
_t43=Go.math__lgamS.load(); // _t43 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:73
_t44=_t43[5]; // _t44 = t43[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:86
_t45=Go.math__lgamS.load(); // _t45 = *_lgamS *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:86
_t46=_t45[6]; // _t46 = t45[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:287:98
_t47=(Force.toFloat(_t32)*Force.toFloat(_t46)); // _t47 = t32 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:91
_t48=(Force.toFloat(_t44)+Force.toFloat(_t47)); // _t48 = t44 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:89
_t49=(Force.toFloat(_t32)*Force.toFloat(_t48)); // _t49 = t32 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:78
_t50=(Force.toFloat(_t42)+Force.toFloat(_t49)); // _t50 = t42 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:76
_t51=(Force.toFloat(_t32)*Force.toFloat(_t50)); // _t51 = t32 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:65
_t52=(Force.toFloat(_t40)+Force.toFloat(_t51)); // _t52 = t40 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:63
_t53=(Force.toFloat(_t32)*Force.toFloat(_t52)); // _t53 = t32 * t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:52
_t54=(Force.toFloat(_t38)+Force.toFloat(_t53)); // _t54 = t38 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:50
_t55=(Force.toFloat(_t32)*Force.toFloat(_t54)); // _t55 = t32 * t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:39
_t56=(Force.toFloat(_t36)+Force.toFloat(_t55)); // _t56 = t36 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:37
_t57=(Force.toFloat(_t32)*Force.toFloat(_t56)); // _t57 = t32 * t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:26
_t58=(Force.toFloat(_t34)+Force.toFloat(_t57)); // _t58 = t34 + t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:23
_t59=(Force.toFloat(_t32)*Force.toFloat(_t58)); // _t59 = t32 * t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:287:10
_t60=Go.math__lgamR.load(); // _t60 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:287:10
this.setPH(4219);
_t61=_t60[1]; // _t61 = t60[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:21
_t62=Go.math__lgamR.load(); // _t62 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:288:21
_t63=_t62[2]; // _t63 = t62[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:34
_t64=Go.math__lgamR.load(); // _t64 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:288:34
_t65=_t64[3]; // _t65 = t64[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:47
_t66=Go.math__lgamR.load(); // _t66 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:288:47
_t67=_t66[4]; // _t67 = t66[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:60
_t68=Go.math__lgamR.load(); // _t68 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:288:60
_t69=_t68[5]; // _t69 = t68[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:73
_t70=Go.math__lgamR.load(); // _t70 = *_lgamR *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:288:73
_t71=_t70[6]; // _t71 = t70[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:288:85
_t72=(Force.toFloat(_t32)*Force.toFloat(_t71)); // _t72 = t32 * t71 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:78
_t73=(Force.toFloat(_t69)+Force.toFloat(_t72)); // _t73 = t69 + t72 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:76
_t74=(Force.toFloat(_t32)*Force.toFloat(_t73)); // _t74 = t32 * t73 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:65
_t75=(Force.toFloat(_t67)+Force.toFloat(_t74)); // _t75 = t67 + t74 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:63
_t76=(Force.toFloat(_t32)*Force.toFloat(_t75)); // _t76 = t32 * t75 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:52
_t77=(Force.toFloat(_t65)+Force.toFloat(_t76)); // _t77 = t65 + t76 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:50
_t78=(Force.toFloat(_t32)*Force.toFloat(_t77)); // _t78 = t32 * t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:39
_t79=(Force.toFloat(_t63)+Force.toFloat(_t78)); // _t79 = t63 + t78 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:37
_t80=(Force.toFloat(_t32)*Force.toFloat(_t79)); // _t80 = t32 * t79 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:26
_t81=(Force.toFloat(_t61)+Force.toFloat(_t80)); // _t81 = t61 + t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:24
_t82=(Force.toFloat(_t32)*Force.toFloat(_t81)); // _t82 = t32 * t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:13
_t83=(Force.toFloat(1)+Force.toFloat(_t82)); // _t83 = 1:float64 + t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:288:10
this.setPH(4220);
_t84=(Force.toFloat(0.5)*Force.toFloat(_t32)); // _t84 = 1/2:float64 * t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:289:15
_t85=Force.floatDiv(Force.toFloat(_t59),Force.toFloat(_t83)); // _t85 = t59 / t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:289:21
_t86=(Force.toFloat(_t84)+Force.toFloat(_t85)); // _t86 = t84 + t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:289:18
_t87=(_t30==7); // _t87 = t30 == 7:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:289:18
_Next=_t87 ? 46 : 48; // if t87 goto 46.switch.body else 48.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:289:18
}// end SubFn22
private inline  function SubFn23():Void {
var _t88:Bool;
this.setPH(4215);
_t88=(Force.toFloat(_t6)<Force.toFloat(8)); // _t88 = t6 < 8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:284:9
_Next=_t88 ? 26 : 45; // if t88 goto 26.switch.body else 45.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:284:9
}// end SubFn23
private inline  function SubFn24():Void {
var _t91:Bool;
this.setPH(4169);
_t90=(-Force.toFloat(_t89)); // _t90 = -t89 *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:238:13
this.setPH(4171);
_t91=(Force.toFloat(_t6)>=Force.toFloat(0.7316321449683623)); // _t91 = t6 >= 146326428993672449/200000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:240:11
_Next=_t91 ? 31 : 33; // if t91 goto 31.switch.body else 33.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:240:11
}// end SubFn24
private inline  function SubFn25():Void {
var _t95:Bool;
_t95=(_t94==0); // _t95 = t94 == 0:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:240:11
_Next=_t95 ? 39 : 41; // if t95 goto 39.switch.body else 41.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:240:11
}// end SubFn25
private inline  function SubFn26():Void {
var _t96:Bool;
this.setPH(4184);
_t96=(Force.toFloat(_t6)>=Force.toFloat(1.7316321449683623)); // _t96 = t6 >= 346326428993672449/200000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:253:11
_Next=_t96 ? 35 : 37; // if t96 goto 35.switch.body else 37.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:253:11
}// end SubFn26
private inline  function SubFn27():Void {
this.setPH(4172);
_t97=(Force.toFloat(1)-Force.toFloat(_t6)); // _t97 = 1:float64 - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:241:11
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:241:11
}// end SubFn27
private inline  function SubFn28():Void {
this.setPH(4175);
_t98=(Force.toFloat(_t6)-Force.toFloat(0.46163214496836225)); // _t98 = t6 - 721300226513066009/1562500000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:244:11
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:244:11
}// end SubFn28
private inline  function SubFn29():Void {
var _t99:Bool;
this.setPH(4174);
_t99=(Force.toFloat(_t6)>=Force.toFloat(0.19163214496836226)); // _t99 = t6 >= 38326428993672449/200000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:243:11
_Next=_t99 ? 32 : 34; // if t99 goto 32.switch.body else 34.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:243:11
}// end SubFn29
private inline  function SubFn30():Void {
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:243:11
}// end SubFn30
private inline  function SubFn31():Void {
this.setPH(4185);
_t100=(Force.toFloat(2)-Force.toFloat(_t6)); // _t100 = 2:float64 - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:254:11
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:254:11
}// end SubFn31
private inline  function SubFn32():Void {
this.setPH(4188);
_t101=(Force.toFloat(_t6)-Force.toFloat(1.4616321449683622)); // _t101 = t6 - 2283800226513066009/1562500000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:257:11
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:257:11
}// end SubFn32
private inline  function SubFn33():Void {
var _t102:Bool;
this.setPH(4187);
_t102=(Force.toFloat(_t6)>=Force.toFloat(1.1916321449683622)); // _t102 = t6 >= 238326428993672449/200000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:256:11
_Next=_t102 ? 36 : 38; // if t102 goto 36.switch.body else 38.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:256:11
}// end SubFn33
private inline  function SubFn34():Void {
this.setPH(4191);
_t103=(Force.toFloat(_t6)-Force.toFloat(1)); // _t103 = t6 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:260:11
_Next=29; // jump 29.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:260:11
}// end SubFn34
private inline  function SubFn35():Void {
var _t105:Array<Float>;
var _t106:Float;
var _t107:Array<Float>;
var _t108:Float;
var _t109:Array<Float>;
var _t110:Float;
var _t111:Array<Float>;
var _t112:Float;
var _t113:Array<Float>;
var _t114:Float;
var _t115:Array<Float>;
var _t116:Float;
var _t117:Float;
var _t118:Float;
var _t119:Float;
var _t120:Float;
var _t121:Float;
var _t122:Float;
var _t123:Float;
var _t124:Float;
var _t125:Float;
var _t127:Array<Float>;
var _t128:Float;
var _t129:Array<Float>;
var _t130:Float;
var _t131:Array<Float>;
var _t132:Float;
var _t133:Array<Float>;
var _t134:Float;
var _t135:Array<Float>;
var _t136:Float;
var _t137:Array<Float>;
var _t138:Float;
var _t139:Float;
var _t140:Float;
var _t141:Float;
var _t142:Float;
var _t143:Float;
var _t144:Float;
var _t145:Float;
var _t146:Float;
var _t147:Float;
var _t148:Float;
var _t150:Float;
var _t152:Float;
var _t153:Float;
this.setPH(4197);
_t104=(Force.toFloat(_t93)*Force.toFloat(_t93)); // _t104 = t93 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:266:11
_t105=Go.math__lgamA.load(); // _t105 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:266:11
this.setPH(4198);
_t106=_t105[0]; // _t106 = t105[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:16
_t107=Go.math__lgamA.load(); // _t107 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:16
_t108=_t107[2]; // _t108 = t107[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:31
_t109=Go.math__lgamA.load(); // _t109 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:31
_t110=_t109[4]; // _t110 = t109[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:44
_t111=Go.math__lgamA.load(); // _t111 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:44
_t112=_t111[6]; // _t112 = t111[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:57
_t113=Go.math__lgamA.load(); // _t113 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:57
_t114=_t113[8]; // _t114 = t113[8:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:70
_t115=Go.math__lgamA.load(); // _t115 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:70
_t116=_t115[10]; // _t116 = t115[10:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:267:82
_t117=(Force.toFloat(_t104)*Force.toFloat(_t116)); // _t117 = t104 * t116 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:75
_t118=(Force.toFloat(_t114)+Force.toFloat(_t117)); // _t118 = t114 + t117 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:73
_t119=(Force.toFloat(_t104)*Force.toFloat(_t118)); // _t119 = t104 * t118 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:62
_t120=(Force.toFloat(_t112)+Force.toFloat(_t119)); // _t120 = t112 + t119 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:60
_t121=(Force.toFloat(_t104)*Force.toFloat(_t120)); // _t121 = t104 * t120 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:49
_t122=(Force.toFloat(_t110)+Force.toFloat(_t121)); // _t122 = t110 + t121 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:47
_t123=(Force.toFloat(_t104)*Force.toFloat(_t122)); // _t123 = t104 * t122 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:36
_t124=(Force.toFloat(_t108)+Force.toFloat(_t123)); // _t124 = t108 + t123 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:34
_t125=(Force.toFloat(_t104)*Force.toFloat(_t124)); // _t125 = t104 * t124 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:23
_t126=(Force.toFloat(_t106)+Force.toFloat(_t125)); // _t126 = t106 + t125 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:267:20
_t127=Go.math__lgamA.load(); // _t127 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:267:20
this.setPH(4199);
_t128=_t127[1]; // _t128 = t127[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:21
_t129=Go.math__lgamA.load(); // _t129 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:268:21
_t130=_t129[3]; // _t130 = t129[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:37
_t131=Go.math__lgamA.load(); // _t131 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:268:37
_t132=_t131[5]; // _t132 = t131[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:50
_t133=Go.math__lgamA.load(); // _t133 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:268:50
_t134=_t133[7]; // _t134 = t133[7:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:63
_t135=Go.math__lgamA.load(); // _t135 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:268:63
_t136=_t135[9]; // _t136 = t135[9:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:76
_t137=Go.math__lgamA.load(); // _t137 = *_lgamA *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:268:76
_t138=_t137[11]; // _t138 = t137[11:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:268:88
_t139=(Force.toFloat(_t104)*Force.toFloat(_t138)); // _t139 = t104 * t138 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:81
_t140=(Force.toFloat(_t136)+Force.toFloat(_t139)); // _t140 = t136 + t139 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:79
_t141=(Force.toFloat(_t104)*Force.toFloat(_t140)); // _t141 = t104 * t140 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:68
_t142=(Force.toFloat(_t134)+Force.toFloat(_t141)); // _t142 = t134 + t141 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:66
_t143=(Force.toFloat(_t104)*Force.toFloat(_t142)); // _t143 = t104 * t142 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:55
_t144=(Force.toFloat(_t132)+Force.toFloat(_t143)); // _t144 = t132 + t143 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:53
_t145=(Force.toFloat(_t104)*Force.toFloat(_t144)); // _t145 = t104 * t144 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:42
_t146=(Force.toFloat(_t130)+Force.toFloat(_t145)); // _t146 = t130 + t145 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:40
_t147=(Force.toFloat(_t104)*Force.toFloat(_t146)); // _t147 = t104 * t146 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:28
_t148=(Force.toFloat(_t128)+Force.toFloat(_t147)); // _t148 = t128 + t147 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:25
_t149=(Force.toFloat(_t104)*Force.toFloat(_t148)); // _t149 = t104 * t148 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:268:12
this.setPH(4200);
_t150=(Force.toFloat(_t93)*Force.toFloat(_t126)); // _t150 = t93 * t126 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:269:10
_t151=(Force.toFloat(_t150)+Force.toFloat(_t149)); // _t151 = t150 + t149 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:269:14
this.setPH(4201);
_t152=(Force.toFloat(0.5)*Force.toFloat(_t93)); // _t152 = 1/2:float64 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:270:22
_t153=(Force.toFloat(_t151)-Force.toFloat(_t152)); // _t153 = t151 - t152 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:270:17
_t154=(Force.toFloat(_t92)+Force.toFloat(_t153)); // _t154 = t92 + t153 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:270:17
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:270:17
}// end SubFn35
private inline  function SubFn36():Void {
var _t157:Array<Float>;
var _t158:Float;
var _t159:Array<Float>;
var _t160:Float;
var _t161:Array<Float>;
var _t162:Float;
var _t163:Array<Float>;
var _t164:Float;
var _t165:Array<Float>;
var _t166:Float;
var _t167:Float;
var _t168:Float;
var _t169:Float;
var _t170:Float;
var _t171:Float;
var _t172:Float;
var _t173:Float;
var _t175:Array<Float>;
var _t176:Float;
var _t177:Array<Float>;
var _t178:Float;
var _t179:Array<Float>;
var _t180:Float;
var _t181:Array<Float>;
var _t182:Float;
var _t183:Array<Float>;
var _t184:Float;
var _t185:Float;
var _t186:Float;
var _t187:Float;
var _t188:Float;
var _t189:Float;
var _t190:Float;
var _t191:Float;
var _t193:Array<Float>;
var _t194:Float;
var _t195:Array<Float>;
var _t196:Float;
var _t197:Array<Float>;
var _t198:Float;
var _t199:Array<Float>;
var _t200:Float;
var _t201:Array<Float>;
var _t202:Float;
var _t203:Float;
var _t204:Float;
var _t205:Float;
var _t206:Float;
var _t207:Float;
var _t208:Float;
var _t209:Float;
var _t211:Float;
var _t212:Float;
var _t213:Float;
var _t214:Float;
var _t215:Float;
var _t217:Float;
this.setPH(4203);
_t155=(Force.toFloat(_t93)*Force.toFloat(_t93)); // _t155 = t93 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:272:11
this.setPH(4204);
_t156=(Force.toFloat(_t155)*Force.toFloat(_t93)); // _t156 = t155 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:273:11
_t157=Go.math__lgamT.load(); // _t157 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:273:11
this.setPH(4205);
_t158=_t157[0]; // _t158 = t157[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:274:16
_t159=Go.math__lgamT.load(); // _t159 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:274:16
_t160=_t159[3]; // _t160 = t159[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:274:31
_t161=Go.math__lgamT.load(); // _t161 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:274:31
_t162=_t161[6]; // _t162 = t161[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:274:44
_t163=Go.math__lgamT.load(); // _t163 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:274:44
_t164=_t163[9]; // _t164 = t163[9:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:274:57
_t165=Go.math__lgamT.load(); // _t165 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:274:57
_t166=_t165[12]; // _t166 = t165[12:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:274:69
_t167=(Force.toFloat(_t156)*Force.toFloat(_t166)); // _t167 = t156 * t166 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:62
_t168=(Force.toFloat(_t164)+Force.toFloat(_t167)); // _t168 = t164 + t167 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:60
_t169=(Force.toFloat(_t156)*Force.toFloat(_t168)); // _t169 = t156 * t168 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:49
_t170=(Force.toFloat(_t162)+Force.toFloat(_t169)); // _t170 = t162 + t169 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:47
_t171=(Force.toFloat(_t156)*Force.toFloat(_t170)); // _t171 = t156 * t170 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:36
_t172=(Force.toFloat(_t160)+Force.toFloat(_t171)); // _t172 = t160 + t171 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:34
_t173=(Force.toFloat(_t156)*Force.toFloat(_t172)); // _t173 = t156 * t172 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:23
_t174=(Force.toFloat(_t158)+Force.toFloat(_t173)); // _t174 = t158 + t173 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:274:20
_t175=Go.math__lgamT.load(); // _t175 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:274:20
this.setPH(4206);
_t176=_t175[1]; // _t176 = t175[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:275:16
_t177=Go.math__lgamT.load(); // _t177 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:275:16
_t178=_t177[4]; // _t178 = t177[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:275:31
_t179=Go.math__lgamT.load(); // _t179 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:275:31
_t180=_t179[7]; // _t180 = t179[7:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:275:44
_t181=Go.math__lgamT.load(); // _t181 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:275:44
_t182=_t181[10]; // _t182 = t181[10:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:275:57
_t183=Go.math__lgamT.load(); // _t183 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:275:57
_t184=_t183[13]; // _t184 = t183[13:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:275:70
_t185=(Force.toFloat(_t156)*Force.toFloat(_t184)); // _t185 = t156 * t184 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:63
_t186=(Force.toFloat(_t182)+Force.toFloat(_t185)); // _t186 = t182 + t185 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:61
_t187=(Force.toFloat(_t156)*Force.toFloat(_t186)); // _t187 = t156 * t186 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:49
_t188=(Force.toFloat(_t180)+Force.toFloat(_t187)); // _t188 = t180 + t187 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:47
_t189=(Force.toFloat(_t156)*Force.toFloat(_t188)); // _t189 = t156 * t188 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:36
_t190=(Force.toFloat(_t178)+Force.toFloat(_t189)); // _t190 = t178 + t189 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:34
_t191=(Force.toFloat(_t156)*Force.toFloat(_t190)); // _t191 = t156 * t190 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:23
_t192=(Force.toFloat(_t176)+Force.toFloat(_t191)); // _t192 = t176 + t191 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:275:20
_t193=Go.math__lgamT.load(); // _t193 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:275:20
this.setPH(4207);
_t194=_t193[2]; // _t194 = t193[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:276:16
_t195=Go.math__lgamT.load(); // _t195 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:276:16
_t196=_t195[5]; // _t196 = t195[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:276:31
_t197=Go.math__lgamT.load(); // _t197 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:276:31
_t198=_t197[8]; // _t198 = t197[8:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:276:44
_t199=Go.math__lgamT.load(); // _t199 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:276:44
_t200=_t199[11]; // _t200 = t199[11:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:276:57
_t201=Go.math__lgamT.load(); // _t201 = *_lgamT *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:276:57
_t202=_t201[14]; // _t202 = t201[14:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:276:70
_t203=(Force.toFloat(_t156)*Force.toFloat(_t202)); // _t203 = t156 * t202 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:63
_t204=(Force.toFloat(_t200)+Force.toFloat(_t203)); // _t204 = t200 + t203 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:61
_t205=(Force.toFloat(_t156)*Force.toFloat(_t204)); // _t205 = t156 * t204 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:49
_t206=(Force.toFloat(_t198)+Force.toFloat(_t205)); // _t206 = t198 + t205 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:47
_t207=(Force.toFloat(_t156)*Force.toFloat(_t206)); // _t207 = t156 * t206 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:36
_t208=(Force.toFloat(_t196)+Force.toFloat(_t207)); // _t208 = t196 + t207 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:34
_t209=(Force.toFloat(_t156)*Force.toFloat(_t208)); // _t209 = t156 * t208 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:23
_t210=(Force.toFloat(_t194)+Force.toFloat(_t209)); // _t210 = t194 + t209 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:276:20
this.setPH(4208);
_t211=(Force.toFloat(_t155)*Force.toFloat(_t174)); // _t211 = t155 * t174 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:10
_t212=(Force.toFloat(_t93)*Force.toFloat(_t210)); // _t212 = t93 * t210 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:29
_t213=(Force.toFloat(_t192)+Force.toFloat(_t212)); // _t213 = t192 + t212 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:27
_t214=(Force.toFloat(_t156)*Force.toFloat(_t213)); // _t214 = t156 * t213 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:23
_t215=(Force.toFloat((-3.638676997039505e-18))-Force.toFloat(_t214)); // _t215 = -363867699703950536541/100000000000000000000000000000000000000:float64 - t214 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:20
_t216=(Force.toFloat(_t211)-Force.toFloat(_t215)); // _t216 = t211 - t215 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:14
this.setPH(4209);
_t217=(Force.toFloat((-0.12148629053584961))+Force.toFloat(_t216)); // _t217 = -121486290535849611461/1000000000000000000000:float64 + t216 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:278:18
_t218=(Force.toFloat(_t92)+Force.toFloat(_t217)); // _t218 = t92 + t217 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:278:18
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:278:18
}// end SubFn36
private inline  function SubFn37():Void {
var _t219:Bool;
_t219=(_t94==1); // _t219 = t94 == 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:278:18
_Next=_t219 ? 40 : 43; // if t219 goto 40.switch.body else 43.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:278:18
}// end SubFn37
private inline  function SubFn38():Void {
var _t220:Array<Float>;
var _t221:Float;
var _t222:Array<Float>;
var _t223:Float;
var _t224:Array<Float>;
var _t225:Float;
var _t226:Array<Float>;
var _t227:Float;
var _t228:Array<Float>;
var _t229:Float;
var _t230:Array<Float>;
var _t231:Float;
var _t232:Float;
var _t233:Float;
var _t234:Float;
var _t235:Float;
var _t236:Float;
var _t237:Float;
var _t238:Float;
var _t239:Float;
var _t240:Float;
var _t241:Float;
var _t243:Array<Float>;
var _t244:Float;
var _t245:Array<Float>;
var _t246:Float;
var _t247:Array<Float>;
var _t248:Float;
var _t249:Array<Float>;
var _t250:Float;
var _t251:Array<Float>;
var _t252:Float;
var _t253:Float;
var _t254:Float;
var _t255:Float;
var _t256:Float;
var _t257:Float;
var _t258:Float;
var _t259:Float;
var _t260:Float;
var _t261:Float;
var _t263:Float;
var _t264:Float;
var _t265:Float;
_t220=Go.math__lgamU.load(); // _t220 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:278:18
this.setPH(4211);
_t221=_t220[0]; // _t221 = t220[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:21
_t222=Go.math__lgamU.load(); // _t222 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:21
_t223=_t222[1]; // _t223 = t222[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:36
_t224=Go.math__lgamU.load(); // _t224 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:36
_t225=_t224[2]; // _t225 = t224[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:49
_t226=Go.math__lgamU.load(); // _t226 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:49
_t227=_t226[3]; // _t227 = t226[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:62
_t228=Go.math__lgamU.load(); // _t228 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:62
_t229=_t228[4]; // _t229 = t228[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:75
_t230=Go.math__lgamU.load(); // _t230 = *_lgamU *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:75
_t231=_t230[5]; // _t231 = t230[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:280:87
_t232=(Force.toFloat(_t93)*Force.toFloat(_t231)); // _t232 = t93 * t231 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:80
_t233=(Force.toFloat(_t229)+Force.toFloat(_t232)); // _t233 = t229 + t232 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:78
_t234=(Force.toFloat(_t93)*Force.toFloat(_t233)); // _t234 = t93 * t233 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:67
_t235=(Force.toFloat(_t227)+Force.toFloat(_t234)); // _t235 = t227 + t234 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:65
_t236=(Force.toFloat(_t93)*Force.toFloat(_t235)); // _t236 = t93 * t235 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:54
_t237=(Force.toFloat(_t225)+Force.toFloat(_t236)); // _t237 = t225 + t236 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:52
_t238=(Force.toFloat(_t93)*Force.toFloat(_t237)); // _t238 = t93 * t237 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:41
_t239=(Force.toFloat(_t223)+Force.toFloat(_t238)); // _t239 = t223 + t238 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:39
_t240=(Force.toFloat(_t93)*Force.toFloat(_t239)); // _t240 = t93 * t239 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:28
_t241=(Force.toFloat(_t221)+Force.toFloat(_t240)); // _t241 = t221 + t240 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:25
_t242=(Force.toFloat(_t93)*Force.toFloat(_t241)); // _t242 = t93 * t241 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:280:12
_t243=Go.math__lgamV.load(); // _t243 = *_lgamV *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:280:12
this.setPH(4212);
_t244=_t243[1]; // _t244 = t243[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:281:23
_t245=Go.math__lgamV.load(); // _t245 = *_lgamV *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:281:23
_t246=_t245[2]; // _t246 = t245[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:281:36
_t247=Go.math__lgamV.load(); // _t247 = *_lgamV *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:281:36
_t248=_t247[3]; // _t248 = t247[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:281:49
_t249=Go.math__lgamV.load(); // _t249 = *_lgamV *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:281:49
_t250=_t249[4]; // _t250 = t249[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:281:62
_t251=Go.math__lgamV.load(); // _t251 = *_lgamV *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:281:62
_t252=_t251[5]; // _t252 = t251[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:281:74
_t253=(Force.toFloat(_t93)*Force.toFloat(_t252)); // _t253 = t93 * t252 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:67
_t254=(Force.toFloat(_t250)+Force.toFloat(_t253)); // _t254 = t250 + t253 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:65
_t255=(Force.toFloat(_t93)*Force.toFloat(_t254)); // _t255 = t93 * t254 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:54
_t256=(Force.toFloat(_t248)+Force.toFloat(_t255)); // _t256 = t248 + t255 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:52
_t257=(Force.toFloat(_t93)*Force.toFloat(_t256)); // _t257 = t93 * t256 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:41
_t258=(Force.toFloat(_t246)+Force.toFloat(_t257)); // _t258 = t246 + t257 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:39
_t259=(Force.toFloat(_t93)*Force.toFloat(_t258)); // _t259 = t93 * t258 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:28
_t260=(Force.toFloat(_t244)+Force.toFloat(_t259)); // _t260 = t244 + t259 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:26
_t261=(Force.toFloat(_t93)*Force.toFloat(_t260)); // _t261 = t93 * t260 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:15
_t262=(Force.toFloat(1)+Force.toFloat(_t261)); // _t262 = 1:float64 + t261 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:281:12
this.setPH(4213);
_t263=(Force.toFloat((-0.5))*Force.toFloat(_t93)); // _t263 = -1/2:float64 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:282:19
_t264=Force.floatDiv(Force.toFloat(_t242),Force.toFloat(_t262)); // _t264 = t242 / t262 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:282:26
_t265=(Force.toFloat(_t263)+Force.toFloat(_t264)); // _t265 = t263 + t264 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:282:22
_t266=(Force.toFloat(_t92)+Force.toFloat(_t265)); // _t266 = t92 + t265 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:282:22
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:282:22
}// end SubFn38
private inline  function SubFn39():Void {
var _t267:Bool;
_t267=(_t94==2); // _t267 = t94 == 2:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:282:22
_Next=_t267 ? 42 : 20; // if t267 goto 42.switch.body else 20.switch.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:282:22
}// end SubFn39
private inline  function SubFn40():Void {
var _t271:Array<Float>;
var _t272:Float;
var _t273:Array<Float>;
var _t274:Float;
var _t275:Array<Float>;
var _t276:Float;
var _t277:Array<Float>;
var _t278:Float;
var _t279:Array<Float>;
var _t280:Float;
var _t281:Array<Float>;
var _t282:Float;
var _t283:Array<Float>;
var _t284:Float;
var _t285:Float;
var _t286:Float;
var _t287:Float;
var _t288:Float;
var _t289:Float;
var _t290:Float;
var _t291:Float;
var _t292:Float;
var _t293:Float;
var _t294:Float;
var _t295:Float;
var _t297:Float;
var _t298:Float;
var _t299:Float;
this.setPH(4241);
_t269=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t6)); // _t269 = 1:float64 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:310:10
this.setPH(4242);
_t270=(Force.toFloat(_t269)*Force.toFloat(_t269)); // _t270 = t269 * t269 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:311:10
_t271=Go.math__lgamW.load(); // _t271 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:311:10
this.setPH(4243);
_t272=_t271[0]; // _t272 = t271[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:14
_t273=Go.math__lgamW.load(); // _t273 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:14
_t274=_t273[1]; // _t274 = t273[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:29
_t275=Go.math__lgamW.load(); // _t275 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:29
_t276=_t275[2]; // _t276 = t275[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:42
_t277=Go.math__lgamW.load(); // _t277 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:42
_t278=_t277[3]; // _t278 = t277[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:55
_t279=Go.math__lgamW.load(); // _t279 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:55
_t280=_t279[4]; // _t280 = t279[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:68
_t281=Go.math__lgamW.load(); // _t281 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:68
_t282=_t281[5]; // _t282 = t281[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:81
_t283=Go.math__lgamW.load(); // _t283 = *_lgamW *ssa.UnOp near /usr/local/go/src/pkg/math/lgamma.go:312:81
_t284=_t283[6]; // _t284 = t283[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/lgamma.go:312:93
_t285=(Force.toFloat(_t270)*Force.toFloat(_t284)); // _t285 = t270 * t284 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:86
_t286=(Force.toFloat(_t282)+Force.toFloat(_t285)); // _t286 = t282 + t285 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:84
_t287=(Force.toFloat(_t270)*Force.toFloat(_t286)); // _t287 = t270 * t286 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:73
_t288=(Force.toFloat(_t280)+Force.toFloat(_t287)); // _t288 = t280 + t287 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:71
_t289=(Force.toFloat(_t270)*Force.toFloat(_t288)); // _t289 = t270 * t288 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:60
_t290=(Force.toFloat(_t278)+Force.toFloat(_t289)); // _t290 = t278 + t289 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:58
_t291=(Force.toFloat(_t270)*Force.toFloat(_t290)); // _t291 = t270 * t290 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:47
_t292=(Force.toFloat(_t276)+Force.toFloat(_t291)); // _t292 = t276 + t291 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:45
_t293=(Force.toFloat(_t270)*Force.toFloat(_t292)); // _t293 = t270 * t292 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:34
_t294=(Force.toFloat(_t274)+Force.toFloat(_t293)); // _t294 = t274 + t293 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:32
_t295=(Force.toFloat(_t269)*Force.toFloat(_t294)); // _t295 = t269 * t294 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:21
_t296=(Force.toFloat(_t272)+Force.toFloat(_t295)); // _t296 = t272 + t295 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:312:18
this.setPH(4244);
_t297=(Force.toFloat(_t6)-Force.toFloat(0.5)); // _t297 = t6 - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:313:14
_t298=(Force.toFloat(_t268)-Force.toFloat(1)); // _t298 = t268 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:313:22
_t299=(Force.toFloat(_t297)*Force.toFloat(_t298)); // _t299 = t297 * t298 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:313:19
_t300=(Force.toFloat(_t299)+Force.toFloat(_t296)); // _t300 = t299 + t296 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:313:26
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:313:26
}// end SubFn40
private inline  function SubFn41():Void {
var _t301:Bool;
this.setPH(4239);
_t301=(Force.toFloat(_t6)<Force.toFloat(2.8823037615171174e+17)); // _t301 = t6 < 288230376151711744:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:308:9
_Next=_t301 ? 44 : 55; // if t301 goto 44.switch.body else 55.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:308:9
}// end SubFn41
private inline  function SubFn42():Void {
var _t302:Float;
this.setPH(4224);
_t302=(Force.toFloat(_t32)+Force.toFloat(6)); // _t302 = t32 + 6:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:293:12
_t303=(Force.toFloat(1)*Force.toFloat(_t302)); // _t303 = 1:float64 * t302 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:293:12
_Next=47; // jump 47.switch.body *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:293:12
}// end SubFn42
private inline  function SubFn43():Void {
var _t305:Float;
this.setPH(4227);
_t305=(Force.toFloat(_t32)+Force.toFloat(5)); // _t305 = t32 + 5:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:296:12
_t306=(Force.toFloat(_t304)*Force.toFloat(_t305)); // _t306 = t304 * t305 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:296:12
_Next=49; // jump 49.switch.body *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:296:12
}// end SubFn43
private inline  function SubFn44():Void {
var _t307:Bool;
_t307=(_t30==6); // _t307 = t30 == 6:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:296:12
_Next=_t307 ? 47 : 50; // if t307 goto 47.switch.body else 50.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:296:12
}// end SubFn44
private inline  function SubFn45():Void {
var _t309:Float;
this.setPH(4230);
_t309=(Force.toFloat(_t32)+Force.toFloat(4)); // _t309 = t32 + 4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:299:12
_t310=(Force.toFloat(_t308)*Force.toFloat(_t309)); // _t310 = t308 * t309 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:299:12
_Next=51; // jump 51.switch.body *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:299:12
}// end SubFn45
private inline  function SubFn46():Void {
var _t311:Bool;
_t311=(_t30==5); // _t311 = t30 == 5:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:299:12
_Next=_t311 ? 49 : 52; // if t311 goto 49.switch.body else 52.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:299:12
}// end SubFn46
private inline  function SubFn47():Void {
var _t313:Float;
this.setPH(4233);
_t313=(Force.toFloat(_t32)+Force.toFloat(3)); // _t313 = t32 + 3:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:302:12
_t314=(Force.toFloat(_t312)*Force.toFloat(_t313)); // _t314 = t312 * t313 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:302:12
_Next=53; // jump 53.switch.body *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:302:12
}// end SubFn47
private inline  function SubFn48():Void {
var _t315:Bool;
_t315=(_t30==4); // _t315 = t30 == 4:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:302:12
_Next=_t315 ? 51 : 54; // if t315 goto 51.switch.body else 54.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:302:12
}// end SubFn48
private inline  function SubFn49():Void {
var _t317:Float;
this.setPH(4236);
_t317=(Force.toFloat(_t32)+Force.toFloat(2)); // _t317 = t32 + 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:305:12
_t318=(Force.toFloat(_t316)*Force.toFloat(_t317)); // _t318 = t316 * t317 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:305:12
}// end SubFn49
private inline  function SubFn50():Void {
_t320=(Force.toFloat(_t86)+Force.toFloat(_t319)); // _t320 = t86 + t319 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:305:12
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:305:12
}// end SubFn50
private inline  function SubFn51():Void {
var _t321:Bool;
_t321=(_t30==3); // _t321 = t30 == 3:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:305:12
_Next=_t321 ? 53 : 20; // if t321 goto 53.switch.body else 20.switch.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:305:12
}// end SubFn51
private inline  function SubFn52():Void {
var _t323:Float;
this.setPH(4246);
_t323=(Force.toFloat(_t322)-Force.toFloat(1)); // _t323 = t322 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:315:24
_t324=(Force.toFloat(_t6)*Force.toFloat(_t323)); // _t324 = t6 * t323 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:315:14
_Next=20; // jump 20.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:315:14
}// end SubFn52
private inline  function SubFn53():Void {
this.setPH(4249);
_t325=(Force.toFloat(_t14)-Force.toFloat(_t25)); // _t325 = t14 - t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:318:17
_Next=57; // jump 57.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:318:17
}// end SubFn53
}
#if (!php) private #end class Go_math_floor extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/floor.go:15:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2100,"Go_math_floor");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:Bool=false;
var _SF2:StackFrame;
var _t3:Bool=false;
var _t4:Float=0.0;
var _SF3:StackFrame;
var _t5:{r0:Float,r1:Float}=null;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Bool=false;
var _SF4:StackFrame;
var _t9:{r0:Float,r1:Float}=null;
var _t10:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_floor(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_floor(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_floor
{return new Go_math_floor(gr,_bds, p_x);
}
public function run():Go_math_floor {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2100,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(2100,1);
this.setPH(2102);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:17:3

case 2: // if.done
this.setLatest(2102,2);
this.SubFn1();
_Phi=2;
case 3: // cond.false
this.setLatest(2102,3);
this.setPH(2101);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -1;
return this;
case -1:
this.setLatest(2101,-1);
_t2=_SF1.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:16:32
this.SubFn2();
_Phi=3;
case 4: // cond.false
this.setLatest(2101,4);
_SF2=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -2;
return this;
case -2:
this.setLatest(2101,-2);
_t3=_SF2.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:16:20
this.SubFn3();
_Phi=4;
case 5: // if.then
this.setLatest(2101,5);
this.SubFn4();
this.setPH(2105);
_SF3=Go_math_modf.call(this._goroutine,[],_t4);
_Next = -3;
return this;
case -3:
this.setLatest(2105,-3);
_t5=_SF3.res();
 // _t5 = Modf(t4) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:20:19
this.SubFn5();
_Phi=5;
case 6: // if.done
this.setLatest(2105,6);
this.setPH(2111);
_SF4=Go_math_modf.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(2111,-4);
_t9=_SF4.res();
 // _t9 = Modf(x) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:26:14
this.SubFn6();
this.setPH(2112);
_res= _t10;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t10 *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:27:2

case 7: // if.then
this.setLatest(2112,7);
this.SubFn7();
_Phi=7;
case 8: // if.done
this.setLatest(2112,8);
this.setPH(2105);
_t13=((_Phi==5)?_t6:(_Phi==7)?_t12:0.0); // _t13 = phi [5.if.then: t6, 7.if.then: t12] #d *ssa.Phi @ /usr/local/go/src/pkg/math/floor.go:20:3
this.SubFn8();
this.setPH(2109);
_res= _t14;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t14 *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:24:3

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2101);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/floor.go:16:7
_Next=_t0 ? 1 : 4; // if t0 goto 1.if.then else 4.cond.false *ssa.If near /usr/local/go/src/pkg/math/floor.go:16:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(2104);
_t1=(Force.toFloat(p_x)<Force.toFloat(0)); // _t1 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/floor.go:19:7
_Next=_t1 ? 5 : 6; // if t1 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/floor.go:19:7
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t2 ? 1 : 2; // if t2 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/floor.go:19:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 1 : 3; // if t3 goto 1.if.then else 3.cond.false *ssa.If near /usr/local/go/src/pkg/math/floor.go:19:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(2105);
_t4=(-Force.toFloat(p_x)); // _t4 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/floor.go:20:20
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
_t6=_t5.r0; // _t6 = extract t5 #0 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:20:20
_t7=_t5.r1; // _t7 = extract t5 #1 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:20:20
this.setPH(2106);
_t8=(Force.toFloat(_t7)!=Force.toFloat(0)); // _t8 = t7 != 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/floor.go:21:12
_Next=_t8 ? 7 : 8; // if t8 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/floor.go:21:12
}// end SubFn5
private inline  function SubFn6():Void {
_t10=_t9.r0; // _t10 = extract t9 #0 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:21:12
 // _t11 = extract t9 #1 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:21:12 [REGISTER VALUE UN-USED]
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(2107);
_t12=(Force.toFloat(_t6)+Force.toFloat(1)); // _t12 = t6 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/floor.go:22:10
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/floor.go:22:10
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(2109);
_t14=(-Force.toFloat(_t13)); // _t14 = -t13 *ssa.UnOp @ /usr/local/go/src/pkg/math/floor.go:24:10
}// end SubFn8
}
#if (!php) private #end class Go_math_init_36_1 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/pow10.go:33:6
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,2626,"Go_math_init_36_1");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Int=0;
var _t3:Pointer=null;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Array<Float>=null;
var _t7:Int=0;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_init_36_1(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_math_init_36_1(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_math_init_36_1
{return new Go_math_init_36_1(gr,_bds);
}
public function run():Go_math_init_36_1 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2626,0);
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(2626,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(2626,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/floor.go:24:10

case 3: // for.loop
this.setLatest(2626,3);
this.setPH(2629);
_t11=((_Phi==0)?2:(_Phi==1)?_t10:0); // _t11 = phi [0.entry: 2:int, 1.for.body: t10] #i *ssa.Phi @ /usr/local/go/src/pkg/math/pow10.go:36:6
this.SubFn2();
_Phi=3;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Pointer;
this.setPH(2627);
_t0=Go.math_pow10tab.addr(0);  // _t0 = &pow10tab[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/math/pow10.go:34:10 [POINTER]
_t0.store(1); // *t0 = 1:float64 *ssa.Store near /usr/local/go/src/pkg/math/pow10.go:34:10
this.setPH(2628);
_t1=Go.math_pow10tab.addr(1);  // _t1 = &pow10tab[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/math/pow10.go:35:10 [POINTER]
_t1.store(10); // *t1 = 10:float64 *ssa.Store near /usr/local/go/src/pkg/math/pow10.go:35:10
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/pow10.go:35:10
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Pointer;
var _t4:Array<Float>;
var _t5:Float;
var _t6:Array<Float>;
var _t7:Int;
var _t8:Float;
var _t9:Float;
this.setPH(2630);
_t2=Force.intDiv(_t11,2,0); // _t2 = t11 / 2:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:37:10
this.setPH(2631);
if((_t11<0)||(_t11>=70)) Scheduler.ioor(); // _t3 = &pow10tab[t11] *ssa.IndexAddr @ /usr/local/go/src/pkg/math/pow10.go:38:11 [POINTER]
_t3=Go.math_pow10tab.addr(_t11);  // _t3 = &pow10tab[t11] *ssa.IndexAddr @ /usr/local/go/src/pkg/math/pow10.go:38:11 [POINTER]
_t4=Go.math_pow10tab.load(); // _t4 = *pow10tab *ssa.UnOp near /usr/local/go/src/pkg/math/pow10.go:38:11
if((_t2<0)||(_t2>=70)) Scheduler.ioor();
_t5=_t4[_t2]; // _t5 = t4[t2] *ssa.Index @ /usr/local/go/src/pkg/math/pow10.go:38:25
_t6=Go.math_pow10tab.load(); // _t6 = *pow10tab *ssa.UnOp near /usr/local/go/src/pkg/math/pow10.go:38:25
_t7=(_t11-_t2); // _t7 = t11 - t2 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:38:41
if((_t7<0)||(_t7>=70)) Scheduler.ioor();
_t8=_t6[_t7]; // _t8 = t6[t7] *ssa.Index @ /usr/local/go/src/pkg/math/pow10.go:38:39
_t9=(Force.toFloat(_t5)*Force.toFloat(_t8)); // _t9 = t5 * t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:38:29
_t3.store(_t9); // *t3 = t9 *ssa.Store near /usr/local/go/src/pkg/math/pow10.go:38:29
_t10=(_t11+1); // _t10 = t11 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/pow10.go:38:29
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/pow10.go:38:29
}// end SubFn1
private inline  function SubFn2():Void {
var _t12:Bool;
this.setPH(2629);
_t12=(_t11<70); // _t12 = t11 < 70:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:36:16
_Next=_t12 ? 1 : 2; // if t12 goto 1.for.body else 2.for.done *ssa.If near /usr/local/go/src/pkg/math/pow10.go:36:16
}// end SubFn2
}
#if (!php) private #end class Go_haxegoruntime_init_36_1 extends StackFrameBasis implements StackFrame {  // langgoruntime.go:14:6
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,5009,"Go_haxegoruntime_init_36_1");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _SF1:StackFrame;
var _SF2:StackFrame;
var _SF3:StackFrame;
var _SF4:StackFrame;
var _SF5:StackFrame;
var _SF6:StackFrame;
var _SF7:StackFrame;
var _SF8:StackFrame;
var _SF9:StackFrame;
var _SF10:StackFrame;
var _SF11:StackFrame;
var _t11:{r0:Int,r1:Int}=null;
var _SF12:StackFrame;
var _SF13:StackFrame;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_init_36_1(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_haxegoruntime_init_36_1(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_haxegoruntime_init_36_1
{return new Go_haxegoruntime_init_36_1(gr,_bds);
}
public function run():Go_haxegoruntime_init_36_1 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5009,0);
this.SubFn0();
this.setPH(5011);
Go_haxegoruntime_UTF16toRunes.call(this._goroutine,[],null);
_Next = -1;
return this;
case -1:
this.setLatest(5011,-1);
 // _t1 = UTF16toRunes(nil:[]uint16) *ssa.Call @ langgoruntime.go:16:18 [REGISTER VALUE UN-USED]
this.setPH(5012);
Go_haxegoruntime_UTF8toRunes.call(this._goroutine,[],null);
_Next = -2;
return this;
case -2:
this.setLatest(5012,-2);
 // _t2 = UTF8toRunes(nil:[]byte) *ssa.Call @ langgoruntime.go:17:17 [REGISTER VALUE UN-USED]
this.setPH(5013);
Go_haxegoruntime_Raw2Runes.call(this._goroutine,[],null);
_Next = -3;
return this;
case -3:
this.setLatest(5013,-3);
 // _t3 = Raw2Runes(nil:[]int) *ssa.Call @ langgoruntime.go:18:15 [REGISTER VALUE UN-USED]
this.setPH(5014);
Go_haxegoruntime_RunesToUTF16.call(this._goroutine,[],null);
_Next = -4;
return this;
case -4:
this.setLatest(5014,-4);
 // _t4 = RunesToUTF16(nil:[]rune) *ssa.Call @ langgoruntime.go:19:18 [REGISTER VALUE UN-USED]
this.setPH(5015);
Go_haxegoruntime_RunesToUTF8.call(this._goroutine,[],null);
_Next = -5;
return this;
case -5:
this.setLatest(5015,-5);
 // _t5 = RunesToUTF8(nil:[]rune) *ssa.Call @ langgoruntime.go:20:17 [REGISTER VALUE UN-USED]
this.setPH(5016);
Go_haxegoruntime_Runes2Raw.call(this._goroutine,[],null);
_Next = -6;
return this;
case -6:
this.setLatest(5016,-6);
 // _t6 = Runes2Raw(nil:[]rune) *ssa.Call @ langgoruntime.go:21:15 [REGISTER VALUE UN-USED]
this.setPH(5017);
Go_haxegoruntime_Rune2Raw.call(this._goroutine,[],42);
_Next = -7;
return this;
case -7:
this.setLatest(5017,-7);
 // _t7 = Rune2Raw(42:rune) *ssa.Call @ langgoruntime.go:22:14 [REGISTER VALUE UN-USED]
this.setPH(5018);
Go_haxegoruntime_StringCompare.call(this._goroutine,[],"X","Y");
_Next = -8;
return this;
case -8:
this.setLatest(5018,-8);
 // _t8 = StringCompare("X":string, "Y":string) *ssa.Call @ langgoruntime.go:23:19 [REGISTER VALUE UN-USED]
this.setPH(5020);
Go_utf16_Decode.call(this._goroutine,[],null);
_Next = -9;
return this;
case -9:
this.setLatest(5020,-9);
 // _t9 = unicode/utf16.Decode(nil:[]uint16) *ssa.Call @ langgoruntime.go:25:18 [REGISTER VALUE UN-USED]
this.setPH(5021);
Go_utf8_RuneCount.call(this._goroutine,[],null);
_Next = -10;
return this;
case -10:
this.setLatest(5021,-10);
 // _t10 = unicode/utf8.RuneCount(nil:[]byte) *ssa.Call @ langgoruntime.go:26:20 [REGISTER VALUE UN-USED]
this.setPH(5022);
_SF11=Go_utf8_DecodeRune.call(this._goroutine,[],null);
_Next = -11;
return this;
case -11:
this.setLatest(5022,-11);
_t11=_SF11.res();
 // _t11 = unicode/utf8.DecodeRune(nil:[]byte) *ssa.Call @ langgoruntime.go:27:23
this.SubFn1();
this.setPH(5023);
Go_utf16_Encode.call(this._goroutine,[],null);
_Next = -12;
return this;
case -12:
this.setLatest(5023,-12);
 // _t14 = unicode/utf16.Encode(nil:[]rune) *ssa.Call @ langgoruntime.go:28:18 [REGISTER VALUE UN-USED]
this.setPH(5024);
Go_utf8_RuneLen.call(this._goroutine,[],42);
_Next = -13;
return this;
case -13:
this.setLatest(5024,-13);
 // _t15 = unicode/utf8.RuneLen(42:rune) *ssa.Call @ langgoruntime.go:29:18 [REGISTER VALUE UN-USED]
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near langgoruntime.go:29:18

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
 // _t0 = *ZiLen *ssa.UnOp near langgoruntime.go:29:18 [REGISTER VALUE UN-USED]
}// end SubFn0
private inline  function SubFn1():Void {
 // _t12 = extract t11 #0 *ssa.Extract near langgoruntime.go:29:18 [REGISTER VALUE UN-USED]
 // _t13 = extract t11 #1 *ssa.Extract near langgoruntime.go:29:18 [REGISTER VALUE UN-USED]
}// end SubFn1
}
#if js @:expose("Go_math_IsInf") #end class Go_math_IsInf extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/bits.go:43:6
var p_f:Float;
var p_sign:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float, p_sign : Int) {
super(gr,259,"Go_math_IsInf");
this._bds=_bds;
this.p_f=p_f;
this.p_sign=p_sign;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float, p_sign : Int) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_IsInf(0,[], p_f, p_sign).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float, p_sign : Int) : Bool {
var _sf=new Go_math_IsInf(_gr,[], p_f, p_sign).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float, p_sign : Int) : Go_math_IsInf
{return new Go_math_IsInf(gr,_bds, p_f, p_sign);
}
public function run():Go_math_IsInf {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(259,0);
this.SubFn0();
_Phi=0;
case 1: // binop.rhs
this.setLatest(259,1);
this.SubFn1();
_Phi=1;
case 2: // binop.done
this.setLatest(259,2);
this.setPH(264);
_t2=((_Phi==3)?true:(_Phi==5)?_t5:false); // _t2 = phi [3.cond.true: true:bool, 5.binop.done: t5] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/bits.go:48:37
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:48:2

case 3: // cond.true
this.setLatest(264,3);
this.SubFn2();
_Phi=3;
case 4: // binop.rhs
this.setLatest(264,4);
this.SubFn3();
_Phi=4;
case 5: // binop.done
this.setLatest(264,5);
_t5=((_Phi==1)?false:(_Phi==4)?_t4:false); // _t5 = phi [1.binop.rhs: false:bool, 4.binop.rhs: t4] #&& *ssa.Phi @ /usr/local/go/src/pkg/math/bits.go:48:50
this.SubFn4();
_Phi=5;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=(p_sign>=0); // _t0 = sign >= 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:14
_Next=_t0 ? 3 : 1; // if t0 goto 3.cond.true else 1.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/bits.go:48:14
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
_t1=(p_sign<=0); // _t1 = sign <= 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:45
_Next=_t1 ? 4 : 5; // if t1 goto 4.binop.rhs else 5.binop.done *ssa.If near /usr/local/go/src/pkg/math/bits.go:48:45
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
_t3=(Force.toFloat(p_f)>Force.toFloat(1.7976931348623157e+308)); // _t3 = f > 179769313486231570814527423731704356798100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:24
_Next=_t3 ? 2 : 1; // if t3 goto 2.binop.done else 1.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/bits.go:48:24
}// end SubFn2
private inline  function SubFn3():Void {
_t4=(Force.toFloat(p_f)<Force.toFloat((-1.7976931348623157e+308))); // _t4 = f < -179769313486231570814527423731704356798100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:55
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/bits.go:48:55
}// end SubFn3
private inline  function SubFn4():Void {
_Next=2; // jump 2.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/bits.go:48:55
}// end SubFn4
}
#if (!php) private #end class Go_math_acos extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/asin.go:53:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,405,"Go_math_acos");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_acos(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_acos(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_acos
{return new Go_math_acos(gr,_bds, p_x);
}
public function run():Go_math_acos {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(405,0);
this.setPH(406);
_t0=Math.asin(p_x); // _t0 = Asin(x) *ssa.Call @ /usr/local/go/src/pkg/math/asin.go:54:20
this.SubFn0();
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/asin.go:54:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=(Force.toFloat(1.5707963267948966)-Force.toFloat(_t0)); // _t1 = 314159265358979323846264338327950288419716939937510582097494459/200000000000000000000000000000000000000000000000000000000000000:float64 - t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:54:14
}// end SubFn0
}
#if (!php) private #end class Go_main_main extends StackFrameBasis implements StackFrame {  // interfaces.go:53:6
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,53,"Go_main_main");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Pointer=null;
var _t3:Pointer=null;
var _t4:Pointer=null;
var _t5:Array<Dynamic>=null;
var _t6:Interface=null;
var _SF1:StackFrame;
var _t8:Array<Dynamic>=null;
var _t9:Interface=null;
var _SF2:StackFrame;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_main(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_main_main(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_main_main
{return new Go_main_main(gr,_bds);
}
public function run():Go_main_main {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(53,0);
this.SubFn0();
this.setPH(61);
Go_main_measure.call(this._goroutine,[],_t6);
_Next = -1;
return this;
case -1:
this.setLatest(61,-1);
 // _t7 = measure(t6) *ssa.Call @ interfaces.go:61:9 [REGISTER VALUE UN-USED]
this.SubFn1();
this.setPH(62);
Go_main_measure.call(this._goroutine,[],_t9);
_Next = -2;
return this;
case -2:
this.setLatest(62,-2);
 // _t10 = measure(t9) *ssa.Call @ interfaces.go:62:9 [REGISTER VALUE UN-USED]
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near interfaces.go:62:9

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Pointer;
var _t2:Pointer;
var _t4:Pointer;
var _t5:Array<Dynamic>;
this.setPH(54);
_t0=new Pointer({var _v=new Array<Dynamic>();_v=[0.0,0.0]; _v;}); // _t0 = local square (s) *ssa.Alloc @ interfaces.go:54:2
_t1=_t0.addr(0);  // _t1 = &t0.width [#0] *ssa.FieldAddr near interfaces.go:54:2 [POINTER]
_t1.store(3); // *t1 = 3:float64 *ssa.Store near interfaces.go:54:2
_t2=_t0.addr(1);  // _t2 = &t0.height [#1] *ssa.FieldAddr near interfaces.go:54:2 [POINTER]
_t2.store(4); // *t2 = 4:float64 *ssa.Store near interfaces.go:54:2
this.setPH(55);
_t3=new Pointer({var _v=new Array<Dynamic>();_v=[0.0]; _v;}); // _t3 = local circle (c) *ssa.Alloc @ interfaces.go:55:2
_t4=_t3.addr(0);  // _t4 = &t3.radius [#0] *ssa.FieldAddr near interfaces.go:55:2 [POINTER]
_t4.store(5); // *t4 = 5:float64 *ssa.Store near interfaces.go:55:2
_t5=_t0.load(); // _t5 = *t0 *ssa.UnOp near interfaces.go:55:2
_t6=new Interface(0,_t5); // _t6 = make geometry <- square (t5) *ssa.MakeInterface near interfaces.go:55:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t8:Array<Dynamic>;
_t8=_t3.load(); // _t8 = *t3 *ssa.UnOp near interfaces.go:55:2
_t9=new Interface(1,_t8); // _t9 = make geometry <- circle (t8) *ssa.MakeInterface near interfaces.go:55:2
}// end SubFn1
}
#if (!php) private #end class Go_utf16_init extends StackFrameBasis implements StackFrame { 
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,55,"Go_utf16_init");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_init(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_utf16_init(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_utf16_init
{return new Go_utf16_init(gr,_bds);
}
public function run():Go_utf16_init {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(55,0);
this.SubFn0();

case 1: // init.start
this.setLatest(55,1);
this.SubFn1();

case 2: // init.done
this.setLatest(55,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near interfaces.go:55:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=Go.utf16_init_36_guard.load(); // _t0 = *init$guard *ssa.UnOp near interfaces.go:55:2
_Next=_t0 ? 2 : 1; // if t0 goto 2.init.done else 1.init.start *ssa.If near interfaces.go:55:2
}// end SubFn0
private inline  function SubFn1():Void {
Go.utf16_init_36_guard.store(true); // *init$guard = true:bool *ssa.Store near interfaces.go:55:2
_Next=2; // jump 2.init.done *ssa.Jump near interfaces.go:55:2
}// end SubFn1
}
#if (!php) private #end class Go_math_cos extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sin.go:119:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3826,"Go_math_cos");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:GOint64=null;
var _t9:Float=0.0;
var _t10:GOint64=null;
var _t11:Bool=false;
var _t12:GOint64=null;
var _t13:Float=0.0;
var _t14:GOint64=null;
var _t15:Float=0.0;
var _t16:GOint64=null;
var _t17:Bool=false;
var _t18:GOint64=null;
var _t19:Bool=false;
var _t20:Bool=false;
var _t21:GOint64=null;
var _t22:Bool=false;
var _t23:Bool=false;
var _t24:Bool=false;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Bool=false;
var _t33:Float=0.0;
var _t34:Array<Float>=null;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Array<Float>=null;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Array<Float>=null;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Array<Float>=null;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Array<Float>=null;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Array<Float>=null;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Array<Float>=null;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Float=0.0;
var _t69:Array<Float>=null;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Array<Float>=null;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Float=0.0;
var _t77:Array<Float>=null;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Float=0.0;
var _t81:Array<Float>=null;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Bool=false;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_cos(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_cos(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_cos
{return new Go_math_cos(gr,_bds, p_x);
}
public function run():Go_math_cos {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3826,0);
this.setPH(3835);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(3835,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:128:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(3835,1);
this.setPH(3836);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:129:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/sin.go:129:3

case 2: // switch.next
this.setLatest(3836,2);
this.SubFn1();
_Phi=2;
case 3: // binop.rhs
this.setLatest(3836,3);
this.setPH(3835);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -3;
return this;
case -3:
this.setLatest(3835,-3);
_t3=_SF3.res();
 // _t3 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:128:24
this.SubFn2();
_Phi=3;
case 4: // binop.done
this.setLatest(3835,4);
_t4=((_Phi==0)?true:(_Phi==3)?_t3:false); // _t4 = phi [0.entry: true:bool, 3.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:128:16
this.SubFn3();
_Phi=4;
case 5: // if.then
this.setLatest(3835,5);
this.SubFn4();
_Phi=5;
case 6: // if.done
this.setLatest(3835,6);
this.setPH(3826);
_t6=((_Phi==2)?p_x:(_Phi==5)?_t5:0.0); // _t6 = phi [2.switch.next: x, 5.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:119:10
this.SubFn5();
_Phi=6;
case 7: // if.then
this.setLatest(3826,7);
this.SubFn6();
_Phi=7;
case 8: // if.done
this.setLatest(3826,8);
this.setPH(3845);
_t14=((_Phi==6)?_t8:(_Phi==7)?_t12:GOint64.make(0,0)); // _t14 = phi [6.if.done: t8, 7.if.then: t12] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:138:2
this.setPH(3846);
_t15=((_Phi==6)?_t9:(_Phi==7)?_t13:0.0); // _t15 = phi [6.if.done: t9, 7.if.then: t13] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:139:2
this.SubFn7();
_Phi=8;
case 9: // if.then
this.setLatest(3846,9);
this.SubFn8();
_Phi=9;
case 10: // if.done
this.setLatest(3846,10);
this.setPH(3840);
_t20=((_Phi==8)?false:(_Phi==9)?_t19:false); // _t20 = phi [8.if.done: false:bool, 9.if.then: t19] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:133:2
this.setPH(3845);
_t21=((_Phi==8)?_t16:(_Phi==9)?_t18:GOint64.make(0,0)); // _t21 = phi [8.if.done: t16, 9.if.then: t18] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:138:2
this.SubFn9();
_Phi=10;
case 11: // if.then
this.setLatest(3845,11);
this.SubFn10();
_Phi=11;
case 12: // if.done
this.setLatest(3845,12);
this.setPH(3840);
_t24=((_Phi==10)?_t20:(_Phi==11)?_t23:false); // _t24 = phi [10.if.done: t20, 11.if.then: t23] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:133:2
this.SubFn11();
_Phi=12;
case 13: // if.then
this.setLatest(3840,13);
this.SubFn12();
_Phi=13;
case 14: // if.done
this.setLatest(3840,14);
this.setPH(3846);
_t58=((_Phi==13)?_t57:(_Phi==15)?_t85:0.0); // _t58 = phi [13.if.then: t57, 15.if.else: t85] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:139:2
this.SubFn13();
_Phi=14;
case 15: // if.else
this.setLatest(3846,15);
this.SubFn14();
_Phi=15;
case 16: // cond.false
this.setLatest(3846,16);
this.SubFn15();
_Phi=16;
case 17: // if.then
this.setLatest(3846,17);
this.SubFn16();
_Phi=17;
case 18: // if.done
this.setLatest(3846,18);
_t88=((_Phi==14)?_t58:(_Phi==17)?_t87:0.0); // _t88 = phi [14.if.done: t58, 17.if.then: t87] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:139:2
this.setPH(3872);
_res= _t88;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t88 *ssa.Return @ /usr/local/go/src/pkg/math/sin.go:165:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 4 : 3; // if t0 goto 4.binop.done else 3.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/sin.go:165:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(3841);
_t2=(Force.toFloat(p_x)<Force.toFloat(0)); // _t2 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:134:7
_Next=_t2 ? 5 : 6; // if t2 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:134:7
}// end SubFn1
private inline  function SubFn2():Void {
_Next=4; // jump 4.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:134:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 2; // if t4 goto 1.switch.body else 2.switch.next *ssa.If near /usr/local/go/src/pkg/math/sin.go:134:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(3842);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:135:7
_Next=6; // jump 6.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:135:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Float;
var _t10:GOint64;
var _t11:Bool;
this.setPH(3845);
_t7=(Force.toFloat(_t6)*Force.toFloat(1.2732395447351625)); // _t7 = t6 * 2867080569611329/2251799813685248:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:138:15
_t8=GOint64.ofFloat(_t7); // _t8 = convert int64 <- float64 (t7) *ssa.Convert @ /usr/local/go/src/pkg/math/sin.go:138:12
this.setPH(3846);
_t9=GOint64.toFloat(_t8); // _t9 = convert float64 <- int64 (t8) *ssa.Convert @ /usr/local/go/src/pkg/math/sin.go:139:14
this.setPH(3849);
_t10=Force.toInt64(GOint64.and(_t8,GOint64.make(0x0,0x1))); // _t10 = t8 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:142:6
_t11=(GOint64.compare(_t10,GOint64.make(0x0,0x1))==0); // _t11 = t10 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:142:9
_Next=_t11 ? 7 : 8; // if t11 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:142:9
}// end SubFn5
private inline  function SubFn6():Void {
_t12=Force.toInt64(GOint64.add(_t8,GOint64.make(0x0,0x1))); // _t12 = t8 + 1:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:142:9
_t13=(Force.toFloat(_t9)+Force.toFloat(1)); // _t13 = t9 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:142:9
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:142:9
}// end SubFn6
private inline  function SubFn7():Void {
var _t17:Bool;
_t16=Force.toInt64(GOint64.and(_t14,GOint64.make(0x0,0x7))); // _t16 = t14 & 7:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:142:9
this.setPH(3854);
_t17=(GOint64.compare(_t16,GOint64.make(0x0,0x3))>0); // _t17 = t16 > 3:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:147:7
_Next=_t17 ? 9 : 10; // if t17 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:147:7
}// end SubFn7
private inline  function SubFn8():Void {
_t18=Force.toInt64(GOint64.sub(_t16,GOint64.make(0x0,0x4))); // _t18 = t16 - 4:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:147:7
this.setPH(3856);
_t19=(!false); // _t19 = !false:bool *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:149:10
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:149:10
}// end SubFn8
private inline  function SubFn9():Void {
var _t22:Bool;
this.setPH(3858);
_t22=(GOint64.compare(_t21,GOint64.make(0x0,0x1))>0); // _t22 = t21 > 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:151:7
_Next=_t22 ? 11 : 12; // if t22 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:151:7
}// end SubFn9
private inline  function SubFn10():Void {
this.setPH(3859);
_t23=(!_t20); // _t23 = !t20 *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:152:10
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:152:10
}// end SubFn10
private inline  function SubFn11():Void {
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t28:Float;
var _t29:Float;
var _t32:Bool;
this.setPH(3862);
_t25=(Force.toFloat(_t15)*Force.toFloat(0.7853981256484985)); // _t25 = t15 * 196349531412124633789/250000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:14
_t26=(Force.toFloat(_t6)-Force.toFloat(_t25)); // _t26 = t6 - t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:11
_t27=(Force.toFloat(_t15)*Force.toFloat(3.774894707930798e-08)); // _t27 = t15 * 94372367698269954417/2500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:24
_t28=(Force.toFloat(_t26)-Force.toFloat(_t27)); // _t28 = t26 - t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:21
_t29=(Force.toFloat(_t15)*Force.toFloat(2.6951514290790595e-15)); // _t29 = t15 * 53903028581581190529/20000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:34
_t30=(Force.toFloat(_t28)-Force.toFloat(_t29)); // _t30 = t28 - t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:31
this.setPH(3863);
_t31=(Force.toFloat(_t30)*Force.toFloat(_t30)); // _t31 = t30 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:156:10
this.setPH(3864);
_t32=(GOint64.compare(_t21,GOint64.make(0x0,0x1))==0); // _t32 = t21 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:157:7
_Next=_t32 ? 13 : 16; // if t32 goto 13.if.then else 16.cond.false *ssa.If near /usr/local/go/src/pkg/math/sin.go:157:7
}// end SubFn11
private inline  function SubFn12():Void {
var _t33:Float;
var _t34:Array<Float>;
var _t35:Float;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Array<Float>;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Array<Float>;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Array<Float>;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Array<Float>;
var _t54:Float;
var _t55:Float;
var _t56:Float;
this.setPH(3865);
_t33=(Force.toFloat(_t30)*Force.toFloat(_t31)); // _t33 = t30 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:12
_t34=Go.math__sin.load(); // _t34 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:12
_t35=_t34[0]; // _t35 = t34[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:26
_t36=(Force.toFloat(_t35)*Force.toFloat(_t31)); // _t36 = t35 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:29
_t37=Go.math__sin.load(); // _t37 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:29
_t38=_t37[1]; // _t38 = t37[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:38
_t39=(Force.toFloat(_t36)+Force.toFloat(_t38)); // _t39 = t36 + t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:33
_t40=(Force.toFloat(_t39)*Force.toFloat(_t31)); // _t40 = t39 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:42
_t41=Go.math__sin.load(); // _t41 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:42
_t42=_t41[2]; // _t42 = t41[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:50
_t43=(Force.toFloat(_t40)+Force.toFloat(_t42)); // _t43 = t40 + t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:45
_t44=(Force.toFloat(_t43)*Force.toFloat(_t31)); // _t44 = t43 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:54
_t45=Go.math__sin.load(); // _t45 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:54
_t46=_t45[3]; // _t46 = t45[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:62
_t47=(Force.toFloat(_t44)+Force.toFloat(_t46)); // _t47 = t44 + t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:57
_t48=(Force.toFloat(_t47)*Force.toFloat(_t31)); // _t48 = t47 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:66
_t49=Go.math__sin.load(); // _t49 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:66
_t50=_t49[4]; // _t50 = t49[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:74
_t51=(Force.toFloat(_t48)+Force.toFloat(_t50)); // _t51 = t48 + t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:69
_t52=(Force.toFloat(_t51)*Force.toFloat(_t31)); // _t52 = t51 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:78
_t53=Go.math__sin.load(); // _t53 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:158:78
_t54=_t53[5]; // _t54 = t53[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:158:86
_t55=(Force.toFloat(_t52)+Force.toFloat(_t54)); // _t55 = t52 + t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:81
_t56=(Force.toFloat(_t33)*Force.toFloat(_t55)); // _t56 = t33 * t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:15
_t57=(Force.toFloat(_t30)+Force.toFloat(_t56)); // _t57 = t30 + t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:158:9
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:158:9
}// end SubFn12
private inline  function SubFn13():Void {
_Next=_t24 ? 17 : 18; // if t24 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:158:9
}// end SubFn13
private inline  function SubFn14():Void {
var _t59:Float;
var _t60:Float;
var _t61:Float;
var _t62:Array<Float>;
var _t63:Float;
var _t64:Float;
var _t65:Array<Float>;
var _t66:Float;
var _t67:Float;
var _t68:Float;
var _t69:Array<Float>;
var _t70:Float;
var _t71:Float;
var _t72:Float;
var _t73:Array<Float>;
var _t74:Float;
var _t75:Float;
var _t76:Float;
var _t77:Array<Float>;
var _t78:Float;
var _t79:Float;
var _t80:Float;
var _t81:Array<Float>;
var _t82:Float;
var _t83:Float;
var _t84:Float;
this.setPH(3867);
_t59=(Force.toFloat(0.5)*Force.toFloat(_t31)); // _t59 = 1/2:float64 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:16
_t60=(Force.toFloat(1)-Force.toFloat(_t59)); // _t60 = 1:float64 - t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:11
_t61=(Force.toFloat(_t31)*Force.toFloat(_t31)); // _t61 = t31 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:24
_t62=Go.math__cos.load(); // _t62 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:24
_t63=_t62[0]; // _t63 = t62[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:38
_t64=(Force.toFloat(_t63)*Force.toFloat(_t31)); // _t64 = t63 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:41
_t65=Go.math__cos.load(); // _t65 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:41
_t66=_t65[1]; // _t66 = t65[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:50
_t67=(Force.toFloat(_t64)+Force.toFloat(_t66)); // _t67 = t64 + t66 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:45
_t68=(Force.toFloat(_t67)*Force.toFloat(_t31)); // _t68 = t67 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:54
_t69=Go.math__cos.load(); // _t69 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:54
_t70=_t69[2]; // _t70 = t69[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:62
_t71=(Force.toFloat(_t68)+Force.toFloat(_t70)); // _t71 = t68 + t70 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:57
_t72=(Force.toFloat(_t71)*Force.toFloat(_t31)); // _t72 = t71 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:66
_t73=Go.math__cos.load(); // _t73 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:66
_t74=_t73[3]; // _t74 = t73[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:74
_t75=(Force.toFloat(_t72)+Force.toFloat(_t74)); // _t75 = t72 + t74 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:69
_t76=(Force.toFloat(_t75)*Force.toFloat(_t31)); // _t76 = t75 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:78
_t77=Go.math__cos.load(); // _t77 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:78
_t78=_t77[4]; // _t78 = t77[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:86
_t79=(Force.toFloat(_t76)+Force.toFloat(_t78)); // _t79 = t76 + t78 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:81
_t80=(Force.toFloat(_t79)*Force.toFloat(_t31)); // _t80 = t79 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:90
_t81=Go.math__cos.load(); // _t81 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:160:90
_t82=_t81[5]; // _t82 = t81[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:160:98
_t83=(Force.toFloat(_t80)+Force.toFloat(_t82)); // _t83 = t80 + t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:93
_t84=(Force.toFloat(_t61)*Force.toFloat(_t83)); // _t84 = t61 * t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:27
_t85=(Force.toFloat(_t60)+Force.toFloat(_t84)); // _t85 = t60 + t84 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:160:20
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:160:20
}// end SubFn14
private inline  function SubFn15():Void {
var _t86:Bool;
this.setPH(3864);
_t86=(GOint64.compare(_t21,GOint64.make(0x0,0x2))==0); // _t86 = t21 == 2:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:157:17
_Next=_t86 ? 13 : 15; // if t86 goto 13.if.then else 15.if.else *ssa.If near /usr/local/go/src/pkg/math/sin.go:157:17
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(3870);
_t87=(-Force.toFloat(_t58)); // _t87 = -t58 *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:163:7
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:163:7
}// end SubFn16
}
#if (!php) private #end class Go__star_main_dot_circle_area extends StackFrameBasis implements StackFrame {  // interfaces.go:36:17
var p_recv:Pointer;
public function new(gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) {
super(gr,36,"Go__star_main_dot_circle_area");
this._bds=_bds;
this.p_recv=p_recv;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Array<Dynamic>=null;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_recv : Pointer) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go__star_main_dot_circle_area(0,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_recv : Pointer) : Float {
var _sf=new Go__star_main_dot_circle_area(_gr,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) : Go__star_main_dot_circle_area
{return new Go__star_main_dot_circle_area(gr,_bds, p_recv);
}
public function run():Go__star_main_dot_circle_area {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(36,0);
this.SubFn0();
_SF1=Go_main_dot_circle_area.call(this._goroutine,[],Deep.copy(_t0));
_Next = -1;
return this;
case -1:
this.setLatest(36,-1);
_t1=_SF1.res();
 // _t1 = (main.circle).area(t0) *ssa.Call near /usr/local/go/src/pkg/math/sin.go:163:7
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return near /usr/local/go/src/pkg/math/sin.go:163:7

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=p_recv.load(); // _t0 = *recv *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:163:7
}// end SubFn0
}
#if (!php) private #end class Go_math_sinPi extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/lgamma.go:324:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4255,"Go_math_sinPi");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Float=0.0;
var _SF1:StackFrame;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _SF2:StackFrame;
var _t4:Float=0.0;
var _t5:Bool=false;
var _SF3:StackFrame;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Int=0;
var _t9:Float=0.0;
var _t10:Int=0;
var _t11:Bool=false;
var _t12:Bool=false;
var _t13:Bool=false;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _SF4:StackFrame;
var _t16:GOint64=null;
var _t17:GOint64=null;
var _t18:Int=0;
var _t19:Float=0.0;
var _t20:Int=0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _SF5:StackFrame;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _SF6:StackFrame;
var _t27:Float=0.0;
var _t28:Bool=false;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _SF7:StackFrame;
var _t31:Float=0.0;
var _t32:Bool=false;
var _t33:Bool=false;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _SF8:StackFrame;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Bool=false;
var _t39:Bool=false;
var _t40:Bool=false;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _SF9:StackFrame;
var _t43:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_sinPi(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_sinPi(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_sinPi
{return new Go_math_sinPi(gr,_bds, p_x);
}
public function run():Go_math_sinPi {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4255,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(4255,1);
this.SubFn1();
this.setPH(4261);
_t2=Math.sin(_t1); // _t2 = Sin(t1) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:330:14
this.SubFn2();
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:330:3

case 2: // if.done
this.setLatest(4261,2);
this.setPH(4265);
_t4=Math.ffloor(p_x); // _t4 = Floor(x) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:334:12
this.SubFn3();
_Phi=2;
case 3: // if.then
this.setLatest(4265,3);
this.setPH(4268);
_SF3=Go_math_mod.call(this._goroutine,[],p_x,2);
_Next = -3;
return this;
case -3:
this.setLatest(4268,-3);
_t6=_SF3.res();
 // _t6 = Mod(x, 2:float64) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:337:10
this.SubFn4();
_Phi=3;
case 4: // if.done
this.setLatest(4268,4);
this.setPH(4255);
_t9=((_Phi==3)?_t6:(_Phi==6)?0:(_Phi==9)?_t19:0.0); // _t9 = phi [3.if.then: t6, 6.if.then: 0:float64, 9.if.done: t19] #x *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:324:12
this.setPH(4266);
_t10=((_Phi==3)?_t8:(_Phi==6)?0:(_Phi==9)?_t20:0); // _t10 = phi [3.if.then: t8, 6.if.then: 0:int, 9.if.done: t20] #n *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:335:6
this.SubFn5();
_Phi=4;
case 5: // if.else
this.setLatest(4266,5);
this.SubFn6();
_Phi=5;
case 6: // if.then
this.setLatest(4266,6);
this.SubFn7();
_Phi=6;
case 7: // if.else
this.setLatest(4266,7);
this.SubFn8();
_Phi=7;
case 8: // if.then
this.setLatest(4266,8);
this.SubFn9();
_Phi=8;
case 9: // if.done
this.setLatest(4266,9);
this.setPH(4265);
_t15=((_Phi==7)?_t4:(_Phi==8)?_t14:0.0); // _t15 = phi [7.if.else: t4, 8.if.then: t14] #z *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:334:2
this.setPH(4278);
_SF4=Go_math_Float64bits.call(this._goroutine,[],_t15);
_Next = -4;
return this;
case -4:
this.setLatest(4278,-4);
_t16=_SF4.res();
 // _t16 = Float64bits(t15) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:347:27
this.SubFn10();
_Phi=9;
case 10: // switch.done
this.setLatest(4278,10);
this.setPH(4255);
_t21=((_Phi==11)?_t24:(_Phi==12)?_t27:(_Phi==14)?_t31:(_Phi==17)?_t37:(_Phi==21)?_t43:0.0); // _t21 = phi [11.switch.body: t24, 12.switch.body: t27, 14.switch.body: t31, 17.switch.body: t37, 21.switch.next: t43] #x *ssa.Phi @ /usr/local/go/src/pkg/math/lgamma.go:324:12
this.SubFn11();
this.setPH(4295);
_res= _t22;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t22 *ssa.Return @ /usr/local/go/src/pkg/math/lgamma.go:364:2

case 11: // switch.body
this.setLatest(4295,11);
this.SubFn12();
this.setPH(4285);
_t24=Math.sin(_t23); // _t24 = Sin(t23) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:354:10
this.SubFn13();
_Phi=11;
case 12: // switch.body
this.setLatest(4285,12);
this.SubFn14();
this.setPH(4287);
_t27=Math.cos(_t26); // _t27 = Cos(t26) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:356:10
this.SubFn15();
_Phi=12;
case 13: // switch.next
this.setLatest(4287,13);
this.SubFn16();
_Phi=13;
case 14: // switch.body
this.setLatest(4287,14);
this.SubFn17();
this.setPH(4289);
_t31=Math.sin(_t30); // _t31 = Sin(t30) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:358:10
this.SubFn18();
_Phi=14;
case 15: // switch.next
this.setLatest(4289,15);
this.SubFn19();
_Phi=15;
case 16: // switch.next
this.setLatest(4289,16);
this.SubFn20();
_Phi=16;
case 17: // switch.body
this.setLatest(4289,17);
this.SubFn21();
this.setPH(4291);
_t36=Math.cos(_t35); // _t36 = Cos(t35) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:360:11
this.SubFn22();
_Phi=17;
case 18: // switch.next
this.setLatest(4291,18);
this.SubFn23();
_Phi=18;
case 19: // switch.next
this.setLatest(4291,19);
this.SubFn24();
_Phi=19;
case 20: // switch.next
this.setLatest(4291,20);
this.SubFn25();
_Phi=20;
case 21: // switch.next
this.setLatest(4291,21);
this.SubFn26();
this.setPH(4293);
_t43=Math.sin(_t42); // _t43 = Sin(t42) *ssa.Call @ /usr/local/go/src/pkg/math/lgamma.go:362:10
this.SubFn27();
_Phi=21;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4260);
_t0=(Force.toFloat(p_x)<Force.toFloat(0.25)); // _t0 = x < 1/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:329:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:329:7
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(4261);
_t1=(Force.toFloat(3.141592653589793)*Force.toFloat(p_x)); // _t1 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:330:18
}// end SubFn1
private inline  function SubFn2():Void {
_t3=(-Force.toFloat(_t2)); // _t3 = -t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:330:10
}// end SubFn2
private inline  function SubFn3():Void {
var _t5:Bool;
this.setPH(4267);
_t5=(Force.toFloat(_t4)!=Force.toFloat(p_x)); // _t5 = t4 != x *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:336:7
_Next=_t5 ? 3 : 5; // if t5 goto 3.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:336:7
}// end SubFn3
private inline  function SubFn4():Void {
var _t7:Float;
this.setPH(4269);
_t7=(Force.toFloat(_t6)*Force.toFloat(4)); // _t7 = t6 * 4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:338:13
_t8={var _f:Float=_t7;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t8 = convert int <- float64 (t7) *ssa.Convert @ /usr/local/go/src/pkg/math/lgamma.go:338:10
_Next=4; // jump 4.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:338:10
}// end SubFn4
private inline  function SubFn5():Void {
var _t11:Bool;
_t11=(_t10==0); // _t11 = t10 == 0:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:338:10
_Next=_t11 ? 11 : 13; // if t11 goto 11.switch.body else 13.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:338:10
}// end SubFn5
private inline  function SubFn6():Void {
var _t12:Bool;
this.setPH(4271);
_t12=(Force.toFloat(p_x)>=Force.toFloat(9.007199254740992e+15)); // _t12 = x >= 9007199254740992:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:340:8
_Next=_t12 ? 6 : 7; // if t12 goto 6.if.then else 7.if.else *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:340:8
}// end SubFn6
private inline  function SubFn7():Void {
_Next=4; // jump 4.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:340:8
}// end SubFn7
private inline  function SubFn8():Void {
var _t13:Bool;
this.setPH(4275);
_t13=(Force.toFloat(p_x)<Force.toFloat(4.503599627370496e+15)); // _t13 = x < 4503599627370496:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:344:9
_Next=_t13 ? 8 : 9; // if t13 goto 8.if.then else 9.if.done *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:344:9
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(4276);
_t14=(Force.toFloat(p_x)+Force.toFloat(4.503599627370496e+15)); // _t14 = x + 4503599627370496:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:345:11
_Next=9; // jump 9.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:345:11
}// end SubFn9
private inline  function SubFn10():Void {
var _t17:GOint64;
this.setPH(4278);
_t17=Force.toUint64(GOint64.and(GOint64.make(0x0,0x1),_t16)); // _t17 = 1:uint64 & t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:347:14
_t18=GOint64.toInt(_t17); // _t18 = convert int <- uint64 (t17) *ssa.Convert @ /usr/local/go/src/pkg/math/lgamma.go:347:11
this.setPH(4279);
_t19=_t18; // _t19 = convert float64 <- int (t18) *ssa.Convert @ /usr/local/go/src/pkg/math/lgamma.go:348:15
_t20=(_t18<<GOint64.toInt(GOint64.make(0x0,0x2))); // _t20 = t18 << 2:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:348:15
_Next=4; // jump 4.if.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:348:15
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(4295);
_t22=(-Force.toFloat(_t21)); // _t22 = -t21 *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:364:9
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(4285);
_t23=(Force.toFloat(3.141592653589793)*Force.toFloat(_t9)); // _t23 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:354:14
}// end SubFn12
private inline  function SubFn13():Void {
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:354:14
}// end SubFn13
private inline  function SubFn14():Void {
var _t25:Float;
this.setPH(4287);
_t25=(Force.toFloat(0.5)-Force.toFloat(_t9)); // _t25 = 1/2:float64 - t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:356:21
_t26=(Force.toFloat(3.141592653589793)*Force.toFloat(_t25)); // _t26 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:356:14
}// end SubFn14
private inline  function SubFn15():Void {
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:356:14
}// end SubFn15
private inline  function SubFn16():Void {
var _t28:Bool;
_t28=(_t10==1); // _t28 = t10 == 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:356:14
_Next=_t28 ? 12 : 15; // if t28 goto 12.switch.body else 15.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:356:14
}// end SubFn16
private inline  function SubFn17():Void {
var _t29:Float;
this.setPH(4289);
_t29=(Force.toFloat(1)-Force.toFloat(_t9)); // _t29 = 1:float64 - t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:358:19
_t30=(Force.toFloat(3.141592653589793)*Force.toFloat(_t29)); // _t30 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:358:14
}// end SubFn17
private inline  function SubFn18():Void {
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:358:14
}// end SubFn18
private inline  function SubFn19():Void {
var _t32:Bool;
_t32=(_t10==2); // _t32 = t10 == 2:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:358:14
_Next=_t32 ? 12 : 16; // if t32 goto 12.switch.body else 16.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:358:14
}// end SubFn19
private inline  function SubFn20():Void {
var _t33:Bool;
_t33=(_t10==3); // _t33 = t10 == 3:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:358:14
_Next=_t33 ? 14 : 18; // if t33 goto 14.switch.body else 18.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:358:14
}// end SubFn20
private inline  function SubFn21():Void {
var _t34:Float;
this.setPH(4291);
_t34=(Force.toFloat(_t9)-Force.toFloat(1.5)); // _t34 = t9 - 3/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:360:20
_t35=(Force.toFloat(3.141592653589793)*Force.toFloat(_t34)); // _t35 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:360:15
}// end SubFn21
private inline  function SubFn22():Void {
_t37=(-Force.toFloat(_t36)); // _t37 = -t36 *ssa.UnOp @ /usr/local/go/src/pkg/math/lgamma.go:360:7
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:360:7
}// end SubFn22
private inline  function SubFn23():Void {
var _t38:Bool;
_t38=(_t10==4); // _t38 = t10 == 4:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:360:7
_Next=_t38 ? 14 : 19; // if t38 goto 14.switch.body else 19.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:360:7
}// end SubFn23
private inline  function SubFn24():Void {
var _t39:Bool;
_t39=(_t10==5); // _t39 = t10 == 5:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:360:7
_Next=_t39 ? 17 : 20; // if t39 goto 17.switch.body else 20.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:360:7
}// end SubFn24
private inline  function SubFn25():Void {
var _t40:Bool;
_t40=(_t10==6); // _t40 = t10 == 6:int *ssa.BinOp near /usr/local/go/src/pkg/math/lgamma.go:360:7
_Next=_t40 ? 17 : 21; // if t40 goto 17.switch.body else 21.switch.next *ssa.If near /usr/local/go/src/pkg/math/lgamma.go:360:7
}// end SubFn25
private inline  function SubFn26():Void {
var _t41:Float;
this.setPH(4293);
_t41=(Force.toFloat(_t9)-Force.toFloat(2)); // _t41 = t9 - 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:362:19
_t42=(Force.toFloat(3.141592653589793)*Force.toFloat(_t41)); // _t42 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:362:14
}// end SubFn26
private inline  function SubFn27():Void {
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/lgamma.go:362:14
}// end SubFn27
}
#if (!php) private #end class Go_math_dim extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/dim.go:15:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,1657,"Go_math_dim");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Float=0.0;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_dim(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_dim(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_dim
{return new Go_math_dim(gr,_bds, p_x, p_y);
}
public function run():Go_math_dim {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1657,0);
this.SubFn0();
this.setPH(1658);
_SF1=Go_math_max.call(this._goroutine,[],_t0,0);
_Next = -1;
return this;
case -1:
this.setLatest(1658,-1);
_t1=_SF1.res();
 // _t1 = max(t0, 0:float64) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:16:12
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:16:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=(Force.toFloat(p_x)-Force.toFloat(p_y)); // _t0 = x - y *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:16:14
}// end SubFn0
}
#if (!php) private #end class Go_math_atan extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/atan.go:97:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,573,"Go_math_atan");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _SF2:StackFrame;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_atan(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_atan(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_atan
{return new Go_math_atan(gr,_bds, p_x);
}
public function run():Go_math_atan {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(573,0);
this.SubFn0();

case 1: // if.then
this.setLatest(573,1);
this.setPH(575);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:99:3

case 2: // if.done
this.setLatest(575,2);
this.SubFn1();

case 3: // if.then
this.setLatest(575,3);
this.setPH(578);
_SF1=Go_math_satan.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(578,-1);
_t2=_SF1.res();
 // _t2 = satan(x) *ssa.Call @ /usr/local/go/src/pkg/math/atan.go:102:15
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:102:3

case 4: // if.done
this.setLatest(578,4);
this.SubFn2();
this.setPH(580);
_SF2=Go_math_satan.call(this._goroutine,[],_t3);
_Next = -2;
return this;
case -2:
this.setLatest(580,-2);
_t4=_SF2.res();
 // _t4 = satan(t3) *ssa.Call @ /usr/local/go/src/pkg/math/atan.go:104:15
this.SubFn3();
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:104:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(574);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:98:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/atan.go:98:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(577);
_t1=(Force.toFloat(p_x)>Force.toFloat(0)); // _t1 = x > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:101:7
_Next=_t1 ? 3 : 4; // if t1 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/atan.go:101:7
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(580);
_t3=(-Force.toFloat(p_x)); // _t3 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/atan.go:104:16
}// end SubFn2
private inline  function SubFn3():Void {
_t5=(-Force.toFloat(_t4)); // _t5 = -t4 *ssa.UnOp @ /usr/local/go/src/pkg/math/atan.go:104:9
}// end SubFn3
}
#if js @:expose("Go_utf16_DecodeRune") #end class Go_utf16_DecodeRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf16/utf16.go:37:6
var p_r1:Int;
var p_r2:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_r1 : Int, p_r2 : Int) {
super(gr,5173,"Go_utf16_DecodeRune");
this._bds=_bds;
this.p_r1=p_r1;
this.p_r2=p_r2;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Int=0;
var _t2:Int=0;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Bool=false;
var _t7:Bool=false;
var _t8:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_r1 : Int, p_r2 : Int) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_DecodeRune(0,[], p_r1, p_r2).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r1 : Int, p_r2 : Int) : Int {
var _sf=new Go_utf16_DecodeRune(_gr,[], p_r1, p_r2).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r1 : Int, p_r2 : Int) : Go_utf16_DecodeRune
{return new Go_utf16_DecodeRune(gr,_bds, p_r1, p_r2);
}
public function run():Go_utf16_DecodeRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5173,0);
this.SubFn0();

case 1: // if.then
this.setLatest(5173,1);
this.SubFn1();
this.setPH(5175);
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:3

case 2: // if.done
this.setLatest(5175,2);
this.setPH(5177);
_res= 65533;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:41:2

case 3: // cond.true
this.setLatest(5177,3);
this.SubFn2();

case 4: // cond.true
this.setLatest(5177,4);
this.SubFn3();

case 5: // cond.true
this.setLatest(5177,5);
this.SubFn4();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(5174);
_t0=(55296<=p_r1); // _t0 = 55296:rune <= r1 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:11
_Next=_t0 ? 5 : 2; // if t0 goto 5.cond.true else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:11
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Int;
var _t2:Int;
var _t3:Int;
var _t4:Int;
this.setPH(5175);
_t1=Force.toInt32((p_r1-55296)); // _t1 = r1 - 55296:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:19
_t2=(_t1<<GOint64.toInt(GOint64.make(0x0,0xa))); // _t2 = t1 << 10:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:26
_t3=Force.toInt32((p_r2-56320)); // _t3 = r2 - 56320:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:43
_t4=Force.toInt32((_t2|_t3)); // _t4 = t2 | t3 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:31
_t5=Force.toInt32((_t4+65536)); // _t5 = t4 + 65536:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:39:52
}// end SubFn1
private inline  function SubFn2():Void {
var _t6:Bool;
this.setPH(5174);
_t6=(p_r2<57344); // _t6 = r2 < 57344:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:52
_Next=_t6 ? 1 : 2; // if t6 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:52
}// end SubFn2
private inline  function SubFn3():Void {
var _t7:Bool;
_t7=(56320<=p_r2); // _t7 = 56320:rune <= r2 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:40
_Next=_t7 ? 3 : 2; // if t7 goto 3.cond.true else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:40
}// end SubFn3
private inline  function SubFn4():Void {
var _t8:Bool;
_t8=(p_r1<56320); // _t8 = r1 < 56320:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:23
_Next=_t8 ? 4 : 2; // if t8 goto 4.cond.true else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:38:23
}// end SubFn4
}
#if js @:expose("Go_math_Copysign") #end class Go_math_Copysign extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/copysign.go:9:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,641,"Go_math_Copysign");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:GOint64=null;
var _t1:GOint64=null;
var _SF2:StackFrame;
var _t2:GOint64=null;
var _t3:GOint64=null;
var _t4:GOint64=null;
var _SF3:StackFrame;
var _t5:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Copysign(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_Copysign(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_Copysign
{return new Go_math_Copysign(gr,_bds, p_x, p_y);
}
public function run():Go_math_Copysign {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(641,0);
this.setPH(643);
_SF1=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(643,-1);
_t0=_SF1.res();
 // _t0 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/copysign.go:11:36
this.SubFn0();
_SF2=Go_math_Float64bits.call(this._goroutine,[],p_y);
_Next = -2;
return this;
case -2:
this.setLatest(643,-2);
_t2=_SF2.res();
 // _t2 = Float64bits(y) *ssa.Call @ /usr/local/go/src/pkg/math/copysign.go:11:59
this.SubFn1();
_SF3=Go_math_Float64frombits.call(this._goroutine,[],_t4);
_Next = -3;
return this;
case -3:
this.setLatest(643,-3);
_t5=_SF3.res();
 // _t5 = Float64frombits(t4) *ssa.Call @ /usr/local/go/src/pkg/math/copysign.go:11:24
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/copysign.go:11:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=Force.toUint64(GOint64.and(_t0,GOint64.xor(GOint64.make(0x80000000,0x0),GOint64.make(-1,-1)))); // _t1 = t0 &^ 9223372036854775808:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/copysign.go:11:39
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:GOint64;
_t3=Force.toUint64(GOint64.and(_t2,GOint64.make(0x80000000,0x0))); // _t3 = t2 & 9223372036854775808:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/copysign.go:11:62
_t4=Force.toUint64(GOint64.or(_t1,_t3)); // _t4 = t1 | t3 *ssa.BinOp @ /usr/local/go/src/pkg/math/copysign.go:11:46
}// end SubFn1
}
#if (!php) private #end class Go_math_sin extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sin.go:176:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3883,"Go_math_sin");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Bool=false;
var _t9:Float=0.0;
var _t10:GOint64=null;
var _t11:Float=0.0;
var _t12:GOint64=null;
var _t13:Bool=false;
var _t14:GOint64=null;
var _t15:Float=0.0;
var _t16:GOint64=null;
var _t17:Float=0.0;
var _t18:GOint64=null;
var _t19:Bool=false;
var _t20:Bool=false;
var _t21:GOint64=null;
var _t22:Bool=false;
var _t23:GOint64=null;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Bool=false;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Array<Float>=null;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Array<Float>=null;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Array<Float>=null;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Array<Float>=null;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Array<Float>=null;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Array<Float>=null;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Array<Float>=null;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Array<Float>=null;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Array<Float>=null;
var _t73:Float=0.0;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Array<Float>=null;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Array<Float>=null;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Bool=false;
var _t86:Float=0.0;
var _t87:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_sin(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_sin(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_sin
{return new Go_math_sin(gr,_bds, p_x);
}
public function run():Go_math_sin {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3883,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(3883,1);
this.setPH(3893);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/sin.go:186:3

case 2: // switch.body
this.setLatest(3893,2);
this.setPH(3895);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:188:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/sin.go:188:3

case 3: // switch.next
this.setLatest(3895,3);
this.setPH(3894);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(3894,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:187:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(3894,4);
this.setPH(3892);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(3892,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/sin.go:185:22
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(3892,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:185:14
this.SubFn3();
_Phi=5;
case 6: // switch.next
this.setLatest(3892,6);
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(3892,7);
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(3892,8);
this.setPH(3883);
_t7=((_Phi==6)?p_x:(_Phi==7)?_t6:0.0); // _t7 = phi [6.switch.next: x, 7.if.then: t6] #x *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:176:10
this.setPH(3899);
_t8=((_Phi==6)?false:(_Phi==7)?true:false); // _t8 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:192:2
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(3899,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(3899,10);
this.setPH(3905);
_t16=((_Phi==8)?_t10:(_Phi==9)?_t14:GOint64.make(0,0)); // _t16 = phi [8.if.done: t10, 9.if.then: t14] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:198:2
this.setPH(3906);
_t17=((_Phi==8)?_t11:(_Phi==9)?_t15:0.0); // _t17 = phi [8.if.done: t11, 9.if.then: t15] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:199:2
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(3906,11);
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(3906,12);
this.setPH(3899);
_t22=((_Phi==10)?_t8:(_Phi==11)?_t20:false); // _t22 = phi [10.if.done: t8, 11.if.then: t20] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:192:2
this.setPH(3905);
_t23=((_Phi==10)?_t18:(_Phi==11)?_t21:GOint64.make(0,0)); // _t23 = phi [10.if.done: t18, 11.if.then: t21] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:198:2
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(3905,13);
this.SubFn11();
_Phi=13;
case 14: // if.done
this.setLatest(3905,14);
this.setPH(3906);
_t59=((_Phi==13)?_t58:(_Phi==15)?_t84:0.0); // _t59 = phi [13.if.then: t58, 15.if.else: t84] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:199:2
this.SubFn12();
_Phi=14;
case 15: // if.else
this.setLatest(3906,15);
this.SubFn13();
_Phi=15;
case 16: // cond.false
this.setLatest(3906,16);
this.SubFn14();
_Phi=16;
case 17: // if.then
this.setLatest(3906,17);
this.SubFn15();
_Phi=17;
case 18: // if.done
this.setLatest(3906,18);
_t87=((_Phi==14)?_t59:(_Phi==17)?_t86:0.0); // _t87 = phi [14.if.done: t59, 17.if.then: t86] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sin.go:199:2
this.setPH(3930);
_res= _t87;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t87 *ssa.Return @ /usr/local/go/src/pkg/math/sin.go:223:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3892);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:185:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/sin.go:185:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 6; // if t2 goto 2.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/sin.go:185:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:185:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/sin.go:185:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(3900);
_t5=(Force.toFloat(p_x)<Force.toFloat(0)); // _t5 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:193:7
_Next=_t5 ? 7 : 8; // if t5 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:193:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(3901);
_t6=(-Force.toFloat(p_x)); // _t6 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:194:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:194:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Float;
var _t12:GOint64;
var _t13:Bool;
this.setPH(3905);
_t9=(Force.toFloat(_t7)*Force.toFloat(1.2732395447351625)); // _t9 = t7 * 2867080569611329/2251799813685248:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:198:15
_t10=GOint64.ofFloat(_t9); // _t10 = convert int64 <- float64 (t9) *ssa.Convert @ /usr/local/go/src/pkg/math/sin.go:198:12
this.setPH(3906);
_t11=GOint64.toFloat(_t10); // _t11 = convert float64 <- int64 (t10) *ssa.Convert @ /usr/local/go/src/pkg/math/sin.go:199:14
this.setPH(3909);
_t12=Force.toInt64(GOint64.and(_t10,GOint64.make(0x0,0x1))); // _t12 = t10 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:202:6
_t13=(GOint64.compare(_t12,GOint64.make(0x0,0x1))==0); // _t13 = t12 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:202:9
_Next=_t13 ? 9 : 10; // if t13 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:202:9
}// end SubFn6
private inline  function SubFn7():Void {
_t14=Force.toInt64(GOint64.add(_t10,GOint64.make(0x0,0x1))); // _t14 = t10 + 1:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:202:9
_t15=(Force.toFloat(_t11)+Force.toFloat(1)); // _t15 = t11 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:202:9
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:202:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t19:Bool;
_t18=Force.toInt64(GOint64.and(_t16,GOint64.make(0x0,0x7))); // _t18 = t16 & 7:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:202:9
this.setPH(3915);
_t19=(GOint64.compare(_t18,GOint64.make(0x0,0x3))>0); // _t19 = t18 > 3:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:208:7
_Next=_t19 ? 11 : 12; // if t19 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:208:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(3916);
_t20=(!_t8); // _t20 = !t8 *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:209:10
_t21=Force.toInt64(GOint64.sub(_t18,GOint64.make(0x0,0x4))); // _t21 = t18 - 4:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sin.go:209:10
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:209:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t28:Float;
var _t31:Bool;
this.setPH(3920);
_t24=(Force.toFloat(_t17)*Force.toFloat(0.7853981256484985)); // _t24 = t17 * 196349531412124633789/250000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:14
_t25=(Force.toFloat(_t7)-Force.toFloat(_t24)); // _t25 = t7 - t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:11
_t26=(Force.toFloat(_t17)*Force.toFloat(3.774894707930798e-08)); // _t26 = t17 * 94372367698269954417/2500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:24
_t27=(Force.toFloat(_t25)-Force.toFloat(_t26)); // _t27 = t25 - t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:21
_t28=(Force.toFloat(_t17)*Force.toFloat(2.6951514290790595e-15)); // _t28 = t17 * 53903028581581190529/20000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:34
_t29=(Force.toFloat(_t27)-Force.toFloat(_t28)); // _t29 = t27 - t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:31
this.setPH(3921);
_t30=(Force.toFloat(_t29)*Force.toFloat(_t29)); // _t30 = t29 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:214:10
this.setPH(3922);
_t31=(GOint64.compare(_t23,GOint64.make(0x0,0x1))==0); // _t31 = t23 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:215:7
_Next=_t31 ? 13 : 16; // if t31 goto 13.if.then else 16.cond.false *ssa.If near /usr/local/go/src/pkg/math/sin.go:215:7
}// end SubFn10
private inline  function SubFn11():Void {
var _t32:Float;
var _t33:Float;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Float;
var _t38:Array<Float>;
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Array<Float>;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Array<Float>;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Array<Float>;
var _t51:Float;
var _t52:Float;
var _t53:Float;
var _t54:Array<Float>;
var _t55:Float;
var _t56:Float;
var _t57:Float;
this.setPH(3923);
_t32=(Force.toFloat(0.5)*Force.toFloat(_t30)); // _t32 = 1/2:float64 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:16
_t33=(Force.toFloat(1)-Force.toFloat(_t32)); // _t33 = 1:float64 - t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:11
_t34=(Force.toFloat(_t30)*Force.toFloat(_t30)); // _t34 = t30 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:24
_t35=Go.math__cos.load(); // _t35 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:24
_t36=_t35[0]; // _t36 = t35[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:38
_t37=(Force.toFloat(_t36)*Force.toFloat(_t30)); // _t37 = t36 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:41
_t38=Go.math__cos.load(); // _t38 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:41
_t39=_t38[1]; // _t39 = t38[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:50
_t40=(Force.toFloat(_t37)+Force.toFloat(_t39)); // _t40 = t37 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:45
_t41=(Force.toFloat(_t40)*Force.toFloat(_t30)); // _t41 = t40 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:54
_t42=Go.math__cos.load(); // _t42 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:54
_t43=_t42[2]; // _t43 = t42[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:62
_t44=(Force.toFloat(_t41)+Force.toFloat(_t43)); // _t44 = t41 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:57
_t45=(Force.toFloat(_t44)*Force.toFloat(_t30)); // _t45 = t44 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:66
_t46=Go.math__cos.load(); // _t46 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:66
_t47=_t46[3]; // _t47 = t46[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:74
_t48=(Force.toFloat(_t45)+Force.toFloat(_t47)); // _t48 = t45 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:69
_t49=(Force.toFloat(_t48)*Force.toFloat(_t30)); // _t49 = t48 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:78
_t50=Go.math__cos.load(); // _t50 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:78
_t51=_t50[4]; // _t51 = t50[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:86
_t52=(Force.toFloat(_t49)+Force.toFloat(_t51)); // _t52 = t49 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:81
_t53=(Force.toFloat(_t52)*Force.toFloat(_t30)); // _t53 = t52 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:90
_t54=Go.math__cos.load(); // _t54 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:216:90
_t55=_t54[5]; // _t55 = t54[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:216:98
_t56=(Force.toFloat(_t53)+Force.toFloat(_t55)); // _t56 = t53 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:93
_t57=(Force.toFloat(_t34)*Force.toFloat(_t56)); // _t57 = t34 * t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:27
_t58=(Force.toFloat(_t33)+Force.toFloat(_t57)); // _t58 = t33 + t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:216:20
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:216:20
}// end SubFn11
private inline  function SubFn12():Void {
_Next=_t22 ? 17 : 18; // if t22 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/sin.go:216:20
}// end SubFn12
private inline  function SubFn13():Void {
var _t60:Float;
var _t61:Array<Float>;
var _t62:Float;
var _t63:Float;
var _t64:Array<Float>;
var _t65:Float;
var _t66:Float;
var _t67:Float;
var _t68:Array<Float>;
var _t69:Float;
var _t70:Float;
var _t71:Float;
var _t72:Array<Float>;
var _t73:Float;
var _t74:Float;
var _t75:Float;
var _t76:Array<Float>;
var _t77:Float;
var _t78:Float;
var _t79:Float;
var _t80:Array<Float>;
var _t81:Float;
var _t82:Float;
var _t83:Float;
this.setPH(3925);
_t60=(Force.toFloat(_t29)*Force.toFloat(_t30)); // _t60 = t29 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:12
_t61=Go.math__sin.load(); // _t61 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:12
_t62=_t61[0]; // _t62 = t61[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:26
_t63=(Force.toFloat(_t62)*Force.toFloat(_t30)); // _t63 = t62 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:29
_t64=Go.math__sin.load(); // _t64 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:29
_t65=_t64[1]; // _t65 = t64[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:38
_t66=(Force.toFloat(_t63)+Force.toFloat(_t65)); // _t66 = t63 + t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:33
_t67=(Force.toFloat(_t66)*Force.toFloat(_t30)); // _t67 = t66 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:42
_t68=Go.math__sin.load(); // _t68 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:42
_t69=_t68[2]; // _t69 = t68[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:50
_t70=(Force.toFloat(_t67)+Force.toFloat(_t69)); // _t70 = t67 + t69 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:45
_t71=(Force.toFloat(_t70)*Force.toFloat(_t30)); // _t71 = t70 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:54
_t72=Go.math__sin.load(); // _t72 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:54
_t73=_t72[3]; // _t73 = t72[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:62
_t74=(Force.toFloat(_t71)+Force.toFloat(_t73)); // _t74 = t71 + t73 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:57
_t75=(Force.toFloat(_t74)*Force.toFloat(_t30)); // _t75 = t74 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:66
_t76=Go.math__sin.load(); // _t76 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:66
_t77=_t76[4]; // _t77 = t76[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:74
_t78=(Force.toFloat(_t75)+Force.toFloat(_t77)); // _t78 = t75 + t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:69
_t79=(Force.toFloat(_t78)*Force.toFloat(_t30)); // _t79 = t78 * t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:78
_t80=Go.math__sin.load(); // _t80 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sin.go:218:78
_t81=_t80[5]; // _t81 = t80[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sin.go:218:86
_t82=(Force.toFloat(_t79)+Force.toFloat(_t81)); // _t82 = t79 + t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:81
_t83=(Force.toFloat(_t60)*Force.toFloat(_t82)); // _t83 = t60 * t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:15
_t84=(Force.toFloat(_t29)+Force.toFloat(_t83)); // _t84 = t29 + t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:218:9
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:218:9
}// end SubFn13
private inline  function SubFn14():Void {
var _t85:Bool;
this.setPH(3922);
_t85=(GOint64.compare(_t23,GOint64.make(0x0,0x2))==0); // _t85 = t23 == 2:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:215:17
_Next=_t85 ? 13 : 15; // if t85 goto 13.if.then else 15.if.else *ssa.If near /usr/local/go/src/pkg/math/sin.go:215:17
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(3928);
_t86=(-Force.toFloat(_t59)); // _t86 = -t59 *ssa.UnOp @ /usr/local/go/src/pkg/math/sin.go:221:7
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sin.go:221:7
}// end SubFn15
}
#if (!php) private #end class Go_math_satan extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/atan.go:76:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,552,"Go_math_satan");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _t3:Float=0.0;
var _SF2:StackFrame;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _SF3:StackFrame;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_satan(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_satan(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_satan
{return new Go_math_satan(gr,_bds, p_x);
}
public function run():Go_math_satan {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(552,0);
this.SubFn0();

case 1: // if.then
this.setLatest(552,1);
this.setPH(558);
_SF1=Go_math_xatan.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(558,-1);
_t1=_SF1.res();
 // _t1 = xatan(x) *ssa.Call @ /usr/local/go/src/pkg/math/atan.go:82:15
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:82:3

case 2: // if.done
this.setLatest(558,2);
this.SubFn1();

case 3: // if.then
this.setLatest(558,3);
this.SubFn2();
this.setPH(561);
_SF2=Go_math_xatan.call(this._goroutine,[],_t3);
_Next = -2;
return this;
case -2:
this.setLatest(561,-2);
_t4=_SF2.res();
 // _t4 = xatan(t3) *ssa.Call @ /usr/local/go/src/pkg/math/atan.go:85:22
this.SubFn3();
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:85:3

case 4: // if.done
this.setLatest(561,4);
this.SubFn4();
this.setPH(563);
_SF3=Go_math_xatan.call(this._goroutine,[],_t9);
_Next = -3;
return this;
case -3:
this.setLatest(563,-3);
_t10=_SF3.res();
 // _t10 = xatan(t9) *ssa.Call @ /usr/local/go/src/pkg/math/atan.go:87:21
this.SubFn5();
_res= _t12;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t12 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:87:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(557);
_t0=(Force.toFloat(p_x)<=Force.toFloat(0.66)); // _t0 = x <= 33/50:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:81:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/atan.go:81:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(560);
_t2=(Force.toFloat(p_x)>Force.toFloat(2.414213562373095)); // _t2 = x > 3017766952966368811/1250000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:84:7
_Next=_t2 ? 3 : 4; // if t2 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/atan.go:84:7
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(561);
_t3=Force.floatDiv(Force.toFloat(1),Force.toFloat(p_x)); // _t3 = 1:float64 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:85:24
}// end SubFn2
private inline  function SubFn3():Void {
var _t5:Float;
_t5=(Force.toFloat(1.5707963267948966)-Force.toFloat(_t4)); // _t5 = 314159265358979323846264338327950288419716939937510582097494459/200000000000000000000000000000000000000000000000000000000000000:float64 - t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:85:15
_t6=(Force.toFloat(_t5)+Force.toFloat(6.123233995736766e-17)); // _t6 = t5 + 612323399573676588613/10000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:85:28
}// end SubFn3
private inline  function SubFn4():Void {
var _t7:Float;
var _t8:Float;
this.setPH(563);
_t7=(Force.toFloat(p_x)-Force.toFloat(1)); // _t7 = x - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:24
_t8=(Force.toFloat(p_x)+Force.toFloat(1)); // _t8 = x + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:30
_t9=Force.floatDiv(Force.toFloat(_t7),Force.toFloat(_t8)); // _t9 = t7 / t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:27
}// end SubFn4
private inline  function SubFn5():Void {
var _t11:Float;
_t11=(Force.toFloat(0.7853981633974483)+Force.toFloat(_t10)); // _t11 = 314159265358979323846264338327950288419716939937510582097494459/400000000000000000000000000000000000000000000000000000000000000:float64 + t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:14
_t12=(Force.toFloat(_t11)+Force.toFloat(3.061616997868383e-17)); // _t12 = t11 + 612323399573676588613/20000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:35
}// end SubFn5
}
#if (!php) private #end class Go__star_main_dot_square_area extends StackFrameBasis implements StackFrame {  // interfaces.go:28:17
var p_recv:Pointer;
public function new(gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) {
super(gr,28,"Go__star_main_dot_square_area");
this._bds=_bds;
this.p_recv=p_recv;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Array<Dynamic>=null;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_recv : Pointer) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go__star_main_dot_square_area(0,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_recv : Pointer) : Float {
var _sf=new Go__star_main_dot_square_area(_gr,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) : Go__star_main_dot_square_area
{return new Go__star_main_dot_square_area(gr,_bds, p_recv);
}
public function run():Go__star_main_dot_square_area {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(28,0);
this.SubFn0();
_SF1=Go_main_dot_square_area.call(this._goroutine,[],Deep.copy(_t0));
_Next = -1;
return this;
case -1:
this.setLatest(28,-1);
_t1=_SF1.res();
 // _t1 = (main.square).area(t0) *ssa.Call near /usr/local/go/src/pkg/math/atan.go:87:35
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return near /usr/local/go/src/pkg/math/atan.go:87:35

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=p_recv.load(); // _t0 = *recv *ssa.UnOp near /usr/local/go/src/pkg/math/atan.go:87:35
}// end SubFn0
}
#if js @:expose("Go_haxegoruntime_UTF8toRunes") #end class Go_haxegoruntime_UTF8toRunes extends StackFrameBasis implements StackFrame {  // langgoruntime.go:39:6
var p_s:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Slice) {
super(gr,5034,"Go_haxegoruntime_UTF8toRunes");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Int=0;
var _t1:Slice=null;
var _t2:Int=0;
var _t3:Int=0;
var _t4:Slice=null;
var _t5:Int=0;
var _t6:Int=0;
var _t7:Int=0;
var _t8:Bool=false;
var _t9:Int=0;
var _t10:Bool=false;
var _t11:Pointer=null;
var _t12:Int=0;
var _t13:Pointer=null;
var _t14:Int=0;
var _t15:Int=0;
var _SF2:StackFrame;
var _t16:{r0:Int,r1:Int}=null;
var _t17:Int=0;
var _t18:Int=0;
var _t19:Pointer=null;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Int=0;
var _t23:Int=0;
var _t24:Int=0;
var _t25:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_UTF8toRunes(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Slice) : Slice {
var _sf=new Go_haxegoruntime_UTF8toRunes(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Slice) : Go_haxegoruntime_UTF8toRunes
{return new Go_haxegoruntime_UTF8toRunes(gr,_bds, p_s);
}
public function run():Go_haxegoruntime_UTF8toRunes {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5034,0);
this.setPH(5035);
_SF1=Go_utf8_RuneCount.call(this._goroutine,[],p_s);
_Next = -1;
return this;
case -1:
this.setLatest(5035,-1);
_t0=_SF1.res();
 // _t0 = unicode/utf8.RuneCount(s) *ssa.Call @ langgoruntime.go:40:36
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(5035,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(5035,2);
this.setPH(5046);
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ langgoruntime.go:51:2

case 3: // for.loop
this.setLatest(5046,3);
this.setPH(5036);
_t5=((_Phi==0)?0:(_Phi==6)?_t20:0); // _t5 = phi [0.entry: 0:int, 6.for.done: t20] #si *ssa.Phi @ langgoruntime.go:41:2
this.setPH(5037);
_t6=((_Phi==0)?0:(_Phi==6)?_t21:0); // _t6 = phi [0.entry: 0:int, 6.for.done: t21] #ri *ssa.Phi @ langgoruntime.go:42:6
this.SubFn2();
_Phi=3;
case 4: // cond.true
this.setLatest(5037,4);
this.SubFn3();
_Phi=4;
case 5: // for.body
this.setLatest(5037,5);
this.SubFn4();
_Phi=5;
case 6: // for.done
this.setLatest(5037,6);
this.setPH(5042);
_SF2=Go_utf8_DecodeRune.call(this._goroutine,[],_t4);
_Next = -2;
return this;
case -2:
this.setLatest(5042,-2);
_t16=_SF2.res();
 // _t16 = unicode/utf8.DecodeRune(t4) *ssa.Call @ langgoruntime.go:47:33
this.SubFn5();
_Phi=6;
case 7: // for.loop
this.setLatest(5042,7);
this.setPH(5039);
_t22=((_Phi==1)?0:(_Phi==5)?_t15:0); // _t22 = phi [1.for.body: 0:int, 5.for.body: t15] #j *ssa.Phi @ langgoruntime.go:44:7
this.SubFn6();
_Phi=7;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5035);
_t1=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t0) _v[_i]=0; _v;}),0,_t0); // _t1 = make []rune t0 t0 *ssa.MakeSlice @ langgoruntime.go:40:13
_Next=3; // jump 3.for.loop *ssa.Jump near langgoruntime.go:40:13
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Int;
var _t3:Int;
this.setPH(5038);
_t2=({var _v=p_s;_v==null?0:_v.len();}); // _t2 = len(s) *ssa.Call @ langgoruntime.go:43:24
_t3=(_t2-_t5); // _t3 = t2 - t5 *ssa.BinOp @ langgoruntime.go:43:27
_t4=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t3) _v[_i]=0; _v;}),0,_t3); // _t4 = make []byte t3 t3 *ssa.MakeSlice @ langgoruntime.go:43:12
_Next=7; // jump 7.for.loop *ssa.Jump near langgoruntime.go:43:12
}// end SubFn1
private inline  function SubFn2():Void {
var _t7:Int;
var _t8:Bool;
this.setPH(5037);
_t7=({var _v=p_s;_v==null?0:_v.len();}); // _t7 = len(s) *ssa.Call @ langgoruntime.go:42:23
_t8=(_t5<_t7); // _t8 = t5 < t7 *ssa.BinOp @ langgoruntime.go:42:18
_Next=_t8 ? 4 : 2; // if t8 goto 4.cond.true else 2.for.done *ssa.If near langgoruntime.go:42:18
}// end SubFn2
private inline  function SubFn3():Void {
var _t9:Int;
var _t10:Bool;
_t9=({var _v=_t1;_v==null?0:_v.len();}); // _t9 = len(t1) *ssa.Call @ langgoruntime.go:42:38
_t10=(_t6<_t9); // _t10 = t6 < t9 *ssa.BinOp @ langgoruntime.go:42:33
_Next=_t10 ? 1 : 2; // if t10 goto 1.for.body else 2.for.done *ssa.If near langgoruntime.go:42:33
}// end SubFn3
private inline  function SubFn4():Void {
var _t11:Pointer;
var _t12:Int;
var _t13:Pointer;
var _t14:Int;
this.setPH(5040);
if((_t22<0)||(_t22>=_t4.len())) Scheduler.ioor(); // _t11 = &t4[t22] *ssa.IndexAddr @ langgoruntime.go:45:5 [POINTER]
_t11=_t4.addr(_t22);  // _t11 = &t4[t22] *ssa.IndexAddr @ langgoruntime.go:45:5 [POINTER]
_t12=(_t5+_t22); // _t12 = t5 + t22 *ssa.BinOp @ langgoruntime.go:45:15
if((_t12<0)||(_t12>=p_s.len())) Scheduler.ioor(); // _t13 = &s[t12] *ssa.IndexAddr @ langgoruntime.go:45:12 [POINTER]
_t13=p_s.addr(_t12);  // _t13 = &s[t12] *ssa.IndexAddr @ langgoruntime.go:45:12 [POINTER]
_t14=(_t13.load()|0); // _t14 = *t13 *ssa.UnOp near langgoruntime.go:45:12
_t11.store(_t14); // *t11 = t14 *ssa.Store near langgoruntime.go:45:12
_t15=(_t22+1); // _t15 = t22 + 1:int *ssa.BinOp near langgoruntime.go:45:12
_Next=7; // jump 7.for.loop *ssa.Jump near langgoruntime.go:45:12
}// end SubFn4
private inline  function SubFn5():Void {
var _t19:Pointer;
_t17=_t16.r0; // _t17 = extract t16 #0 *ssa.Extract near langgoruntime.go:45:12
_t18=_t16.r1; // _t18 = extract t16 #1 *ssa.Extract near langgoruntime.go:45:12
this.setPH(5043);
if((_t6<0)||(_t6>=_t1.len())) Scheduler.ioor(); // _t19 = &t1[t6] *ssa.IndexAddr @ langgoruntime.go:48:6 [POINTER]
_t19=_t1.addr(_t6);  // _t19 = &t1[t6] *ssa.IndexAddr @ langgoruntime.go:48:6 [POINTER]
_t19.store(_t17); // *t19 = t17 *ssa.Store near langgoruntime.go:48:6
_t20=(_t5+_t18); // _t20 = t5 + t18 *ssa.BinOp near langgoruntime.go:48:6
_t21=(_t6+1); // _t21 = t6 + 1:int *ssa.BinOp near langgoruntime.go:48:6
_Next=3; // jump 3.for.loop *ssa.Jump near langgoruntime.go:48:6
}// end SubFn5
private inline  function SubFn6():Void {
var _t23:Int;
var _t24:Int;
var _t25:Bool;
this.setPH(5039);
_t23=({var _v=p_s;_v==null?0:_v.len();}); // _t23 = len(s) *ssa.Call @ langgoruntime.go:44:23
_t24=(_t23-_t5); // _t24 = t23 - t5 *ssa.BinOp @ langgoruntime.go:44:27
_t25=(_t22<_t24); // _t25 = t22 < t24 *ssa.BinOp @ langgoruntime.go:44:17
_Next=_t25 ? 5 : 6; // if t25 goto 5.for.body else 6.for.done *ssa.If near langgoruntime.go:44:17
}// end SubFn6
}
#if (!php) private #end class Go_math_asin extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/asin.go:21:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,373,"Go_math_asin");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF1:StackFrame;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _SF2:StackFrame;
var _t9:Float=0.0;
var _t10:Bool=false;
var _t11:Float=0.0;
var _SF3:StackFrame;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _SF4:StackFrame;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_asin(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_asin(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_asin
{return new Go_math_asin(gr,_bds, p_x);
}
public function run():Go_math_asin {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(373,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(373,1);
this.setPH(375);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/asin.go:23:3

case 2: // if.done
this.setLatest(375,2);
this.SubFn1();
_Phi=2;
case 3: // if.then
this.setLatest(375,3);
this.SubFn2();
_Phi=3;
case 4: // if.done
this.setLatest(375,4);
this.setPH(373);
_t3=((_Phi==2)?p_x:(_Phi==3)?_t2:0.0); // _t3 = phi [2.if.done: x, 3.if.then: t2] #x *ssa.Phi @ /usr/local/go/src/pkg/math/asin.go:21:11
this.setPH(377);
_t4=((_Phi==2)?false:(_Phi==3)?true:false); // _t4 = phi [2.if.done: false:bool, 3.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/asin.go:25:2
this.SubFn3();
_Phi=4;
case 5: // if.then
this.setLatest(377,5);
this.setPH(383);
_t6=Math.NaN; // _t6 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/asin.go:31:13
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/asin.go:31:3

case 6: // if.done
this.setLatest(383,6);
this.SubFn4();
this.setPH(386);
_t9=Math.sqrt(_t8); // _t9 = Sqrt(t8) *ssa.Call @ /usr/local/go/src/pkg/math/asin.go:34:14
this.SubFn5();
_Phi=6;
case 7: // if.then
this.setLatest(386,7);
this.SubFn6();
this.setPH(388);
_SF3=Go_math_satan.call(this._goroutine,[],_t11);
_Next = -3;
return this;
case -3:
this.setLatest(388,-3);
_t12=_SF3.res();
 // _t12 = satan(t11) *ssa.Call @ /usr/local/go/src/pkg/math/asin.go:36:22
this.SubFn7();
_Phi=7;
case 8: // if.done
this.setLatest(388,8);
this.setPH(386);
_t14=((_Phi==7)?_t13:(_Phi==9)?_t16:0.0); // _t14 = phi [7.if.then: t13, 9.if.else: t16] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/asin.go:34:2
this.SubFn8();
_Phi=8;
case 9: // if.else
this.setLatest(386,9);
this.SubFn9();
this.setPH(390);
_SF4=Go_math_satan.call(this._goroutine,[],_t15);
_Next = -4;
return this;
case -4:
this.setLatest(390,-4);
_t16=_SF4.res();
 // _t16 = satan(t15) *ssa.Call @ /usr/local/go/src/pkg/math/asin.go:38:15
this.SubFn10();
_Phi=9;
case 10: // if.then
this.setLatest(390,10);
this.SubFn11();
_Phi=10;
case 11: // if.done
this.setLatest(390,11);
this.setPH(386);
_t18=((_Phi==8)?_t14:(_Phi==10)?_t17:0.0); // _t18 = phi [8.if.done: t14, 10.if.then: t17] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/asin.go:34:2
this.setPH(396);
_res= _t18;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18 *ssa.Return @ /usr/local/go/src/pkg/math/asin.go:44:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(374);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:22:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/asin.go:22:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(378);
_t1=(Force.toFloat(p_x)<Force.toFloat(0)); // _t1 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:26:7
_Next=_t1 ? 3 : 4; // if t1 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/asin.go:26:7
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(379);
_t2=(-Force.toFloat(p_x)); // _t2 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/asin.go:27:7
_Next=4; // jump 4.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asin.go:27:7
}// end SubFn2
private inline  function SubFn3():Void {
var _t5:Bool;
this.setPH(382);
_t5=(Force.toFloat(_t3)>Force.toFloat(1)); // _t5 = t3 > 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:30:7
_Next=_t5 ? 5 : 6; // if t5 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/asin.go:30:7
}// end SubFn3
private inline  function SubFn4():Void {
var _t7:Float;
this.setPH(386);
_t7=(Force.toFloat(_t3)*Force.toFloat(_t3)); // _t7 = t3 * t3 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:34:20
_t8=(Force.toFloat(1)-Force.toFloat(_t7)); // _t8 = 1:float64 - t7 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:34:17
}// end SubFn4
private inline  function SubFn5():Void {
var _t10:Bool;
this.setPH(387);
_t10=(Force.toFloat(_t3)>Force.toFloat(0.7)); // _t10 = t3 > 7/10:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:35:7
_Next=_t10 ? 7 : 9; // if t10 goto 7.if.then else 9.if.else *ssa.If near /usr/local/go/src/pkg/math/asin.go:35:7
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(388);
_t11=Force.floatDiv(Force.toFloat(_t9),Force.toFloat(_t3)); // _t11 = t9 / t3 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:36:27
}// end SubFn6
private inline  function SubFn7():Void {
_t13=(Force.toFloat(1.5707963267948966)-Force.toFloat(_t12)); // _t13 = 314159265358979323846264338327950288419716939937510582097494459/200000000000000000000000000000000000000000000000000000000000000:float64 - t12 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:36:15
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asin.go:36:15
}// end SubFn7
private inline  function SubFn8():Void {
_Next=_t4 ? 10 : 11; // if t4 goto 10.if.then else 11.if.done *ssa.If near /usr/local/go/src/pkg/math/asin.go:36:15
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(390);
_t15=Force.floatDiv(Force.toFloat(_t3),Force.toFloat(_t9)); // _t15 = t3 / t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:38:18
}// end SubFn9
private inline  function SubFn10():Void {
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asin.go:38:18
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(394);
_t17=(-Force.toFloat(_t14)); // _t17 = -t14 *ssa.UnOp @ /usr/local/go/src/pkg/math/asin.go:42:10
_Next=11; // jump 11.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asin.go:42:10
}// end SubFn11
}
#if (!php) private #end class Go_math_log extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/log.go:82:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2268,"Go_math_log");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Float=0.0;
var _t6:Bool=false;
var _SF5:StackFrame;
var _t7:{r0:Float,r1:Int}=null;
var _t8:Float=0.0;
var _t9:Int=0;
var _t10:Bool=false;
var _t11:Float=0.0;
var _t12:Int=0;
var _t13:Float=0.0;
var _t14:Int=0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_log(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_log(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_log
{return new Go_math_log(gr,_bds, p_x);
}
public function run():Go_math_log {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2268,0);
this.setPH(2283);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2283,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/log.go:97:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2283,1);
this.setPH(2284);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/log.go:98:3

case 2: // switch.body
this.setLatest(2284,2);
this.setPH(2286);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/log.go:100:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/log.go:100:3

case 3: // switch.next
this.setLatest(2286,3);
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(2286,4);
this.setPH(2283);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -3;
return this;
case -3:
this.setLatest(2283,-3);
_t3=_SF3.res();
 // _t3 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/log.go:97:24
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(2283,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/log.go:97:16
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(2283,6);
this.setPH(2288);
_t5=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t5 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/log.go:102:13
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/log.go:102:3

case 7: // switch.next
this.setLatest(2288,7);
this.SubFn4();
_Phi=7;
case 8: // switch.next
this.setLatest(2288,8);
this.setPH(2292);
_SF5=Go_math_frexp.call(this._goroutine,[],p_x);
_Next = -5;
return this;
case -5:
this.setLatest(2292,-5);
_t7=_SF5.res();
 // _t7 = Frexp(x) *ssa.Call @ /usr/local/go/src/pkg/math/log.go:106:17
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(2292,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(2292,10);
_t13=((_Phi==8)?_t8:(_Phi==9)?_t11:0.0); // _t13 = phi [8.switch.next: t8, 9.if.then: t11] #f1 *ssa.Phi @ /usr/local/go/src/pkg/math/log.go:106:2
_t14=((_Phi==8)?_t9:(_Phi==9)?_t12:0); // _t14 = phi [8.switch.next: t9, 9.if.then: t12] #ki *ssa.Phi @ /usr/local/go/src/pkg/math/log.go:106:6
this.SubFn7();
this.setPH(2308);
_res= _t43;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t43 *ssa.Return @ /usr/local/go/src/pkg/math/log.go:122:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/log.go:122:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(2285);
_t2=(Force.toFloat(p_x)<Force.toFloat(0)); // _t2 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:99:9
_Next=_t2 ? 2 : 7; // if t2 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/log.go:99:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/log.go:99:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/log.go:99:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(2287);
_t6=(Force.toFloat(p_x)==Force.toFloat(0)); // _t6 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:101:9
_Next=_t6 ? 6 : 8; // if t6 goto 6.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/log.go:101:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t10:Bool;
_t8=_t7.r0; // _t8 = extract t7 #0 *ssa.Extract near /usr/local/go/src/pkg/math/log.go:101:9
_t9=_t7.r1; // _t9 = extract t7 #1 *ssa.Extract near /usr/local/go/src/pkg/math/log.go:101:9
this.setPH(2293);
_t10=(Force.toFloat(_t8)<Force.toFloat(0.7071067811865476)); // _t10 = t8 < 70710678118654752440084436210484903928483593768847403658833987/100000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:107:8
_Next=_t10 ? 9 : 10; // if t10 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/log.go:107:8
}// end SubFn5
private inline  function SubFn6():Void {
_t11=(Force.toFloat(_t8)*Force.toFloat(2)); // _t11 = t8 * 2:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/log.go:107:8
_t12=(_t9-1); // _t12 = t9 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/log.go:107:8
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log.go:107:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t17:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t28:Float;
var _t29:Float;
var _t30:Float;
var _t31:Float;
var _t34:Float;
var _t36:Float;
var _t37:Float;
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
this.setPH(2297);
_t15=(Force.toFloat(_t13)-Force.toFloat(1)); // _t15 = t13 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:111:10
this.setPH(2298);
_t16=_t14; // _t16 = convert float64 <- int (t14) *ssa.Convert @ /usr/local/go/src/pkg/math/log.go:112:14
this.setPH(2301);
_t17=(Force.toFloat(2)+Force.toFloat(_t15)); // _t17 = 2:float64 + t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:115:14
_t18=Force.floatDiv(Force.toFloat(_t15),Force.toFloat(_t17)); // _t18 = t15 / t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:115:9
this.setPH(2302);
_t19=(Force.toFloat(_t18)*Force.toFloat(_t18)); // _t19 = t18 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:116:10
this.setPH(2303);
_t20=(Force.toFloat(_t19)*Force.toFloat(_t19)); // _t20 = t19 * t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:117:11
this.setPH(2304);
_t21=(Force.toFloat(_t20)*Force.toFloat(0.14798198605116586)); // _t21 = t20 * 1479819860511658591/10000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:35
_t22=(Force.toFloat(0.1818357216161805)+Force.toFloat(_t21)); // _t22 = 454589304040451253/2500000000000000000:float64 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:32
_t23=(Force.toFloat(_t20)*Force.toFloat(_t22)); // _t23 = t20 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:28
_t24=(Force.toFloat(0.2857142874366239)+Force.toFloat(_t23)); // _t24 = 2857142874366239149/10000000000000000000:float64 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:25
_t25=(Force.toFloat(_t20)*Force.toFloat(_t24)); // _t25 = t20 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:21
_t26=(Force.toFloat(0.6666666666666735)+Force.toFloat(_t25)); // _t26 = 666666666666673513/1000000000000000000:float64 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:17
_t27=(Force.toFloat(_t19)*Force.toFloat(_t26)); // _t27 = t19 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:11
this.setPH(2305);
_t28=(Force.toFloat(_t20)*Force.toFloat(0.15313837699209373)); // _t28 = t20 * 382845942480234333/2500000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:28
_t29=(Force.toFloat(0.22222198432149784)+Force.toFloat(_t28)); // _t29 = 555554960803744599/2500000000000000000:float64 + t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:25
_t30=(Force.toFloat(_t20)*Force.toFloat(_t29)); // _t30 = t20 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:21
_t31=(Force.toFloat(0.3999999999940942)+Force.toFloat(_t30)); // _t31 = 999999999985235477/2500000000000000000:float64 + t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:17
_t32=(Force.toFloat(_t20)*Force.toFloat(_t31)); // _t32 = t20 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:11
this.setPH(2306);
_t33=(Force.toFloat(_t27)+Force.toFloat(_t32)); // _t33 = t27 + t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:120:10
this.setPH(2307);
_t34=(Force.toFloat(0.5)*Force.toFloat(_t15)); // _t34 = 1/2:float64 * t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:121:14
_t35=(Force.toFloat(_t34)*Force.toFloat(_t15)); // _t35 = t34 * t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:121:18
this.setPH(2308);
_t36=(Force.toFloat(_t16)*Force.toFloat(0.6931471803691238)); // _t36 = t16 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:10
_t37=(Force.toFloat(_t35)+Force.toFloat(_t33)); // _t37 = t35 + t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:36
_t38=(Force.toFloat(_t18)*Force.toFloat(_t37)); // _t38 = t18 * t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:30
_t39=(Force.toFloat(_t16)*Force.toFloat(1.9082149292705877e-10)); // _t39 = t16 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:43
_t40=(Force.toFloat(_t38)+Force.toFloat(_t39)); // _t40 = t38 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:40
_t41=(Force.toFloat(_t35)-Force.toFloat(_t40)); // _t41 = t35 - t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:26
_t42=(Force.toFloat(_t41)-Force.toFloat(_t15)); // _t42 = t41 - t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:52
_t43=(Force.toFloat(_t36)-Force.toFloat(_t42)); // _t43 = t36 - t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:17
}// end SubFn7
}
#if js @:expose("Go_haxegoruntime_UTF16toRunes") #end class Go_haxegoruntime_UTF16toRunes extends StackFrameBasis implements StackFrame {  // langgoruntime.go:35:6
var p_s:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Slice) {
super(gr,5030,"Go_haxegoruntime_UTF16toRunes");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Slice=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_UTF16toRunes(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Slice) : Slice {
var _sf=new Go_haxegoruntime_UTF16toRunes(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Slice) : Go_haxegoruntime_UTF16toRunes
{return new Go_haxegoruntime_UTF16toRunes(gr,_bds, p_s);
}
public function run():Go_haxegoruntime_UTF16toRunes {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5030,0);
this.setPH(5031);
_SF1=Go_utf16_Decode.call(this._goroutine,[],p_s);
_Next = -1;
return this;
case -1:
this.setLatest(5031,-1);
_t0=_SF1.res();
 // _t0 = unicode/utf16.Decode(s) *ssa.Call @ langgoruntime.go:36:21
_res= _t0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t0 *ssa.Return @ langgoruntime.go:36:2

default: Scheduler.bbi();}}}
}
#if (!php) private #end class Go_math_normalize extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/bits.go:53:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,269,"Go_math_normalize");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:{r0:Float, r1:Int};
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _t1:Bool=false;
var _t2:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : {r0:Float, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_normalize(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : {r0:Float, r1:Int} {
var _sf=new Go_math_normalize(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_normalize
{return new Go_math_normalize(gr,_bds, p_x);
}
public function run():Go_math_normalize {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(269,0);
this.setPH(271);
_t0=Math.abs(p_x); // _t0 = Abs(x) *ssa.Call @ /usr/local/go/src/pkg/math/bits.go:55:8
this.SubFn0();

case 1: // if.then
this.setLatest(271,1);
this.SubFn1();
this.setPH(272);
_res= {r0:_t2,r1:(-52)};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2, -52:int *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:56:3

case 2: // if.done
this.setLatest(272,2);
this.setPH(274);
_res= {r0:p_x,r1:0};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x, 0:int *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:58:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(271);
_t1=(Force.toFloat(_t0)<Force.toFloat(2.2250738585072014e-308)); // _t1 = t0 < 11125369292536007/500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:55:12
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/bits.go:55:12
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(272);
_t2=(Force.toFloat(p_x)*Force.toFloat(4.503599627370496e+15)); // _t2 = x * 4503599627370496:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:56:12
}// end SubFn1
}
#if (!php) private #end class Go_math_ldexp extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/ldexp.go:16:6
var p_frac:Float;
var p_exp:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_frac : Float, p_exp : Int) {
super(gr,2157,"Go_math_ldexp");
this._bds=_bds;
this.p_frac=p_frac;
this.p_exp=p_exp;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Bool=false;
var _SF2:StackFrame;
var _t2:{r0:Float,r1:Int}=null;
var _t3:Float=0.0;
var _t4:Int=0;
var _t5:Int=0;
var _SF3:StackFrame;
var _t6:GOint64=null;
var _t7:GOint64=null;
var _t8:Int=0;
var _t9:Int=0;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Bool=false;
var _SF4:StackFrame;
var _t13:Bool=false;
var _t14:Bool=false;
var _SF5:StackFrame;
var _t15:Float=0.0;
var _t16:Bool=false;
var _t17:Bool=false;
var _t18:Bool=false;
var _SF6:StackFrame;
var _t19:Float=0.0;
var _SF7:StackFrame;
var _t20:Float=0.0;
var _t21:Int=0;
var _t22:Int=0;
var _t23:Float=0.0;
var _t24:GOint64=null;
var _t25:Int=0;
var _t26:GOint64=null;
var _t27:GOint64=null;
var _t28:GOint64=null;
var _SF8:StackFrame;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_frac : Float, p_exp : Int) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_ldexp(0,[], p_frac, p_exp).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_frac : Float, p_exp : Int) : Float {
var _sf=new Go_math_ldexp(_gr,[], p_frac, p_exp).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_frac : Float, p_exp : Int) : Go_math_ldexp
{return new Go_math_ldexp(gr,_bds, p_frac, p_exp);
}
public function run():Go_math_ldexp {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2157,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2157,1);
this.setPH(2161);
_res= p_frac;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return frac *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:20:3

case 2: // switch.body
this.setLatest(2161,2);
this.setPH(2163);
_res= p_frac;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return frac *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:22:3

case 3: // switch.next
this.setLatest(2163,3);
this.setPH(2162);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_frac,0);
_Next = -1;
return this;
case -1:
this.setLatest(2162,-1);
_t1=_SF1.res();
 // _t1 = IsInf(frac, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:21:12
this.SubFn1();
_Phi=3;
case 4: // switch.next
this.setLatest(2162,4);
this.setPH(2165);
_SF2=Go_math_normalize.call(this._goroutine,[],p_frac);
_Next = -2;
return this;
case -2:
this.setLatest(2165,-2);
_t2=_SF2.res();
 // _t2 = normalize(frac) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:24:22
this.SubFn2();
this.setPH(2167);
_SF3=Go_math_Float64bits.call(this._goroutine,[],_t3);
_Next = -3;
return this;
case -3:
this.setLatest(2167,-3);
_t6=_SF3.res();
 // _t6 = Float64bits(t3) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:26:18
this.SubFn3();
_Phi=4;
case 5: // binop.rhs
this.setLatest(2167,5);
this.setPH(2162);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_frac);
_Next = -4;
return this;
case -4:
this.setLatest(2162,-4);
_t13=_SF4.res();
 // _t13 = IsNaN(frac) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:21:30
this.SubFn4();
_Phi=5;
case 6: // binop.done
this.setLatest(2162,6);
_t14=((_Phi==3)?true:(_Phi==5)?_t13:false); // _t14 = phi [3.switch.next: true:bool, 5.binop.rhs: t13] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/ldexp.go:21:22
this.SubFn5();
_Phi=6;
case 7: // if.then
this.setLatest(2162,7);
this.setPH(2170);
_SF5=Go_math_Copysign.call(this._goroutine,[],0,_t3);
_Next = -5;
return this;
case -5:
this.setLatest(2170,-5);
_t15=_SF5.res();
 // _t15 = Copysign(0:float64, t3) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:29:18
_res= _t15;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t15 *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:29:3

case 8: // if.done
this.setLatest(2170,8);
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(2170,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(2170,10);
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(2170,11);
this.setPH(2174);
_t19=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t19 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:33:14
_res= _t19;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19 *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:33:4

case 12: // if.done
this.setLatest(2174,12);
this.setPH(2176);
_t20=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t20 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:35:13
_res= _t20;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t20 *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:35:3

case 13: // if.then
this.setLatest(2176,13);
this.SubFn9();
_Phi=13;
case 14: // if.done
this.setLatest(2176,14);
this.setPH(2157);
_t22=((_Phi==10)?_t11:(_Phi==13)?_t21:0); // _t22 = phi [10.if.done: t11, 13.if.then: t21] #exp *ssa.Phi @ /usr/local/go/src/pkg/math/ldexp.go:16:26
this.setPH(2178);
_t23=((_Phi==10)?1:(_Phi==13)?2.220446049250313e-16:0.0); // _t23 = phi [10.if.done: 1:float64, 13.if.then: 1/4503599627370496:float64] #m *ssa.Phi @ /usr/local/go/src/pkg/math/ldexp.go:37:6
this.SubFn10();
this.setPH(2185);
_SF8=Go_math_Float64frombits.call(this._goroutine,[],_t28);
_Next = -8;
return this;
case -8:
this.setLatest(2185,-8);
_t29=_SF8.res();
 // _t29 = Float64frombits(t28) *ssa.Call @ /usr/local/go/src/pkg/math/ldexp.go:44:28
this.SubFn11();
_res= _t30;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t30 *ssa.Return @ /usr/local/go/src/pkg/math/ldexp.go:44:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2160);
_t0=(Force.toFloat(p_frac)==Force.toFloat(0)); // _t0 = frac == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:19:12
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:19:12
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 6 : 5; // if t1 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:19:12
}// end SubFn1
private inline  function SubFn2():Void {
_t3=_t2.r0; // _t3 = extract t2 #0 *ssa.Extract near /usr/local/go/src/pkg/math/ldexp.go:19:12
_t4=_t2.r1; // _t4 = extract t2 #1 *ssa.Extract near /usr/local/go/src/pkg/math/ldexp.go:19:12
_t5=(p_exp+_t4); // _t5 = exp + t4 *ssa.BinOp near /usr/local/go/src/pkg/math/ldexp.go:19:12
}// end SubFn2
private inline  function SubFn3():Void {
var _t7:GOint64;
var _t8:Int;
var _t9:Int;
var _t10:Int;
var _t12:Bool;
this.setPH(2168);
_t7=Force.toUint64(GOint64.ushr(_t6,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t7 = t6 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:27:14
_t8=GOint64.toInt(_t7); // _t8 = convert int <- uint64 (t7) *ssa.Convert @ /usr/local/go/src/pkg/math/ldexp.go:27:12
_t9=(_t8&2047); // _t9 = t8 & 2047:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:27:22
_t10=(_t9-1023); // _t10 = t9 - 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:27:28
_t11=(_t5+_t10); // _t11 = t5 + t10 *ssa.BinOp near /usr/local/go/src/pkg/math/ldexp.go:27:28
this.setPH(2169);
_t12=(_t11<(-1074)); // _t12 = t11 < -1074:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:28:9
_Next=_t12 ? 7 : 8; // if t12 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:28:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/ldexp.go:28:9
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t14 ? 2 : 4; // if t14 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:28:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t16:Bool;
this.setPH(2172);
_t16=(_t11>1023); // _t16 = t11 > 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:31:9
_Next=_t16 ? 9 : 10; // if t16 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:31:9
}// end SubFn6
private inline  function SubFn7():Void {
var _t17:Bool;
this.setPH(2173);
_t17=(Force.toFloat(_t3)<Force.toFloat(0)); // _t17 = t3 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:32:11
_Next=_t17 ? 11 : 12; // if t17 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:32:11
}// end SubFn7
private inline  function SubFn8():Void {
var _t18:Bool;
this.setPH(2179);
_t18=(_t11<(-1022)); // _t18 = t11 < -1022:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:38:9
_Next=_t18 ? 13 : 14; // if t18 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/ldexp.go:38:9
}// end SubFn8
private inline  function SubFn9():Void {
_t21=(_t11+52); // _t21 = t11 + 52:int *ssa.BinOp near /usr/local/go/src/pkg/math/ldexp.go:38:9
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/ldexp.go:38:9
}// end SubFn9
private inline  function SubFn10():Void {
var _t25:Int;
var _t26:GOint64;
var _t27:GOint64;
_t24=Force.toUint64(GOint64.and(_t6,GOint64.xor(GOint64.make(0x7ff00000,0x0),GOint64.make(-1,-1)))); // _t24 = t6 &^ 9218868437227405312:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/ldexp.go:38:9
this.setPH(2184);
_t25=(_t22+1023); // _t25 = t22 + 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:43:17
_t26=GOint64.ofInt(_t25); // _t26 = convert uint64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/ldexp.go:43:13
_t27=Force.toUint64(GOint64.shl(_t26,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t27 = t26 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:43:24
_t28=Force.toUint64(GOint64.or(_t24,_t27)); // _t28 = t24 | t27 *ssa.BinOp near /usr/local/go/src/pkg/math/ldexp.go:43:24
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(2185);
_t30=(Force.toFloat(_t23)*Force.toFloat(_t29)); // _t30 = t23 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/ldexp.go:44:11
}// end SubFn11
}
#if js @:expose("Go_math_Asinh") #end class Go_math_Asinh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/asinh.go:39:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,446,"Go_math_Asinh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _t1:Bool=false;
var _SF2:StackFrame;
var _t2:Bool=false;
var _t3:Float=0.0;
var _t4:Float=0.0;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Float=0.0;
var _SF3:StackFrame;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _SF4:StackFrame;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _SF5:StackFrame;
var _t17:Float=0.0;
var _t18:Bool=false;
var _t19:Bool=false;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _SF6:StackFrame;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _SF7:StackFrame;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Asinh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Asinh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Asinh
{return new Go_math_Asinh(gr,_bds, p_x);
}
public function run():Go_math_Asinh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(446,0);
this.setPH(453);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(453,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:46:10
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(453,1);
this.setPH(454);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/asinh.go:47:3

case 2: // if.done
this.setLatest(454,2);
this.SubFn1();
_Phi=2;
case 3: // cond.false
this.setLatest(454,3);
this.setPH(453);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(453,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:46:22
this.SubFn2();
_Phi=3;
case 4: // if.then
this.setLatest(453,4);
this.SubFn3();
_Phi=4;
case 5: // if.done
this.setLatest(453,5);
this.setPH(446);
_t4=((_Phi==2)?p_x:(_Phi==4)?_t3:0.0); // _t4 = phi [2.if.done: x, 4.if.then: t3] #x *ssa.Phi @ /usr/local/go/src/pkg/math/asinh.go:39:12
this.setPH(456);
_t5=((_Phi==2)?false:(_Phi==4)?true:false); // _t5 = phi [2.if.done: false:bool, 4.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/asinh.go:49:2
this.SubFn4();
_Phi=5;
case 6: // switch.done
this.setLatest(456,6);
this.setPH(461);
_t7=((_Phi==7)?_t9:(_Phi==8)?_t17:(_Phi==10)?_t4:(_Phi==12)?_t27:0.0); // _t7 = phi [7.switch.body: t9, 8.switch.body: t17, 10.switch.body: t4, 12.switch.next: t27] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/asinh.go:54:6
this.SubFn5();
_Phi=6;
case 7: // switch.body
this.setLatest(461,7);
this.setPH(464);
_t8=Math.log(_t4); // _t8 = Log(t4) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:57:13
this.SubFn6();
_Phi=7;
case 8: // switch.body
this.setLatest(464,8);
this.SubFn7();
this.setPH(466);
_t13=Math.sqrt(_t12); // _t13 = Sqrt(t12) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:59:27
this.SubFn8();
_t17=Math.log(_t16); // _t17 = Log(t16) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:59:13
this.SubFn9();
_Phi=8;
case 9: // switch.next
this.setLatest(466,9);
this.SubFn10();
_Phi=9;
case 10: // switch.body
this.setLatest(466,10);
this.SubFn11();
_Phi=10;
case 11: // switch.next
this.setLatest(466,11);
this.SubFn12();
_Phi=11;
case 12: // switch.next
this.setLatest(466,12);
this.SubFn13();
this.setPH(470);
_t23=Math.sqrt(_t22); // _t23 = Sqrt(t22) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:63:31
this.SubFn14();
_SF7=Go_math_log1p.call(this._goroutine,[],_t26);
_Next = -7;
return this;
case -7:
this.setLatest(470,-7);
_t27=_SF7.res();
 // _t27 = Log1p(t26) *ssa.Call @ /usr/local/go/src/pkg/math/asinh.go:63:15
this.SubFn15();
_Phi=12;
case 13: // if.then
this.setLatest(470,13);
this.SubFn16();
_Phi=13;
case 14: // if.done
this.setLatest(470,14);
this.setPH(461);
_t29=((_Phi==6)?_t7:(_Phi==13)?_t28:0.0); // _t29 = phi [6.switch.done: t7, 13.if.then: t28] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/asinh.go:54:6
this.setPH(475);
_res= _t29;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t29 *ssa.Return @ /usr/local/go/src/pkg/math/asinh.go:68:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.if.then else 3.cond.false *ssa.If near /usr/local/go/src/pkg/math/asinh.go:68:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(457);
_t1=(Force.toFloat(p_x)<Force.toFloat(0)); // _t1 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:50:7
_Next=_t1 ? 4 : 5; // if t1 goto 4.if.then else 5.if.done *ssa.If near /usr/local/go/src/pkg/math/asinh.go:50:7
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t2 ? 1 : 2; // if t2 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/asinh.go:50:7
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(458);
_t3=(-Force.toFloat(p_x)); // _t3 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/asinh.go:51:7
_Next=5; // jump 5.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:51:7
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(463);
_t6=(Force.toFloat(_t4)>Force.toFloat(2.68435456e+08)); // _t6 = t4 > 268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:56:9
_Next=_t6 ? 7 : 9; // if t6 goto 7.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/math/asinh.go:56:9
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t5 ? 13 : 14; // if t5 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/asinh.go:56:9
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(464);
_t9=(Force.toFloat(_t8)+Force.toFloat(0.6931471805599453)); // _t9 = t8 + 693147180559945286227/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:57:17
_Next=6; // jump 6.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:57:17
}// end SubFn6
private inline  function SubFn7():Void {
var _t11:Float;
this.setPH(466);
_t10=(Force.toFloat(2)*Force.toFloat(_t4)); // _t10 = 2:float64 * t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:15
_t11=(Force.toFloat(_t4)*Force.toFloat(_t4)); // _t11 = t4 * t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:29
_t12=(Force.toFloat(_t11)+Force.toFloat(1)); // _t12 = t11 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:31
}// end SubFn7
private inline  function SubFn8():Void {
var _t14:Float;
var _t15:Float;
_t14=(Force.toFloat(_t13)+Force.toFloat(_t4)); // _t14 = t13 + t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:34
_t15=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t14)); // _t15 = 1:float64 / t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:21
_t16=(Force.toFloat(_t10)+Force.toFloat(_t15)); // _t16 = t10 + t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:59:18
}// end SubFn8
private inline  function SubFn9():Void {
_Next=6; // jump 6.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:59:18
}// end SubFn9
private inline  function SubFn10():Void {
var _t18:Bool;
this.setPH(465);
_t18=(Force.toFloat(_t4)>Force.toFloat(2)); // _t18 = t4 > 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:58:9
_Next=_t18 ? 8 : 11; // if t18 goto 8.switch.body else 11.switch.next *ssa.If near /usr/local/go/src/pkg/math/asinh.go:58:9
}// end SubFn10
private inline  function SubFn11():Void {
_Next=6; // jump 6.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:58:9
}// end SubFn11
private inline  function SubFn12():Void {
var _t19:Bool;
this.setPH(467);
_t19=(Force.toFloat(_t4)<Force.toFloat(3.725290298461914e-09)); // _t19 = t4 < 1/268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:60:9
_Next=_t19 ? 10 : 12; // if t19 goto 10.switch.body else 12.switch.next *ssa.If near /usr/local/go/src/pkg/math/asinh.go:60:9
}// end SubFn12
private inline  function SubFn13():Void {
var _t21:Float;
this.setPH(470);
_t20=(Force.toFloat(_t4)*Force.toFloat(_t4)); // _t20 = t4 * t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:21
_t21=(Force.toFloat(_t4)*Force.toFloat(_t4)); // _t21 = t4 * t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:35
_t22=(Force.toFloat(1)+Force.toFloat(_t21)); // _t22 = 1:float64 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:33
}// end SubFn13
private inline  function SubFn14():Void {
var _t24:Float;
var _t25:Float;
_t24=(Force.toFloat(1)+Force.toFloat(_t23)); // _t24 = 1:float64 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:26
_t25=Force.floatDiv(Force.toFloat(_t20),Force.toFloat(_t24)); // _t25 = t20 / t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:23
_t26=(Force.toFloat(_t4)+Force.toFloat(_t25)); // _t26 = t4 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:63:18
}// end SubFn14
private inline  function SubFn15():Void {
_Next=6; // jump 6.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:63:18
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(473);
_t28=(-Force.toFloat(_t7)); // _t28 = -t7 *ssa.UnOp @ /usr/local/go/src/pkg/math/asinh.go:66:10
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/asinh.go:66:10
}// end SubFn16
}
#if js @:expose("Go_math_Signbit") #end class Go_math_Signbit extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/signbit.go:8:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2822,"Go_math_Signbit");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:GOint64=null;
var _t1:GOint64=null;
var _t2:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Signbit(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Bool {
var _sf=new Go_math_Signbit(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Signbit
{return new Go_math_Signbit(gr,_bds, p_x);
}
public function run():Go_math_Signbit {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2822,0);
this.setPH(2823);
_SF1=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2823,-1);
_t0=_SF1.res();
 // _t0 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/signbit.go:9:20
this.SubFn0();
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/signbit.go:9:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:GOint64;
_t1=Force.toUint64(GOint64.and(_t0,GOint64.make(0x80000000,0x0))); // _t1 = t0 & 9223372036854775808:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/signbit.go:9:23
_t2=(GOint64.ucompare(_t1,GOint64.make(0x0,0x0))!=0); // _t2 = t1 != 0:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/signbit.go:9:32
}// end SubFn0
}
#if (!php) private #end class Go_math_xatan extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/atan.go:55:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,531,"Go_math_xatan");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Float=0.0;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_xatan(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_xatan(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_xatan
{return new Go_math_xatan(gr,_bds, p_x);
}
public function run():Go_math_xatan {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(531,0);
this.SubFn0();
this.setPH(547);
_res= _t21;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t21 *ssa.Return @ /usr/local/go/src/pkg/math/atan.go:71:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Float;
var _t2:Float;
var _t3:Float;
var _t4:Float;
var _t5:Float;
var _t6:Float;
var _t7:Float;
var _t8:Float;
var _t9:Float;
var _t10:Float;
var _t11:Float;
var _t12:Float;
var _t13:Float;
var _t14:Float;
var _t15:Float;
var _t16:Float;
var _t17:Float;
var _t18:Float;
var _t20:Float;
this.setPH(544);
_t0=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t0 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:68:9
this.setPH(545);
_t1=(Force.toFloat((-0.8750608600031904))*Force.toFloat(_t0)); // _t1 = -1750121720006380824557/2000000000000000000000:float64 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:16
_t2=(Force.toFloat(_t1)+Force.toFloat((-16.157537187333652))); // _t2 = t1 + -1615753718733365076637/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:18
_t3=(Force.toFloat(_t2)*Force.toFloat(_t0)); // _t3 = t2 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:22
_t4=(Force.toFloat(_t3)+Force.toFloat((-75.00855792314705))); // _t4 = t3 + -375042789615735233367/5000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:24
_t5=(Force.toFloat(_t4)*Force.toFloat(_t0)); // _t5 = t4 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:28
_t6=(Force.toFloat(_t5)+Force.toFloat((-122.88666844901361))); // _t6 = t5 + -122886668449013617341/1000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:30
_t7=(Force.toFloat(_t6)*Force.toFloat(_t0)); // _t7 = t6 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:34
_t8=(Force.toFloat(_t7)+Force.toFloat((-64.85021904942025))); // _t8 = t7 + -6485021904942025371773/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:37
_t9=(Force.toFloat(_t0)*Force.toFloat(_t8)); // _t9 = t0 * t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:8
_t10=(Force.toFloat(_t0)+Force.toFloat(24.858464901423062)); // _t10 = t0 + 1242923245071153148981/50000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:51
_t11=(Force.toFloat(_t10)*Force.toFloat(_t0)); // _t11 = t10 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:55
_t12=(Force.toFloat(_t11)+Force.toFloat(165.02700983169885)); // _t12 = t11 + 825135049158494271023/5000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:57
_t13=(Force.toFloat(_t12)*Force.toFloat(_t0)); // _t13 = t12 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:61
_t14=(Force.toFloat(_t13)+Force.toFloat(432.88106049129027)); // _t14 = t13 + 4328810604912902668951/10000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:63
_t15=(Force.toFloat(_t14)*Force.toFloat(_t0)); // _t15 = t14 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:67
_t16=(Force.toFloat(_t15)+Force.toFloat(485.3903996359137)); // _t16 = t15 + 1213475999089784241217/2500000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:69
_t17=(Force.toFloat(_t16)*Force.toFloat(_t0)); // _t17 = t16 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:73
_t18=(Force.toFloat(_t17)+Force.toFloat(194.5506571482614)); // _t18 = t17 + 77820262859304558577/400000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:76
_t19=Force.floatDiv(Force.toFloat(_t9),Force.toFloat(_t18)); // _t19 = t9 / t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:43
this.setPH(546);
_t20=(Force.toFloat(p_x)*Force.toFloat(_t19)); // _t20 = x * t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:70:7
_t21=(Force.toFloat(_t20)+Force.toFloat(p_x)); // _t21 = t20 + x *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:70:10
}// end SubFn0
}
#if js @:expose("Go_math_Cbrt") #end class Go_math_Cbrt extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/cbrt.go:21:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4367,"Go_math_Cbrt");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _SF2:StackFrame;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _SF3:StackFrame;
var _t8:{r0:Float,r1:Int}=null;
var _t9:Float=0.0;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Bool=false;
var _t13:Int=0;
var _t14:Int=0;
var _t15:Int=0;
var _t16:Int=0;
var _t17:Bool=false;
var _t18:Float=0.0;
var _t19:Int=0;
var _SF4:StackFrame;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Bool=false;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Cbrt(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Cbrt(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Cbrt
{return new Go_math_Cbrt(gr,_bds, p_x);
}
public function run():Go_math_Cbrt {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4367,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(4367,1);
this.setPH(4385);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/cbrt.go:39:3

case 2: // switch.next
this.setLatest(4385,2);
this.SubFn1();
_Phi=2;
case 3: // binop.rhs
this.setLatest(4385,3);
this.setPH(4384);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -1;
return this;
case -1:
this.setLatest(4384,-1);
_t2=_SF1.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/cbrt.go:38:34
this.SubFn2();
_Phi=3;
case 4: // binop.done
this.setLatest(4384,4);
_t3=((_Phi==0)?true:(_Phi==5)?true:(_Phi==3)?_t2:false); // _t3 = phi [0.entry: true:bool, 5.cond.false: true:bool, 3.binop.rhs: t2] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:38:26
this.SubFn3();
_Phi=4;
case 5: // cond.false
this.setLatest(4384,5);
_SF2=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -2;
return this;
case -2:
this.setLatest(4384,-2);
_t4=_SF2.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/cbrt.go:38:22
this.SubFn4();
_Phi=5;
case 6: // if.then
this.setLatest(4384,6);
this.SubFn5();
_Phi=6;
case 7: // if.done
this.setLatest(4384,7);
this.setPH(4367);
_t6=((_Phi==2)?p_x:(_Phi==6)?_t5:0.0); // _t6 = phi [2.switch.next: x, 6.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:21:11
this.setPH(4387);
_t7=((_Phi==2)?false:(_Phi==6)?true:false); // _t7 = phi [2.switch.next: false:bool, 6.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:41:2
this.setPH(4393);
_SF3=Go_math_frexp.call(this._goroutine,[],_t6);
_Next = -3;
return this;
case -3:
this.setLatest(4393,-3);
_t8=_SF3.res();
 // _t8 = Frexp(t6) *ssa.Call @ /usr/local/go/src/pkg/math/cbrt.go:47:15
this.SubFn6();
_Phi=7;
case 8: // if.then
this.setLatest(4393,8);
this.SubFn7();
_Phi=8;
case 9: // if.done
this.setLatest(4393,9);
_t15=((_Phi==7)?_t10:(_Phi==8)?_t14:0); // _t15 = phi [7.if.done: t10, 8.if.then: t14] #e *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:47:5
this.setPH(4394);
_t16=((_Phi==7)?_t11:(_Phi==8)?_t13:0); // _t16 = phi [7.if.done: t11, 8.if.then: t13] #m *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:48:2
this.SubFn8();
_Phi=9;
case 10: // switch.done
this.setLatest(4394,10);
this.setPH(4393);
_t18=((_Phi==11)?_t43:(_Phi==12)?_t49:(_Phi==14)?_t56:0.0); // _t18 = phi [11.switch.body: t43, 12.switch.body: t49, 14.switch.next: t56] #f *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:47:2
this.SubFn9();
this.setPH(4409);
_SF4=Go_math_ldexp.call(this._goroutine,[],_t18,_t19);
_Next = -4;
return this;
case -4:
this.setLatest(4409,-4);
_t20=_SF4.res();
 // _t20 = Ldexp(t18, t19) *ssa.Call @ /usr/local/go/src/pkg/math/cbrt.go:63:12
this.SubFn10();
_Phi=10;
case 11: // switch.body
this.setLatest(4409,11);
this.SubFn11();
_Phi=11;
case 12: // switch.body
this.setLatest(4409,12);
this.SubFn12();
_Phi=12;
case 13: // switch.next
this.setLatest(4409,13);
this.SubFn13();
_Phi=13;
case 14: // switch.next
this.setLatest(4409,14);
this.SubFn14();
_Phi=14;
case 15: // if.then
this.setLatest(4409,15);
this.SubFn15();
_Phi=15;
case 16: // if.done
this.setLatest(4409,16);
_t58=((_Phi==10)?_t38:(_Phi==15)?_t57:0.0); // _t58 = phi [10.switch.done: t38, 15.if.then: t57] #y *ssa.Phi @ /usr/local/go/src/pkg/math/cbrt.go:63:2
this.setPH(4421);
_res= _t58;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t58 *ssa.Return @ /usr/local/go/src/pkg/math/cbrt.go:75:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4384);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:38:9
_Next=_t0 ? 4 : 5; // if t0 goto 4.binop.done else 5.cond.false *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:38:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(4388);
_t1=(Force.toFloat(p_x)<Force.toFloat(0)); // _t1 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:42:7
_Next=_t1 ? 6 : 7; // if t1 goto 6.if.then else 7.if.done *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:42:7
}// end SubFn1
private inline  function SubFn2():Void {
_Next=4; // jump 4.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:42:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 1 : 2; // if t3 goto 1.switch.body else 2.switch.next *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:42:7
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t4 ? 4 : 3; // if t4 goto 4.binop.done else 3.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:42:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(4389);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/cbrt.go:43:7
_Next=7; // jump 7.if.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:43:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t12:Bool;
_t9=_t8.r0; // _t9 = extract t8 #0 *ssa.Extract near /usr/local/go/src/pkg/math/cbrt.go:43:7
_t10=_t8.r1; // _t10 = extract t8 #1 *ssa.Extract near /usr/local/go/src/pkg/math/cbrt.go:43:7
this.setPH(4394);
_t11=Force.intMod(_t10,3, 0); // _t11 = t10 % 3:int *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:48:9
this.setPH(4395);
_t12=(_t11>0); // _t12 = t11 > 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:49:7
_Next=_t12 ? 8 : 9; // if t12 goto 8.if.then else 9.if.done *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:49:7
}// end SubFn6
private inline  function SubFn7():Void {
_t13=(_t11-3); // _t13 = t11 - 3:int *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:49:7
_t14=(_t10-_t13); // _t14 = t10 - t13 *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:49:7
_Next=9; // jump 9.if.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:49:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t17:Bool;
_t17=(_t16==0); // _t17 = t16 == 0:int *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:49:7
_Next=_t17 ? 11 : 13; // if t17 goto 11.switch.body else 13.switch.next *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:49:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(4409);
_t19=Force.intDiv(_t15,3,0); // _t19 = t15 / 3:int *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:63:17
}// end SubFn9
private inline  function SubFn10():Void {
var _t21:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t28:Float;
var _t29:Float;
var _t30:Float;
var _t32:Float;
var _t33:Float;
var _t34:Float;
var _t35:Float;
var _t36:Float;
var _t37:Float;
this.setPH(4412);
_t21=(Force.toFloat(_t20)*Force.toFloat(_t20)); // _t21 = t20 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:66:9
_t22=(Force.toFloat(_t21)*Force.toFloat(_t20)); // _t22 = t21 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:66:13
this.setPH(4413);
_t23=(Force.toFloat(_t22)+Force.toFloat(_t6)); // _t23 = t22 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:67:9
this.setPH(4414);
_t24=(Force.toFloat(_t23)+Force.toFloat(_t6)); // _t24 = t23 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:68:10
_t25=(Force.toFloat(_t22)+Force.toFloat(_t23)); // _t25 = t22 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:68:20
_t26=Force.floatDiv(Force.toFloat(_t24),Force.toFloat(_t25)); // _t26 = t24 / t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:68:15
_t27=(Force.toFloat(_t20)*Force.toFloat(_t26)); // _t27 = t20 * t26 *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:68:15
this.setPH(4416);
_t28=(Force.toFloat(_t27)*Force.toFloat(_t27)); // _t28 = t27 * t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:70:8
_t29=(Force.toFloat(_t28)*Force.toFloat(_t27)); // _t29 = t28 * t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:70:10
_t30=(Force.toFloat(_t29)-Force.toFloat(_t6)); // _t30 = t29 - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:70:13
_t31=Force.floatDiv(Force.toFloat(_t30),Force.toFloat(_t6)); // _t31 = t30 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:70:18
this.setPH(4417);
_t32=(Force.toFloat(0.1728395061728395)*Force.toFloat(_t31)); // _t32 = 14/81:float64 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:24
_t33=(Force.toFloat(_t32)-Force.toFloat(0.2222222222222222)); // _t33 = t32 - 2/9:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:26
_t34=(Force.toFloat(_t33)*Force.toFloat(_t31)); // _t34 = t33 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:37
_t35=(Force.toFloat(_t34)+Force.toFloat(0.3333333333333333)); // _t35 = t34 + 1/3:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:40
_t36=(Force.toFloat(_t27)*Force.toFloat(_t35)); // _t36 = t27 * t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:9
_t37=(Force.toFloat(_t36)*Force.toFloat(_t31)); // _t37 = t36 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:55
_t38=(Force.toFloat(_t27)-Force.toFloat(_t37)); // _t38 = t27 - t37 *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:71:55
_Next=_t7 ? 15 : 16; // if t7 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:71:55
}// end SubFn10
private inline  function SubFn11():Void {
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
this.setPH(4401);
_t39=(Force.toFloat(0.1662848358)*Force.toFloat(_t9)); // _t39 = 831424179/5000000000:float64 * t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:9
_t40=(Force.toFloat(_t39)+Force.toFloat(1.096040958)); // _t40 = t39 + 548020479/500000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:12
_t41=(Force.toFloat(0.5649335816)+Force.toFloat(_t9)); // _t41 = 706166977/1250000000:float64 + t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:25
_t42=Force.floatDiv(Force.toFloat(0.4105032829),Force.toFloat(_t41)); // _t42 = 4105032829/10000000000:float64 / t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:21
_t43=(Force.toFloat(_t40)-Force.toFloat(_t42)); // _t43 = t40 - t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:17
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:55:17
}// end SubFn11
private inline  function SubFn12():Void {
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
_t44=(Force.toFloat(_t9)*Force.toFloat(0.5)); // _t44 = t9 * 1/2:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:55:17
this.setPH(4404);
_t45=(Force.toFloat(0.2639607233)*Force.toFloat(_t44)); // _t45 = 2639607233/10000000000:float64 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:9
_t46=(Force.toFloat(_t45)+Force.toFloat(0.8699282849)); // _t46 = t45 + 8699282849/10000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:12
_t47=(Force.toFloat(0.2824667908)+Force.toFloat(_t44)); // _t47 = 706166977/2500000000:float64 + t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:25
_t48=Force.floatDiv(Force.toFloat(0.1629083358),Force.toFloat(_t47)); // _t48 = 814541679/5000000000:float64 / t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:21
_t49=(Force.toFloat(_t46)-Force.toFloat(_t48)); // _t49 = t46 - t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:17
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:58:17
}// end SubFn12
private inline  function SubFn13():Void {
var _t50:Bool;
_t50=(_t16==(-1)); // _t50 = t16 == -1:int *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:58:17
_Next=_t50 ? 12 : 14; // if t50 goto 12.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/math/cbrt.go:58:17
}// end SubFn13
private inline  function SubFn14():Void {
var _t52:Float;
var _t53:Float;
var _t54:Float;
var _t55:Float;
_t51=(Force.toFloat(_t9)*Force.toFloat(0.25)); // _t51 = t9 * 1/4:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/cbrt.go:58:17
this.setPH(4407);
_t52=(Force.toFloat(0.4190115298)*Force.toFloat(_t51)); // _t52 = 2095057649/5000000000:float64 * t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:9
_t53=(Force.toFloat(_t52)+Force.toFloat(0.6904625373)); // _t53 = t52 + 6904625373/10000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:12
_t54=(Force.toFloat(0.1412333954)+Force.toFloat(_t51)); // _t54 = 706166977/5000000000:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:25
_t55=Force.floatDiv(Force.toFloat(0.0646502159),Force.toFloat(_t54)); // _t55 = 646502159/10000000000:float64 / t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:21
_t56=(Force.toFloat(_t53)-Force.toFloat(_t55)); // _t56 = t53 - t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:17
_Next=10; // jump 10.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:61:17
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(4419);
_t57=(-Force.toFloat(_t38)); // _t57 = -t38 *ssa.UnOp @ /usr/local/go/src/pkg/math/cbrt.go:73:7
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/cbrt.go:73:7
}// end SubFn15
}
#if (!php) private #end class Go_main_measure extends StackFrameBasis implements StackFrame {  // interfaces.go:47:6
var p_g:Interface;
public function new(gr:Int,_bds:Array<Dynamic>, p_g : Interface) {
super(gr,47,"Go_main_measure");
this._bds=_bds;
this.p_g=p_g;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t3:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_g : Interface) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_measure(0,[], p_g).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr, p_g : Interface) : Void {
var _sf=new Go_main_measure(_gr,[], p_g).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_g : Interface) : Go_main_measure
{return new Go_main_measure(gr,_bds, p_g);
}
public function run():Go_main_measure {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(47,0);
this.SubFn0();
this.setPH(49);
_SF1=Interface.invoke(p_g,"area",[this._goroutine,[],p_g.val]);_Next = -1;
return this;
case -1:
this.setLatest(49,-1);
_t1=_SF1.res();
 // _t1 = invoke g.area() *ssa.Call @ interfaces.go:49:16
this.SubFn1();
this.setPH(50);
_SF2=Interface.invoke(p_g,"perim",[this._goroutine,[],p_g.val]);_Next = -2;
return this;
case -2:
this.setLatest(50,-2);
_t3=_SF2.res();
 // _t3 = invoke g.perim() *ssa.Call @ interfaces.go:50:17
this.SubFn2();
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near interfaces.go:50:17

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(48);
trace(Go.CPos(48),p_g); // _t0 = println(g) *ssa.Call @ interfaces.go:48:9 [REGISTER VALUE UN-USED]
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(49);
trace(Go.CPos(49),_t1); // _t2 = println(t1) *ssa.Call @ interfaces.go:49:9 [REGISTER VALUE UN-USED]
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(50);
trace(Go.CPos(50),_t3); // _t4 = println(t3) *ssa.Call @ interfaces.go:50:9 [REGISTER VALUE UN-USED]
}// end SubFn2
}
#if js @:expose("Go_utf8_ValidRune") #end class Go_utf8_ValidRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:433:6
var p_r:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Int) {
super(gr,5677,"Go_utf8_ValidRune");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Int) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_ValidRune(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Int) : Bool {
var _sf=new Go_utf8_ValidRune(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Int) : Go_utf8_ValidRune
{return new Go_utf8_ValidRune(gr,_bds, p_r);
}
public function run():Go_utf8_ValidRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5677,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(5677,1);
this.setPH(5680);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:436:3

case 2: // switch.body
this.setLatest(5680,2);
this.setPH(5682);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:438:3

case 3: // switch.next
this.setLatest(5682,3);
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(5682,4);
this.setPH(5684);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:440:3

case 5: // switch.next
this.setLatest(5684,5);
this.SubFn2();
_Phi=5;
case 6: // binop.rhs
this.setLatest(5684,6);
this.SubFn3();
_Phi=6;
case 7: // binop.done
this.setLatest(5684,7);
this.setPH(5681);
_t4=((_Phi==3)?false:(_Phi==6)?_t3:false); // _t4 = phi [3.switch.next: false:bool, 6.binop.rhs: t3] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:25
this.SubFn4();
_Phi=7;
case 8: // switch.next
this.setLatest(5681,8);
this.setPH(5686);
_res= true;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:442:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(5679);
_t0=(p_r<0); // _t0 = r < 0:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:435:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:435:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(5681);
_t1=(55296<=p_r); // _t1 = 55296:rune <= r *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:20
_Next=_t1 ? 6 : 7; // if t1 goto 6.binop.rhs else 7.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:20
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(5683);
_t2=(p_r>1114111); // _t2 = r > 1114111:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:439:9
_Next=_t2 ? 4 : 8; // if t2 goto 4.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:439:9
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(5681);
_t3=(p_r<=57343); // _t3 = r <= 57343:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:30
_Next=7; // jump 7.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:30
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t4 ? 2 : 5; // if t4 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:437:30
}// end SubFn4
}
#if js @:expose("Go_utf16_Encode") #end class Go_utf16_Encode extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf16/utf16.go:56:6
var p_s:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Slice) {
super(gr,5192,"Go_utf16_Encode");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Int=0;
var _t2:Int=0;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Pointer=null;
var _t7:Int=0;
var _t8:Bool=false;
var _t9:Slice=null;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Int=0;
var _t13:Int=0;
var _t14:Int=0;
var _t15:Bool=false;
var _t16:Pointer=null;
var _t17:Int=0;
var _t18:Bool=false;
var _t19:Slice=null;
var _t20:Int=0;
var _t21:Pointer=null;
var _t22:Int=0;
var _t23:Int=0;
var _t24:Bool=false;
var _t25:Bool=false;
var _t26:Bool=false;
var _t27:Bool=false;
var _t28:Bool=false;
var _SF1:StackFrame;
var _t29:{r0:Int,r1:Int}=null;
var _t30:Int=0;
var _t31:Int=0;
var _t32:Pointer=null;
var _t33:Int=0;
var _t34:Int=0;
var _t35:Pointer=null;
var _t36:Int=0;
var _t37:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_Encode(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Slice) : Slice {
var _sf=new Go_utf16_Encode(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Slice) : Go_utf16_Encode
{return new Go_utf16_Encode(gr,_bds, p_s);
}
public function run():Go_utf16_Encode {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5192,0);
this.SubFn0();
_Phi=0;
case 1: // rangeindex.loop
this.setLatest(5192,1);
this.setPH(5193);
_t2=((_Phi==0)?_t0:(_Phi==2)?_t2:(_Phi==4)?_t11:0); // _t2 = phi [0.entry: t0, 2.rangeindex.body: t2, 4.if.then: t11] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:2
_t3=((_Phi==0)?(-1):(_Phi==2)?_t4:(_Phi==4)?_t4:0); // _t3 = phi [0.entry: -1:int, 2.rangeindex.body: t4, 4.if.then: t4] *ssa.Phi near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:2
this.SubFn1();
_Phi=1;
case 2: // rangeindex.body
this.setLatest(5193,2);
this.SubFn2();
_Phi=2;
case 3: // rangeindex.done
this.setLatest(5193,3);
this.SubFn3();
_Phi=3;
case 4: // if.then
this.setLatest(5193,4);
this.SubFn4();
_Phi=4;
case 5: // rangeindex.loop
this.setLatest(5193,5);
_t12=((_Phi==3)?0:(_Phi==9)?_t23:(_Phi==15)?_t37:0); // _t12 = phi [3.rangeindex.done: 0:int, 9.switch.body: t23, 15.switch.next: t37] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:2
_t13=((_Phi==3)?(-1):(_Phi==9)?_t14:(_Phi==15)?_t14:0); // _t13 = phi [3.rangeindex.done: -1:int, 9.switch.body: t14, 15.switch.next: t14] *ssa.Phi near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:2
this.SubFn5();
_Phi=5;
case 6: // rangeindex.body
this.setLatest(5193,6);
this.SubFn6();
_Phi=6;
case 7: // rangeindex.done
this.setLatest(5193,7);
this.SubFn7();
this.setPH(5217);
_res= _t19;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:81:2

case 8: // switch.body
this.setLatest(5217,8);
this.SubFn8();
_Phi=8;
case 9: // switch.body
this.setLatest(5217,9);
this.setPH(5202);
_t20=((_Phi==8)?65533:(_Phi==14)?_t17:0); // _t20 = phi [8.switch.body: 65533:rune, 14.switch.next: t17] #v *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:66:9
this.SubFn9();
_Phi=9;
case 10: // switch.next
this.setLatest(5202,10);
this.SubFn10();
_Phi=10;
case 11: // switch.next
this.setLatest(5202,11);
this.SubFn11();
_Phi=11;
case 12: // binop.rhs
this.setLatest(5202,12);
this.SubFn12();
_Phi=12;
case 13: // binop.done
this.setLatest(5202,13);
this.setPH(5204);
_t27=((_Phi==10)?false:(_Phi==12)?_t26:false); // _t27 = phi [10.switch.next: false:bool, 12.binop.rhs: t26] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:26
this.SubFn13();
_Phi=13;
case 14: // switch.next
this.setLatest(5204,14);
this.SubFn14();
_Phi=14;
case 15: // switch.next
this.setLatest(5204,15);
this.setPH(5211);
_SF1=Go_utf16_EncodeRune.call(this._goroutine,[],_t17);
_Next = -1;
return this;
case -1:
this.setLatest(5211,-1);
_t29=_SF1.res();
 // _t29 = EncodeRune(t17) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:75:24
this.SubFn15();
_Phi=15;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5193);
_t0=({var _v=p_s;_v==null?0:_v.len();}); // _t0 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
_t1=({var _v=p_s;_v==null?0:_v.len();}); // _t1 = len(s) *ssa.Call near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
_Next=1; // jump 1.rangeindex.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
}// end SubFn0
private inline  function SubFn1():Void {
var _t5:Bool;
_t4=(_t3+1); // _t4 = t3 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
_t5=(_t4<_t1); // _t5 = t4 < t1 *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
_Next=_t5 ? 2 : 3; // if t5 goto 2.rangeindex.body else 3.rangeindex.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
}// end SubFn1
private inline  function SubFn2():Void {
var _t6:Pointer;
var _t8:Bool;
if((_t4<0)||(_t4>=p_s.len())) Scheduler.ioor(); // _t6 = &s[t4] *ssa.IndexAddr near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10 [POINTER]
_t6=p_s.addr(_t4);  // _t6 = &s[t4] *ssa.IndexAddr near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10 [POINTER]
_t7=(_t6.load()|0); // _t7 = *t6 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:57:10
this.setPH(5195);
_t8=(_t7>=65536); // _t8 = t7 >= 65536:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:59:8
_Next=_t8 ? 4 : 1; // if t8 goto 4.if.then else 1.rangeindex.loop *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:59:8
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(5200);
_t9=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t2) _v[_i]=0; _v;}),0,_t2); // _t9 = make []uint16 t2 t2 *ssa.MakeSlice @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
_t10=({var _v=p_s;_v==null?0:_v.len();}); // _t10 = len(s) *ssa.Call near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
_Next=5; // jump 5.rangeindex.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
}// end SubFn3
private inline  function SubFn4():Void {
_t11=(_t2+1); // _t11 = t2 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
_Next=1; // jump 1.rangeindex.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
}// end SubFn4
private inline  function SubFn5():Void {
var _t15:Bool;
_t14=(_t13+1); // _t14 = t13 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
_t15=(_t14<_t10); // _t15 = t14 < t10 *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
_Next=_t15 ? 6 : 7; // if t15 goto 6.rangeindex.body else 7.rangeindex.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
}// end SubFn5
private inline  function SubFn6():Void {
var _t16:Pointer;
var _t18:Bool;
if((_t14<0)||(_t14>=p_s.len())) Scheduler.ioor(); // _t16 = &s[t14] *ssa.IndexAddr near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11 [POINTER]
_t16=p_s.addr(_t14);  // _t16 = &s[t14] *ssa.IndexAddr near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11 [POINTER]
_t17=(_t16.load()|0); // _t17 = *t16 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:64:11
this.setPH(5204);
_t18=(_t17<0); // _t18 = t17 < 0:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:10
_Next=_t18 ? 8 : 10; // if t18 goto 8.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:10
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(5217);
_t19=_t9.subSlice(0,_t12); // _t19 = slice t9[0:int:t12] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:81:10
}// end SubFn7
private inline  function SubFn8():Void {
_Next=9; // jump 9.switch.body *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:81:10
}// end SubFn8
private inline  function SubFn9():Void {
var _t21:Pointer;
var _t22:Int;
this.setPH(5208);
if((_t12<0)||(_t12>=_t9.len())) Scheduler.ioor(); // _t21 = &t9[t12] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:5 [POINTER]
_t21=_t9.addr(_t12);  // _t21 = &t9[t12] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:5 [POINTER]
_t22=_t20; // _t22 = convert uint16 <- rune (t20) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:17
_t21.store(_t22); // *t21 = t22 *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:17
_t23=(_t12+1); // _t23 = t12 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:17
_Next=5; // jump 5.rangeindex.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:72:17
}// end SubFn9
private inline  function SubFn10():Void {
var _t24:Bool;
this.setPH(5204);
_t24=(55296<=_t17); // _t24 = 55296:rune <= t17 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:21
_Next=_t24 ? 12 : 13; // if t24 goto 12.binop.rhs else 13.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:21
}// end SubFn10
private inline  function SubFn11():Void {
var _t25:Bool;
_t25=(_t17>1114111); // _t25 = t17 > 1114111:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:42
_Next=_t25 ? 8 : 14; // if t25 goto 8.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:42
}// end SubFn11
private inline  function SubFn12():Void {
_t26=(_t17<57344); // _t26 = t17 < 57344:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:31
_Next=13; // jump 13.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:31
}// end SubFn12
private inline  function SubFn13():Void {
_Next=_t27 ? 8 : 11; // if t27 goto 8.switch.body else 11.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:68:31
}// end SubFn13
private inline  function SubFn14():Void {
var _t28:Bool;
this.setPH(5207);
_t28=(_t17<65536); // _t28 = t17 < 65536:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:71:10
_Next=_t28 ? 9 : 15; // if t28 goto 9.switch.body else 15.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:71:10
}// end SubFn14
private inline  function SubFn15():Void {
var _t32:Pointer;
var _t33:Int;
var _t34:Int;
var _t35:Pointer;
var _t36:Int;
_t30=_t29.r0; // _t30 = extract t29 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf16/utf16.go:71:10
_t31=_t29.r1; // _t31 = extract t29 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf16/utf16.go:71:10
this.setPH(5212);
if((_t12<0)||(_t12>=_t9.len())) Scheduler.ioor(); // _t32 = &t9[t12] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:76:5 [POINTER]
_t32=_t9.addr(_t12);  // _t32 = &t9[t12] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:76:5 [POINTER]
_t33=_t30; // _t33 = convert uint16 <- rune (t30) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:76:17
_t32.store(_t33); // *t32 = t33 *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:76:17
this.setPH(5213);
_t34=(_t12+1); // _t34 = t12 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:7
if((_t34<0)||(_t34>=_t9.len())) Scheduler.ioor(); // _t35 = &t9[t34] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:5 [POINTER]
_t35=_t9.addr(_t34);  // _t35 = &t9[t34] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:5 [POINTER]
_t36=_t31; // _t36 = convert uint16 <- rune (t31) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:19
_t35.store(_t36); // *t35 = t36 *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:19
_t37=(_t12+2); // _t37 = t12 + 2:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:19
_Next=5; // jump 5.rangeindex.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:77:19
}// end SubFn15
}
#if (!php) private #end class Go_math_frexp extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/frexp.go:18:6
var p_f:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float) {
super(gr,1390,"Go_math_frexp");
this._bds=_bds;
this.p_f=p_f;
Scheduler.push(gr,this);
}
var _res:{r0:Float, r1:Int};
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Bool=false;
var _SF2:StackFrame;
var _t2:{r0:Float,r1:Int}=null;
var _t3:Float=0.0;
var _t4:Int=0;
var _SF3:StackFrame;
var _t5:GOint64=null;
var _t6:GOint64=null;
var _t7:GOint64=null;
var _t8:Int=0;
var _t9:Int=0;
var _t10:Int=0;
var _t11:Int=0;
var _t12:GOint64=null;
var _t13:GOint64=null;
var _SF4:StackFrame;
var _t14:Float=0.0;
var _SF5:StackFrame;
var _t15:Bool=false;
var _t16:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float) : {r0:Float, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_frexp(0,[], p_f).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float) : {r0:Float, r1:Int} {
var _sf=new Go_math_frexp(_gr,[], p_f).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float) : Go_math_frexp
{return new Go_math_frexp(gr,_bds, p_f);
}
public function run():Go_math_frexp {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1390,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1390,1);
this.setPH(1394);
_res= {r0:p_f,r1:0};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return f, 0:int *ssa.Return @ /usr/local/go/src/pkg/math/frexp.go:22:3

case 2: // switch.body
this.setLatest(1394,2);
this.setPH(1396);
_res= {r0:p_f,r1:0};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return f, 0:int *ssa.Return @ /usr/local/go/src/pkg/math/frexp.go:24:3

case 3: // switch.next
this.setLatest(1396,3);
this.setPH(1395);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_f,0);
_Next = -1;
return this;
case -1:
this.setLatest(1395,-1);
_t1=_SF1.res();
 // _t1 = IsInf(f, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/frexp.go:23:12
this.SubFn1();
_Phi=3;
case 4: // switch.next
this.setLatest(1395,4);
this.setPH(1398);
_SF2=Go_math_normalize.call(this._goroutine,[],p_f);
_Next = -2;
return this;
case -2:
this.setLatest(1398,-2);
_t2=_SF2.res();
 // _t2 = normalize(f) *ssa.Call @ /usr/local/go/src/pkg/math/frexp.go:26:20
this.SubFn2();
this.setPH(1399);
_SF3=Go_math_Float64bits.call(this._goroutine,[],_t3);
_Next = -3;
return this;
case -3:
this.setLatest(1399,-3);
_t5=_SF3.res();
 // _t5 = Float64bits(t3) *ssa.Call @ /usr/local/go/src/pkg/math/frexp.go:27:18
this.SubFn3();
this.setPH(1403);
_SF4=Go_math_Float64frombits.call(this._goroutine,[],_t13);
_Next = -4;
return this;
case -4:
this.setLatest(1403,-4);
_t14=_SF4.res();
 // _t14 = Float64frombits(t13) *ssa.Call @ /usr/local/go/src/pkg/math/frexp.go:31:24
this.setPH(1404);
_res= {r0:_t14,r1:_t11};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t14, t11 *ssa.Return @ /usr/local/go/src/pkg/math/frexp.go:32:2

case 5: // binop.rhs
this.setLatest(1404,5);
this.setPH(1395);
_SF5=Go_math_IsNaN.call(this._goroutine,[],p_f);
_Next = -5;
return this;
case -5:
this.setLatest(1395,-5);
_t15=_SF5.res();
 // _t15 = IsNaN(f) *ssa.Call @ /usr/local/go/src/pkg/math/frexp.go:23:27
this.SubFn4();
_Phi=5;
case 6: // binop.done
this.setLatest(1395,6);
_t16=((_Phi==3)?true:(_Phi==5)?_t15:false); // _t16 = phi [3.switch.next: true:bool, 5.binop.rhs: t15] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/frexp.go:23:19
this.SubFn5();
_Phi=6;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(1393);
_t0=(Force.toFloat(p_f)==Force.toFloat(0)); // _t0 = f == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/frexp.go:21:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/frexp.go:21:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 6 : 5; // if t1 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/frexp.go:21:9
}// end SubFn1
private inline  function SubFn2():Void {
_t3=_t2.r0; // _t3 = extract t2 #0 *ssa.Extract near /usr/local/go/src/pkg/math/frexp.go:21:9
_t4=_t2.r1; // _t4 = extract t2 #1 *ssa.Extract near /usr/local/go/src/pkg/math/frexp.go:21:9
}// end SubFn2
private inline  function SubFn3():Void {
var _t6:GOint64;
var _t7:GOint64;
var _t8:Int;
var _t9:Int;
var _t10:Int;
this.setPH(1400);
_t6=Force.toUint64(GOint64.ushr(_t5,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t6 = t5 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/frexp.go:28:15
_t7=Force.toUint64(GOint64.and(_t6,GOint64.make(0x0,0x7ff))); // _t7 = t6 & 2047:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/frexp.go:28:23
_t8=GOint64.toInt(_t7); // _t8 = convert int <- uint64 (t7) *ssa.Convert @ /usr/local/go/src/pkg/math/frexp.go:28:12
_t9=(_t8-1023); // _t9 = t8 - 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/frexp.go:28:30
_t10=(_t9+1); // _t10 = t9 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/frexp.go:28:37
_t11=(_t4+_t10); // _t11 = t4 + t10 *ssa.BinOp near /usr/local/go/src/pkg/math/frexp.go:28:37
_t12=Force.toUint64(GOint64.and(_t5,GOint64.xor(GOint64.make(0x7ff00000,0x0),GOint64.make(-1,-1)))); // _t12 = t5 &^ 9218868437227405312:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/frexp.go:28:37
_t13=Force.toUint64(GOint64.or(_t12,GOint64.make(0x3fe00000,0x0))); // _t13 = t12 | 4602678819172646912:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/frexp.go:28:37
}// end SubFn3
private inline  function SubFn4():Void {
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/frexp.go:28:37
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t16 ? 2 : 4; // if t16 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/frexp.go:28:37
}// end SubFn5
}
#if (!php) private #end class Go_math_sincos extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sincos.go:17:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2762,"Go_math_sincos");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:{r0:Float, r1:Float};
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Float=0.0;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Bool=false;
var _t10:Float=0.0;
var _t11:GOint64=null;
var _t12:Float=0.0;
var _t13:GOint64=null;
var _t14:Bool=false;
var _t15:GOint64=null;
var _t16:Float=0.0;
var _t17:GOint64=null;
var _t18:Float=0.0;
var _t19:GOint64=null;
var _t20:Bool=false;
var _t21:GOint64=null;
var _t22:Bool=false;
var _t23:Bool=false;
var _t24:Bool=false;
var _t25:Bool=false;
var _t26:GOint64=null;
var _t27:Bool=false;
var _t28:Bool=false;
var _t29:Bool=false;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Array<Float>=null;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Array<Float>=null;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Array<Float>=null;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Array<Float>=null;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Array<Float>=null;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Array<Float>=null;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Array<Float>=null;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Array<Float>=null;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Array<Float>=null;
var _t73:Float=0.0;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Array<Float>=null;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Array<Float>=null;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Array<Float>=null;
var _t85:Float=0.0;
var _t86:Float=0.0;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _t89:Bool=false;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Bool=false;
var _t93:Float=0.0;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _t96:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : {r0:Float, r1:Float} {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_sincos(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : {r0:Float, r1:Float} {
var _sf=new Go_math_sincos(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_sincos
{return new Go_math_sincos(gr,_bds, p_x);
}
public function run():Go_math_sincos {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2762,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2762,1);
this.setPH(2772);
_res= {r0:p_x,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x, 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/sincos.go:27:3

case 2: // switch.body
this.setLatest(2772,2);
this.setPH(2774);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/sincos.go:29:13
_t2=Math.NaN; // _t2 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/sincos.go:29:20
_res= {r0:_t1,r1:_t2};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1, t2 *ssa.Return @ /usr/local/go/src/pkg/math/sincos.go:29:3

case 3: // switch.next
this.setLatest(2774,3);
this.setPH(2773);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(2773,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/sincos.go:28:12
this.SubFn1();
_Phi=3;
case 4: // switch.next
this.setLatest(2773,4);
this.SubFn2();
_Phi=4;
case 5: // binop.rhs
this.setLatest(2773,5);
_SF4=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -4;
return this;
case -4:
this.setLatest(2773,-4);
_t5=_SF4.res();
 // _t5 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/sincos.go:28:24
this.SubFn3();
_Phi=5;
case 6: // binop.done
this.setLatest(2773,6);
_t6=((_Phi==3)?true:(_Phi==5)?_t5:false); // _t6 = phi [3.switch.next: true:bool, 5.binop.rhs: t5] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:28:16
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(2773,7);
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(2773,8);
this.setPH(2762);
_t8=((_Phi==4)?p_x:(_Phi==7)?_t7:0.0); // _t8 = phi [4.switch.next: x, 7.if.then: t7] #x *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:17:13
this.setPH(2778);
_t9=((_Phi==4)?false:(_Phi==7)?true:false); // _t9 = phi [4.switch.next: false:bool, 7.if.then: true:bool] #sinSign *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:33:2
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(2778,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(2778,10);
this.setPH(2784);
_t17=((_Phi==8)?_t11:(_Phi==9)?_t15:GOint64.make(0,0)); // _t17 = phi [8.if.done: t11, 9.if.then: t15] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:39:2
this.setPH(2785);
_t18=((_Phi==8)?_t12:(_Phi==9)?_t16:0.0); // _t18 = phi [8.if.done: t12, 9.if.then: t16] #y *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:40:2
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(2785,11);
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(2785,12);
this.setPH(2778);
_t24=((_Phi==10)?_t9:(_Phi==11)?_t22:false); // _t24 = phi [10.if.done: t9, 11.if.then: t22] #sinSign *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:33:2
_t25=((_Phi==10)?false:(_Phi==11)?_t23:false); // _t25 = phi [10.if.done: false:bool, 11.if.then: t23] #cosSign *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:33:11
this.setPH(2784);
_t26=((_Phi==10)?_t19:(_Phi==11)?_t21:GOint64.make(0,0)); // _t26 = phi [10.if.done: t19, 11.if.then: t21] #j *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:39:2
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(2784,13);
this.SubFn11();
_Phi=13;
case 14: // if.done
this.setLatest(2784,14);
this.setPH(2778);
_t29=((_Phi==12)?_t25:(_Phi==13)?_t28:false); // _t29 = phi [12.if.done: t25, 13.if.then: t28] #cosSign *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:33:11
this.SubFn12();
_Phi=14;
case 15: // if.then
this.setLatest(2778,15);
this.SubFn13();
_Phi=15;
case 16: // if.done
this.setLatest(2778,16);
this.setPH(2762);
_t90=((_Phi==17)?_t88:(_Phi==15)?_t63:0.0); // _t90 = phi [17.cond.false: t88, 15.if.then: t63] #sin *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:17:25
_t91=((_Phi==17)?_t63:(_Phi==15)?_t88:0.0); // _t91 = phi [17.cond.false: t63, 15.if.then: t88] #cos *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:17:30
this.SubFn14();
_Phi=16;
case 17: // cond.false
this.setLatest(2762,17);
this.SubFn15();
_Phi=17;
case 18: // if.then
this.setLatest(2762,18);
this.SubFn16();
_Phi=18;
case 19: // if.done
this.setLatest(2762,19);
_t94=((_Phi==16)?_t91:(_Phi==18)?_t93:0.0); // _t94 = phi [16.if.done: t91, 18.if.then: t93] #cos *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:17:30
this.SubFn17();
_Phi=19;
case 20: // if.then
this.setLatest(2762,20);
this.SubFn18();
_Phi=20;
case 21: // if.done
this.setLatest(2762,21);
_t96=((_Phi==19)?_t90:(_Phi==20)?_t95:0.0); // _t96 = phi [19.if.done: t90, 20.if.then: t95] #sin *ssa.Phi @ /usr/local/go/src/pkg/math/sincos.go:17:25
this.setPH(2813);
_res= {r0:_t96,r1:_t94};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t96, t94 *ssa.Return @ /usr/local/go/src/pkg/math/sincos.go:68:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2771);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:26:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/sincos.go:26:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t3 ? 6 : 5; // if t3 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/sincos.go:26:9
}// end SubFn1
private inline  function SubFn2():Void {
var _t4:Bool;
this.setPH(2779);
_t4=(Force.toFloat(p_x)<Force.toFloat(0)); // _t4 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:34:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:34:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:34:7
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t6 ? 2 : 4; // if t6 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/sincos.go:34:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(2780);
_t7=(-Force.toFloat(p_x)); // _t7 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:35:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:35:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t10:Float;
var _t13:GOint64;
var _t14:Bool;
this.setPH(2784);
_t10=(Force.toFloat(_t8)*Force.toFloat(1.2732395447351625)); // _t10 = t8 * 2867080569611329/2251799813685248:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:39:15
_t11=GOint64.ofFloat(_t10); // _t11 = convert int64 <- float64 (t10) *ssa.Convert @ /usr/local/go/src/pkg/math/sincos.go:39:12
this.setPH(2785);
_t12=GOint64.toFloat(_t11); // _t12 = convert float64 <- int64 (t11) *ssa.Convert @ /usr/local/go/src/pkg/math/sincos.go:40:14
this.setPH(2787);
_t13=Force.toInt64(GOint64.and(_t11,GOint64.make(0x0,0x1))); // _t13 = t11 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:42:6
_t14=(GOint64.compare(_t13,GOint64.make(0x0,0x1))==0); // _t14 = t13 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:42:9
_Next=_t14 ? 9 : 10; // if t14 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:42:9
}// end SubFn6
private inline  function SubFn7():Void {
_t15=Force.toInt64(GOint64.add(_t11,GOint64.make(0x0,0x1))); // _t15 = t11 + 1:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sincos.go:42:9
_t16=(Force.toFloat(_t12)+Force.toFloat(1)); // _t16 = t12 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/sincos.go:42:9
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:42:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t20:Bool;
_t19=Force.toInt64(GOint64.and(_t17,GOint64.make(0x0,0x7))); // _t19 = t17 & 7:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sincos.go:42:9
this.setPH(2792);
_t20=(GOint64.compare(_t19,GOint64.make(0x0,0x3))>0); // _t20 = t19 > 3:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:47:7
_Next=_t20 ? 11 : 12; // if t20 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:47:7
}// end SubFn8
private inline  function SubFn9():Void {
_t21=Force.toInt64(GOint64.sub(_t19,GOint64.make(0x0,0x4))); // _t21 = t19 - 4:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/sincos.go:47:7
this.setPH(2794);
_t22=(!_t9); // _t22 = !t9 *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:49:22
_t23=(!false); // _t23 = !false:bool *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:49:32
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:49:32
}// end SubFn9
private inline  function SubFn10():Void {
var _t27:Bool;
this.setPH(2796);
_t27=(GOint64.compare(_t26,GOint64.make(0x0,0x1))>0); // _t27 = t26 > 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:51:7
_Next=_t27 ? 13 : 14; // if t27 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:51:7
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(2797);
_t28=(!_t25); // _t28 = !t25 *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:52:13
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:52:13
}// end SubFn11
private inline  function SubFn12():Void {
var _t30:Float;
var _t31:Float;
var _t32:Float;
var _t33:Float;
var _t34:Float;
var _t37:Float;
var _t38:Float;
var _t39:Float;
var _t40:Array<Float>;
var _t41:Float;
var _t42:Float;
var _t43:Array<Float>;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Array<Float>;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Array<Float>;
var _t52:Float;
var _t53:Float;
var _t54:Float;
var _t55:Array<Float>;
var _t56:Float;
var _t57:Float;
var _t58:Float;
var _t59:Array<Float>;
var _t60:Float;
var _t61:Float;
var _t62:Float;
var _t64:Float;
var _t65:Array<Float>;
var _t66:Float;
var _t67:Float;
var _t68:Array<Float>;
var _t69:Float;
var _t70:Float;
var _t71:Float;
var _t72:Array<Float>;
var _t73:Float;
var _t74:Float;
var _t75:Float;
var _t76:Array<Float>;
var _t77:Float;
var _t78:Float;
var _t79:Float;
var _t80:Array<Float>;
var _t81:Float;
var _t82:Float;
var _t83:Float;
var _t84:Array<Float>;
var _t85:Float;
var _t86:Float;
var _t87:Float;
var _t89:Bool;
this.setPH(2800);
_t30=(Force.toFloat(_t18)*Force.toFloat(0.7853981256484985)); // _t30 = t18 * 196349531412124633789/250000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:14
_t31=(Force.toFloat(_t8)-Force.toFloat(_t30)); // _t31 = t8 - t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:11
_t32=(Force.toFloat(_t18)*Force.toFloat(3.774894707930798e-08)); // _t32 = t18 * 94372367698269954417/2500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:24
_t33=(Force.toFloat(_t31)-Force.toFloat(_t32)); // _t33 = t31 - t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:21
_t34=(Force.toFloat(_t18)*Force.toFloat(2.6951514290790595e-15)); // _t34 = t18 * 53903028581581190529/20000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:34
_t35=(Force.toFloat(_t33)-Force.toFloat(_t34)); // _t35 = t33 - t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:31
this.setPH(2801);
_t36=(Force.toFloat(_t35)*Force.toFloat(_t35)); // _t36 = t35 * t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:56:10
this.setPH(2802);
_t37=(Force.toFloat(0.5)*Force.toFloat(_t36)); // _t37 = 1/2:float64 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:17
_t38=(Force.toFloat(1)-Force.toFloat(_t37)); // _t38 = 1:float64 - t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:12
_t39=(Force.toFloat(_t36)*Force.toFloat(_t36)); // _t39 = t36 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:25
_t40=Go.math__cos.load(); // _t40 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:25
_t41=_t40[0]; // _t41 = t40[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:39
_t42=(Force.toFloat(_t41)*Force.toFloat(_t36)); // _t42 = t41 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:42
_t43=Go.math__cos.load(); // _t43 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:42
_t44=_t43[1]; // _t44 = t43[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:51
_t45=(Force.toFloat(_t42)+Force.toFloat(_t44)); // _t45 = t42 + t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:46
_t46=(Force.toFloat(_t45)*Force.toFloat(_t36)); // _t46 = t45 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:55
_t47=Go.math__cos.load(); // _t47 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:55
_t48=_t47[2]; // _t48 = t47[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:63
_t49=(Force.toFloat(_t46)+Force.toFloat(_t48)); // _t49 = t46 + t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:58
_t50=(Force.toFloat(_t49)*Force.toFloat(_t36)); // _t50 = t49 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:67
_t51=Go.math__cos.load(); // _t51 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:67
_t52=_t51[3]; // _t52 = t51[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:75
_t53=(Force.toFloat(_t50)+Force.toFloat(_t52)); // _t53 = t50 + t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:70
_t54=(Force.toFloat(_t53)*Force.toFloat(_t36)); // _t54 = t53 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:79
_t55=Go.math__cos.load(); // _t55 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:79
_t56=_t55[4]; // _t56 = t55[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:87
_t57=(Force.toFloat(_t54)+Force.toFloat(_t56)); // _t57 = t54 + t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:82
_t58=(Force.toFloat(_t57)*Force.toFloat(_t36)); // _t58 = t57 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:91
_t59=Go.math__cos.load(); // _t59 = *_cos *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:57:91
_t60=_t59[5]; // _t60 = t59[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:57:99
_t61=(Force.toFloat(_t58)+Force.toFloat(_t60)); // _t61 = t58 + t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:94
_t62=(Force.toFloat(_t39)*Force.toFloat(_t61)); // _t62 = t39 * t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:28
_t63=(Force.toFloat(_t38)+Force.toFloat(_t62)); // _t63 = t38 + t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:57:21
this.setPH(2803);
_t64=(Force.toFloat(_t35)*Force.toFloat(_t36)); // _t64 = t35 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:13
_t65=Go.math__sin.load(); // _t65 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:13
_t66=_t65[0]; // _t66 = t65[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:27
_t67=(Force.toFloat(_t66)*Force.toFloat(_t36)); // _t67 = t66 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:30
_t68=Go.math__sin.load(); // _t68 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:30
_t69=_t68[1]; // _t69 = t68[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:39
_t70=(Force.toFloat(_t67)+Force.toFloat(_t69)); // _t70 = t67 + t69 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:34
_t71=(Force.toFloat(_t70)*Force.toFloat(_t36)); // _t71 = t70 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:43
_t72=Go.math__sin.load(); // _t72 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:43
_t73=_t72[2]; // _t73 = t72[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:51
_t74=(Force.toFloat(_t71)+Force.toFloat(_t73)); // _t74 = t71 + t73 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:46
_t75=(Force.toFloat(_t74)*Force.toFloat(_t36)); // _t75 = t74 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:55
_t76=Go.math__sin.load(); // _t76 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:55
_t77=_t76[3]; // _t77 = t76[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:63
_t78=(Force.toFloat(_t75)+Force.toFloat(_t77)); // _t78 = t75 + t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:58
_t79=(Force.toFloat(_t78)*Force.toFloat(_t36)); // _t79 = t78 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:67
_t80=Go.math__sin.load(); // _t80 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:67
_t81=_t80[4]; // _t81 = t80[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:75
_t82=(Force.toFloat(_t79)+Force.toFloat(_t81)); // _t82 = t79 + t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:70
_t83=(Force.toFloat(_t82)*Force.toFloat(_t36)); // _t83 = t82 * t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:79
_t84=Go.math__sin.load(); // _t84 = *_sin *ssa.UnOp near /usr/local/go/src/pkg/math/sincos.go:58:79
_t85=_t84[5]; // _t85 = t84[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/sincos.go:58:87
_t86=(Force.toFloat(_t83)+Force.toFloat(_t85)); // _t86 = t83 + t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:82
_t87=(Force.toFloat(_t64)*Force.toFloat(_t86)); // _t87 = t64 * t86 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:16
_t88=(Force.toFloat(_t35)+Force.toFloat(_t87)); // _t88 = t35 + t87 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:58:10
this.setPH(2804);
_t89=(GOint64.compare(_t26,GOint64.make(0x0,0x1))==0); // _t89 = t26 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:59:7
_Next=_t89 ? 15 : 17; // if t89 goto 15.if.then else 17.cond.false *ssa.If near /usr/local/go/src/pkg/math/sincos.go:59:7
}// end SubFn12
private inline  function SubFn13():Void {
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:59:7
}// end SubFn13
private inline  function SubFn14():Void {
_Next=_t29 ? 18 : 19; // if t29 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:59:7
}// end SubFn14
private inline  function SubFn15():Void {
var _t92:Bool;
_t92=(GOint64.compare(_t26,GOint64.make(0x0,0x2))==0); // _t92 = t26 == 2:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:59:17
_Next=_t92 ? 15 : 16; // if t92 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:59:17
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(2808);
_t93=(-Force.toFloat(_t91)); // _t93 = -t91 *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:63:9
_Next=19; // jump 19.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:63:9
}// end SubFn16
private inline  function SubFn17():Void {
_Next=_t24 ? 20 : 21; // if t24 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/sincos.go:63:9
}// end SubFn17
private inline  function SubFn18():Void {
this.setPH(2811);
_t95=(-Force.toFloat(_t90)); // _t95 = -t90 *ssa.UnOp @ /usr/local/go/src/pkg/math/sincos.go:66:9
_Next=21; // jump 21.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sincos.go:66:9
}// end SubFn18
}
#if js @:expose("Go_utf16_Decode") #end class Go_utf16_Decode extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf16/utf16.go:86:6
var p_s:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Slice) {
super(gr,5222,"Go_utf16_Decode");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Slice=null;
var _t2:Pointer=null;
var _t3:Int=0;
var _t4:Bool=false;
var _t5:Slice=null;
var _t6:Int=0;
var _t7:Int=0;
var _t8:Int=0;
var _t9:Bool=false;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Int=0;
var _t13:Pointer=null;
var _t14:Int=0;
var _t15:Int=0;
var _t16:Pointer=null;
var _t17:Int=0;
var _t18:Int=0;
var _SF1:StackFrame;
var _t19:Int=0;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Pointer=null;
var _t23:Int=0;
var _t24:Bool=false;
var _t25:Int=0;
var _t26:Pointer=null;
var _t27:Int=0;
var _t28:Bool=false;
var _t29:Bool=false;
var _t30:Int=0;
var _t31:Pointer=null;
var _t32:Int=0;
var _t33:Bool=false;
var _t34:Int=0;
var _t35:Int=0;
var _t36:Bool=false;
var _t37:Bool=false;
var _t38:Pointer=null;
var _t39:Int=0;
var _t40:Int=0;
var _t41:Bool=false;
var _t42:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_Decode(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Slice) : Slice {
var _sf=new Go_utf16_Decode(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Slice) : Go_utf16_Decode
{return new Go_utf16_Decode(gr,_bds, p_s);
}
public function run():Go_utf16_Decode {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5222,0);
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(5222,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(5222,2);
this.SubFn2();
this.setPH(5243);
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:107:2

case 3: // for.loop
this.setLatest(5243,3);
this.setPH(5224);
_t6=((_Phi==0)?0:(_Phi==4)?_t10:0); // _t6 = phi [0.entry: 0:int, 4.switch.done: t10] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:88:2
this.setPH(5225);
_t7=((_Phi==0)?0:(_Phi==4)?_t12:0); // _t7 = phi [0.entry: 0:int, 4.switch.done: t12] #i *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:6
this.SubFn3();
_Phi=3;
case 4: // switch.done
this.setLatest(5225,4);
this.setPH(5224);
_t10=((_Phi==5)?_t21:(_Phi==6)?_t23:(_Phi==13)?_t40:0); // _t10 = phi [5.switch.body: t21, 6.switch.body: t23, 13.switch.next: t40] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:88:2
this.setPH(5225);
_t11=((_Phi==5)?_t20:(_Phi==6)?_t7:(_Phi==13)?_t7:0); // _t11 = phi [5.switch.body: t20, 6.switch.body: t7, 13.switch.next: t7] #i *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:6
this.SubFn4();
_Phi=4;
case 5: // switch.body
this.setLatest(5225,5);
this.SubFn5();
this.setPH(5230);
_SF1=Go_utf16_DecodeRune.call(this._goroutine,[],_t14,_t18);
_Next = -1;
return this;
case -1:
this.setLatest(5230,-1);
_t19=_SF1.res();
 // _t19 = DecodeRune(t14, t18) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:21
this.SubFn6();
_Phi=5;
case 6: // switch.body
this.setLatest(5230,6);
this.SubFn7();
_Phi=6;
case 7: // switch.next
this.setLatest(5230,7);
this.SubFn8();
_Phi=7;
case 8: // binop.rhs
this.setLatest(5230,8);
this.SubFn9();
_Phi=8;
case 9: // binop.done
this.setLatest(5230,9);
this.setPH(5228);
_t29=((_Phi==1)?false:(_Phi==12)?false:(_Phi==11)?false:(_Phi==10)?false:(_Phi==8)?_t28:false); // _t29 = phi [1.for.body: false:bool, 12.cond.true: false:bool, 11.cond.true: false:bool, 10.cond.true: false:bool, 8.binop.rhs: t28] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:20
this.SubFn10();
_Phi=9;
case 10: // cond.true
this.setLatest(5228,10);
this.SubFn11();
_Phi=10;
case 11: // cond.true
this.setLatest(5228,11);
this.SubFn12();
_Phi=11;
case 12: // cond.true
this.setLatest(5228,12);
this.SubFn13();
_Phi=12;
case 13: // switch.next
this.setLatest(5228,13);
this.SubFn14();
_Phi=13;
case 14: // binop.rhs
this.setLatest(5228,14);
this.SubFn15();
_Phi=14;
case 15: // binop.done
this.setLatest(5228,15);
this.setPH(5233);
_t42=((_Phi==7)?false:(_Phi==14)?_t41:false); // _t42 = phi [7.switch.next: false:bool, 14.binop.rhs: t41] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:19
this.SubFn16();
_Phi=15;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Int;
this.setPH(5223);
_t0=({var _v=p_s;_v==null?0:_v.len();}); // _t0 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:87:23
_t1=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t0) _v[_i]=0; _v;}),0,_t0); // _t1 = make []rune t0 t0 *ssa.MakeSlice @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:87:11
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:87:11
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Pointer;
var _t4:Bool;
this.setPH(5226);
if((_t7<0)||(_t7>=p_s.len())) Scheduler.ioor(); // _t2 = &s[t7] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:90:16 [POINTER]
_t2=p_s.addr(_t7);  // _t2 = &s[t7] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:90:16 [POINTER]
_t3=(_t2.load()|0); // _t3 = *t2 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:90:16
this.setPH(5227);
_t4=(Force.uintCompare(55296,_t3)<=0); // _t4 = 55296:uint16 <= t3 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:14
_Next=_t4 ? 12 : 9; // if t4 goto 12.cond.true else 9.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:14
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(5243);
_t5=_t1.subSlice(0,_t6); // _t5 = slice t1[0:int:t6] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:107:10
}// end SubFn2
private inline  function SubFn3():Void {
var _t8:Int;
var _t9:Bool;
this.setPH(5225);
_t8=({var _v=p_s;_v==null?0:_v.len();}); // _t8 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:21
_t9=(_t7<_t8); // _t9 = t7 < t8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:16
_Next=_t9 ? 1 : 2; // if t9 goto 1.for.body else 2.for.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:16
}// end SubFn3
private inline  function SubFn4():Void {
_t12=(_t11+1); // _t12 = t11 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:16
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:89:16
}// end SubFn4
private inline  function SubFn5():Void {
var _t15:Int;
var _t16:Pointer;
var _t17:Int;
this.setPH(5230);
if((_t6<0)||(_t6>=_t1.len())) Scheduler.ioor(); // _t13 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:5 [POINTER]
_t13=_t1.addr(_t6);  // _t13 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:5 [POINTER]
_t14=_t3; // _t14 = convert rune <- uint16 (t3) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:26
_t15=(_t7+1); // _t15 = t7 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:39
if((_t15<0)||(_t15>=p_s.len())) Scheduler.ioor(); // _t16 = &s[t15] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:37 [POINTER]
_t16=p_s.addr(_t15);  // _t16 = &s[t15] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:37 [POINTER]
_t17=(_t16.load()|0); // _t17 = *t16 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:37
_t18=_t17; // _t18 = convert rune <- uint16 (t17) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:35
}// end SubFn5
private inline  function SubFn6():Void {
_t13.store(_t19); // *t13 = t19 *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:35
_t20=(_t7+1); // _t20 = t7 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:35
_t21=(_t6+1); // _t21 = t6 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:35
_Next=4; // jump 4.switch.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:94:35
}// end SubFn6
private inline  function SubFn7():Void {
var _t22:Pointer;
this.setPH(5235);
if((_t6<0)||(_t6>=_t1.len())) Scheduler.ioor(); // _t22 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:99:5 [POINTER]
_t22=_t1.addr(_t6);  // _t22 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:99:5 [POINTER]
_t22.store(65533); // *t22 = 65533:rune *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:99:5
_t23=(_t6+1); // _t23 = t6 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:99:5
_Next=4; // jump 4.switch.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:99:5
}// end SubFn7
private inline  function SubFn8():Void {
var _t24:Bool;
this.setPH(5233);
_t24=(Force.uintCompare(55296,_t3)<=0); // _t24 = 55296:uint16 <= t3 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:14
_Next=_t24 ? 14 : 15; // if t24 goto 14.binop.rhs else 15.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:14
}// end SubFn8
private inline  function SubFn9():Void {
var _t25:Int;
var _t26:Pointer;
var _t27:Int;
this.setPH(5228);
_t25=(_t7+1); // _t25 = t7 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:26
if((_t25<0)||(_t25>=p_s.len())) Scheduler.ioor(); // _t26 = &s[t25] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:24 [POINTER]
_t26=p_s.addr(_t25);  // _t26 = &s[t25] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:24 [POINTER]
_t27=(_t26.load()|0); // _t27 = *t26 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:24
_t28=(Force.uintCompare(_t27,57344)<0); // _t28 = t27 < 57344:uint16 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:30
_Next=9; // jump 9.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:30
}// end SubFn9
private inline  function SubFn10():Void {
_Next=_t29 ? 5 : 7; // if t29 goto 5.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:30
}// end SubFn10
private inline  function SubFn11():Void {
var _t30:Int;
var _t31:Pointer;
var _t32:Int;
var _t33:Bool;
_t30=(_t7+1); // _t30 = t7 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:16
if((_t30<0)||(_t30>=p_s.len())) Scheduler.ioor(); // _t31 = &s[t30] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:14 [POINTER]
_t31=p_s.addr(_t30);  // _t31 = &s[t30] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:14 [POINTER]
_t32=(_t31.load()|0); // _t32 = *t31 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:14
_t33=(Force.uintCompare(56320,_t32)<=0); // _t33 = 56320:uint16 <= t32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:10
_Next=_t33 ? 8 : 9; // if t33 goto 8.binop.rhs else 9.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:92:10
}// end SubFn11
private inline  function SubFn12():Void {
var _t34:Int;
var _t35:Int;
var _t36:Bool;
this.setPH(5227);
_t34=(_t7+1); // _t34 = t7 + 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:36
_t35=({var _v=p_s;_v==null?0:_v.len();}); // _t35 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:44
_t36=(_t34<_t35); // _t36 = t34 < t35 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:39
_Next=_t36 ? 10 : 9; // if t36 goto 10.cond.true else 9.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:39
}// end SubFn12
private inline  function SubFn13():Void {
var _t37:Bool;
_t37=(Force.uintCompare(_t3,56320)<0); // _t37 = t3 < 56320:uint16 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:24
_Next=_t37 ? 11 : 9; // if t37 goto 11.cond.true else 9.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:91:24
}// end SubFn13
private inline  function SubFn14():Void {
var _t38:Pointer;
var _t39:Int;
this.setPH(5239);
if((_t6<0)||(_t6>=_t1.len())) Scheduler.ioor(); // _t38 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:5 [POINTER]
_t38=_t1.addr(_t6);  // _t38 = &t1[t6] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:5 [POINTER]
_t39=_t3; // _t39 = convert rune <- uint16 (t3) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:15
_t38.store(_t39); // *t38 = t39 *ssa.Store near /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:15
_t40=(_t6+1); // _t40 = t6 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:15
_Next=4; // jump 4.switch.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:103:15
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(5233);
_t41=(Force.uintCompare(_t3,57344)<0); // _t41 = t3 < 57344:uint16 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:24
_Next=15; // jump 15.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:24
}// end SubFn15
private inline  function SubFn16():Void {
_Next=_t42 ? 6 : 13; // if t42 goto 6.switch.body else 13.switch.next *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:97:24
}// end SubFn16
}
#if js @:expose("Go_math_Sinh") #end class Go_math_Sinh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sinh.go:25:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3375,"Go_math_Sinh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Float=0.0;
var _SF1:StackFrame;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _SF2:StackFrame;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _SF3:StackFrame;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Bool=false;
var _t15:Bool=false;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Sinh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Sinh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Sinh
{return new Go_math_Sinh(gr,_bds, p_x);
}
public function run():Go_math_Sinh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3375,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(3375,1);
this.SubFn1();
_Phi=1;
case 2: // if.done
this.setLatest(3375,2);
_t2=((_Phi==0)?p_x:(_Phi==1)?_t1:0.0); // _t2 = phi [0.entry: x, 1.if.then: t1] #x *ssa.Phi @ /usr/local/go/src/pkg/math/sinh.go:25:11
this.setPH(3387);
_t3=((_Phi==0)?false:(_Phi==1)?true:false); // _t3 = phi [0.entry: false:bool, 1.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/sinh.go:37:2
this.SubFn2();
_Phi=2;
case 3: // switch.done
this.setLatest(3387,3);
this.setPH(3393);
_t6=((_Phi==4)?_t8:(_Phi==5)?_t13:(_Phi==7)?_t29:0.0); // _t6 = phi [4.switch.body: t8, 5.switch.body: t13, 7.switch.next: t29] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/sinh.go:43:6
this.SubFn3();
_Phi=3;
case 4: // switch.body
this.setLatest(3393,4);
this.setPH(3396);
_t7=Math.exp(_t2); // _t7 = Exp(t2) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:46:13
this.SubFn4();
_Phi=4;
case 5: // switch.body
this.setLatest(3396,5);
this.setPH(3399);
_t9=Math.exp(_t2); // _t9 = Exp(t2) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:49:14
this.SubFn5();
_t11=Math.exp(_t10); // _t11 = Exp(t10) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:49:23
this.SubFn6();
_Phi=5;
case 6: // switch.next
this.setLatest(3399,6);
this.SubFn7();
_Phi=6;
case 7: // switch.next
this.setLatest(3399,7);
this.SubFn8();
_Phi=7;
case 8: // if.then
this.setLatest(3399,8);
this.SubFn9();
_Phi=8;
case 9: // if.done
this.setLatest(3399,9);
this.setPH(3393);
_t31=((_Phi==3)?_t6:(_Phi==8)?_t30:0.0); // _t31 = phi [3.switch.done: t6, 8.if.then: t30] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/sinh.go:43:6
this.setPH(3410);
_res= _t31;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t31 *ssa.Return @ /usr/local/go/src/pkg/math/sinh.go:60:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3388);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:38:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/sinh.go:38:7
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(3389);
_t1=(-Force.toFloat(p_x)); // _t1 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/sinh.go:39:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:39:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t4:Bool;
var _t5:Bool;
this.setPH(3395);
_t4=(Force.toFloat(_t2)>Force.toFloat(21)); // _t4 = t2 > 21:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:45:9
_t5=(true==_t4); // _t5 = true:bool == t4 *ssa.BinOp near /usr/local/go/src/pkg/math/sinh.go:45:9
_Next=_t5 ? 4 : 6; // if t5 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/sinh.go:45:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 8 : 9; // if t3 goto 8.if.then else 9.if.done *ssa.If near /usr/local/go/src/pkg/math/sinh.go:45:9
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(3396);
_t8=Force.floatDiv(Force.toFloat(_t7),Force.toFloat(2)); // _t8 = t7 / 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:46:17
_Next=3; // jump 3.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:46:17
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(3399);
_t10=(-Force.toFloat(_t2)); // _t10 = -t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/sinh.go:49:24
}// end SubFn5
private inline  function SubFn6():Void {
var _t12:Float;
_t12=(Force.toFloat(_t9)-Force.toFloat(_t11)); // _t12 = t9 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:49:18
_t13=Force.floatDiv(Force.toFloat(_t12),Force.toFloat(2)); // _t13 = t12 / 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:49:29
_Next=3; // jump 3.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:49:29
}// end SubFn6
private inline  function SubFn7():Void {
var _t14:Bool;
var _t15:Bool;
this.setPH(3398);
_t14=(Force.toFloat(_t2)>Force.toFloat(0.5)); // _t14 = t2 > 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:48:9
_t15=(true==_t14); // _t15 = true:bool == t14 *ssa.BinOp near /usr/local/go/src/pkg/math/sinh.go:48:9
_Next=_t15 ? 5 : 7; // if t15 goto 5.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/sinh.go:48:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t17:Float;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t28:Float;
this.setPH(3402);
_t16=(Force.toFloat(_t2)*Force.toFloat(_t2)); // _t16 = t2 * t2 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:52:11
this.setPH(3403);
_t17=(Force.toFloat((-26.30563213397497))*Force.toFloat(_t16)); // _t17 = -2630563213397497062819489/100000000000000000000000:float64 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:15
_t18=(Force.toFloat(_t17)+Force.toFloat((-2894.211355989564))); // _t18 = t17 + -1447105677994781903642330183/500000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:18
_t19=(Force.toFloat(_t18)*Force.toFloat(_t16)); // _t19 = t18 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:22
_t20=(Force.toFloat(_t19)+Force.toFloat((-89912.72022039509))); // _t20 = t19 + -8991272022039509355398013511/100000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:25
_t21=(Force.toFloat(_t20)*Force.toFloat(_t16)); // _t21 = t20 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:29
_t22=(Force.toFloat(_t21)+Force.toFloat((-630767.3640497717))); // _t22 = t21 + -6307673640497716991184787251/10000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:33
_t23=(Force.toFloat(_t22)*Force.toFloat(_t2)); // _t23 = t22 * t2 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:39
this.setPH(3404);
_t24=(Force.toFloat(_t16)+Force.toFloat((-173.6789535582337))); // _t24 = t16 + -173678953558233699533450911/1000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:22
_t25=(Force.toFloat(_t24)*Force.toFloat(_t16)); // _t25 = t24 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:26
_t26=(Force.toFloat(_t25)+Force.toFloat(15215.17378790019)); // _t26 = t25 + 190189672348752383837060647/12500000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:29
_t27=(Force.toFloat(_t26)*Force.toFloat(_t16)); // _t27 = t26 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:33
_t28=(Force.toFloat(_t27)+Force.toFloat((-630767.3640497717))); // _t28 = t27 + -6307673640497716991212077277/10000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:37
_t29=Force.floatDiv(Force.toFloat(_t23),Force.toFloat(_t28)); // _t29 = t23 / t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:15
_Next=3; // jump 3.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:54:15
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(3408);
_t30=(-Force.toFloat(_t6)); // _t30 = -t6 *ssa.UnOp @ /usr/local/go/src/pkg/math/sinh.go:58:10
_Next=9; // jump 9.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:58:10
}// end SubFn9
}
#if (!php) private #end class Go_math_abs extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/abs.go:14:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,77,"Go_math_abs");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Float=0.0;
var _t2:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_abs(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_abs(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_abs
{return new Go_math_abs(gr,_bds, p_x);
}
public function run():Go_math_abs {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(77,0);
this.SubFn0();

case 1: // switch.body
this.setLatest(77,1);
this.SubFn1();
this.setPH(80);
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/abs.go:17:3

case 2: // switch.body
this.setLatest(80,2);
this.setPH(82);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/abs.go:19:3

case 3: // switch.next
this.setLatest(82,3);
this.SubFn2();

case 4: // switch.next
this.setLatest(82,4);
this.setPH(84);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/abs.go:21:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(79);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/abs.go:16:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/abs.go:16:9
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(80);
_t1=(-Force.toFloat(p_x)); // _t1 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/abs.go:17:10
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(81);
_t2=(Force.toFloat(p_x)==Force.toFloat(0)); // _t2 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/abs.go:18:9
_Next=_t2 ? 2 : 4; // if t2 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/abs.go:18:9
}// end SubFn2
}
#if (!php) private #end class Go_math_log10 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/log10.go:11:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2031,"Go_math_log10");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_log10(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_log10(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_log10
{return new Go_math_log10(gr,_bds, p_x);
}
public function run():Go_math_log10 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2031,0);
this.setPH(2032);
_t0=Math.log(p_x); // _t0 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/log10.go:12:12
this.SubFn0();
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/log10.go:12:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=(Force.toFloat(_t0)*Force.toFloat(0.4342944819032518)); // _t1 = t0 * 10000000000000000000000000000000000000000000000000000000000000/23025850929940456840179914546843642076011014886287729760333279:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log10.go:12:16
}// end SubFn0
}
#if (!php) private #end class Go_utf8_init extends StackFrameBasis implements StackFrame { 
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,2032,"Go_utf8_init");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_init(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_utf8_init(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_utf8_init
{return new Go_utf8_init(gr,_bds);
}
public function run():Go_utf8_init {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2032,0);
this.SubFn0();

case 1: // init.start
this.setLatest(2032,1);
this.SubFn1();

case 2: // init.done
this.setLatest(2032,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/log10.go:12:16

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=Go.utf8_init_36_guard.load(); // _t0 = *init$guard *ssa.UnOp near /usr/local/go/src/pkg/math/log10.go:12:16
_Next=_t0 ? 2 : 1; // if t0 goto 2.init.done else 1.init.start *ssa.If near /usr/local/go/src/pkg/math/log10.go:12:16
}// end SubFn0
private inline  function SubFn1():Void {
Go.utf8_init_36_guard.store(true); // *init$guard = true:bool *ssa.Store near /usr/local/go/src/pkg/math/log10.go:12:16
_Next=2; // jump 2.init.done *ssa.Jump near /usr/local/go/src/pkg/math/log10.go:12:16
}// end SubFn1
}
#if js @:expose("Go_math_Cosh") #end class Go_math_Cosh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sinh.go:69:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3419,"Go_math_Cosh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _t3:Bool=false;
var _SF1:StackFrame;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _SF2:StackFrame;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _SF3:StackFrame;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Cosh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Cosh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Cosh
{return new Go_math_Cosh(gr,_bds, p_x);
}
public function run():Go_math_Cosh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3419,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(3419,1);
this.SubFn1();
_Phi=1;
case 2: // if.done
this.setLatest(3419,2);
_t2=((_Phi==0)?p_x:(_Phi==1)?_t1:0.0); // _t2 = phi [0.entry: x, 1.if.then: t1] #x *ssa.Phi @ /usr/local/go/src/pkg/math/sinh.go:69:11
this.SubFn2();
_Phi=2;
case 3: // if.then
this.setLatest(3419,3);
this.setPH(3424);
_t4=Math.exp(_t2); // _t4 = Exp(t2) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:74:13
this.SubFn3();
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/sinh.go:74:3

case 4: // if.done
this.setLatest(3424,4);
this.setPH(3426);
_t6=Math.exp(_t2); // _t6 = Exp(t2) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:76:13
this.SubFn4();
_t8=Math.exp(_t7); // _t8 = Exp(t7) *ssa.Call @ /usr/local/go/src/pkg/math/sinh.go:76:22
this.SubFn5();
_res= _t10;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t10 *ssa.Return @ /usr/local/go/src/pkg/math/sinh.go:76:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3420);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:70:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/sinh.go:70:7
}// end SubFn0
private inline  function SubFn1():Void {
this.setPH(3421);
_t1=(-Force.toFloat(p_x)); // _t1 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/sinh.go:71:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sinh.go:71:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
this.setPH(3423);
_t3=(Force.toFloat(_t2)>Force.toFloat(21)); // _t3 = t2 > 21:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:73:7
_Next=_t3 ? 3 : 4; // if t3 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/sinh.go:73:7
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(3424);
_t5=Force.floatDiv(Force.toFloat(_t4),Force.toFloat(2)); // _t5 = t4 / 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:74:17
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(3426);
_t7=(-Force.toFloat(_t2)); // _t7 = -t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/sinh.go:76:23
}// end SubFn4
private inline  function SubFn5():Void {
var _t9:Float;
_t9=(Force.toFloat(_t6)+Force.toFloat(_t8)); // _t9 = t6 + t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:76:17
_t10=Force.floatDiv(Force.toFloat(_t9),Force.toFloat(2)); // _t10 = t9 / 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:76:28
}// end SubFn5
}
#if (!php) private #end class Go_math_ceil extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/floor.go:38:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2123,"Go_math_ceil");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Float=0.0;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_ceil(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_ceil(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_ceil
{return new Go_math_ceil(gr,_bds, p_x);
}
public function run():Go_math_ceil {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2123,0);
this.SubFn0();
this.setPH(2124);
_t1=Math.ffloor(_t0); // _t1 = Floor(t0) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:39:15
this.SubFn1();
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:39:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=(-Force.toFloat(p_x)); // _t0 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/floor.go:39:16
}// end SubFn0
private inline  function SubFn1():Void {
_t2=(-Force.toFloat(_t1)); // _t2 = -t1 *ssa.UnOp @ /usr/local/go/src/pkg/math/floor.go:39:9
}// end SubFn1
}
#if js @:expose("Go_utf16_IsSurrogate") #end class Go_utf16_IsSurrogate extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf16/utf16.go:30:6
var p_r:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Int) {
super(gr,5166,"Go_utf16_IsSurrogate");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Int) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_IsSurrogate(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Int) : Bool {
var _sf=new Go_utf16_IsSurrogate(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Int) : Go_utf16_IsSurrogate
{return new Go_utf16_IsSurrogate(gr,_bds, p_r);
}
public function run():Go_utf16_IsSurrogate {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5166,0);
this.SubFn0();
_Phi=0;
case 1: // binop.rhs
this.setLatest(5166,1);
this.SubFn1();
_Phi=1;
case 2: // binop.done
this.setLatest(5166,2);
this.setPH(5167);
_t2=((_Phi==0)?false:(_Phi==1)?_t1:false); // _t2 = phi [0.entry: false:bool, 1.binop.rhs: t1] #&& *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:20
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=(55296<=p_r); // _t0 = 55296:rune <= r *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:15
_Next=_t0 ? 1 : 2; // if t0 goto 1.binop.rhs else 2.binop.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:15
}// end SubFn0
private inline  function SubFn1():Void {
_t1=(p_r<57344); // _t1 = r < 57344:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:25
_Next=2; // jump 2.binop.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf16/utf16.go:31:25
}// end SubFn1
}
#if (!php) private #end class Go_math_log2 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/log10.go:19:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2039,"Go_math_log2");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Float,r1:Int}=null;
var _t1:Float=0.0;
var _t2:Int=0;
var _SF2:StackFrame;
var _t3:Float=0.0;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_log2(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_log2(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_log2
{return new Go_math_log2(gr,_bds, p_x);
}
public function run():Go_math_log2 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2039,0);
this.setPH(2040);
_SF1=Go_math_frexp.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2040,-1);
_t0=_SF1.res();
 // _t0 = Frexp(x) *ssa.Call @ /usr/local/go/src/pkg/math/log10.go:20:20
this.SubFn0();
this.setPH(2041);
_t3=Math.log(_t1); // _t3 = Log(t1) *ssa.Call @ /usr/local/go/src/pkg/math/log10.go:21:12
this.SubFn1();
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/log10.go:21:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=_t0.r0; // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/math/log10.go:21:2
_t2=_t0.r1; // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/math/log10.go:21:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t4:Float;
var _t5:Float;
_t4=(Force.toFloat(_t3)*Force.toFloat(1.4426950408889634)); // _t4 = t3 * 1000000000000000000000000000000000000000000000000000000000000000/693147180559945309417232121458176568075500134360255254120680009:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log10.go:21:18
_t5=_t2; // _t5 = convert float64 <- int (t2) *ssa.Convert @ /usr/local/go/src/pkg/math/log10.go:21:36
_t6=(Force.toFloat(_t4)+Force.toFloat(_t5)); // _t6 = t4 + t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/log10.go:21:27
}// end SubFn1
}
#if (!php) private #end class Go_math_stirling extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/gamma.go:95:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1265,"Go_math_stirling");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Float=0.0;
var _t1:Array<Float>=null;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Array<Float>=null;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Array<Float>=null;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Array<Float>=null;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _SF1:StackFrame;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _SF2:StackFrame;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _SF3:StackFrame;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_stirling(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_stirling(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_stirling
{return new Go_math_stirling(gr,_bds, p_x);
}
public function run():Go_math_stirling {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1265,0);
this.SubFn0();
this.setPH(1272);
_t21=Math.exp(p_x); // _t21 = Exp(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:102:10
this.SubFn1();
_Phi=0;
case 1: // if.then
this.setLatest(1272,1);
this.SubFn2();
this.setPH(1274);
_SF2=Go_math_Pow.call(this._goroutine,[],p_x,_t24);
_Next = -2;
return this;
case -2:
this.setLatest(1274,-2);
_t25=_SF2.res();
 // _t25 = Pow(x, t24) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:104:11
this.SubFn3();
_Phi=1;
case 2: // if.done
this.setLatest(1274,2);
this.setPH(1272);
_t28=((_Phi==1)?_t27:(_Phi==3)?_t33:0.0); // _t28 = phi [1.if.then: t27, 3.if.else: t33] #y *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:102:2
this.SubFn4();
this.setPH(1280);
_res= _t30;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t30 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:110:2

case 3: // if.else
this.setLatest(1280,3);
this.SubFn5();
this.setPH(1277);
_SF3=Go_math_Pow.call(this._goroutine,[],p_x,_t31);
_Next = -3;
return this;
case -3:
this.setLatest(1277,-3);
_t32=_SF3.res();
 // _t32 = Pow(x, t31) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:107:10
this.SubFn6();
_Phi=3;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Array<Float>;
var _t2:Float;
var _t3:Float;
var _t4:Array<Float>;
var _t5:Float;
var _t6:Float;
var _t7:Float;
var _t8:Array<Float>;
var _t9:Float;
var _t10:Float;
var _t11:Float;
var _t12:Array<Float>;
var _t13:Float;
var _t14:Float;
var _t15:Float;
var _t16:Array<Float>;
var _t17:Float;
var _t18:Float;
var _t19:Float;
this.setPH(1270);
_t0=Force.floatDiv(Force.toFloat(1),Force.toFloat(p_x)); // _t0 = 1:float64 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:100:9
_t1=Go.math__gamS.load(); // _t1 = *_gamS *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:100:9
this.setPH(1271);
_t2=_t1[0]; // _t2 = t1[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:101:21
_t3=(Force.toFloat(_t2)*Force.toFloat(_t0)); // _t3 = t2 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:24
_t4=Go.math__gamS.load(); // _t4 = *_gamS *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:101:24
_t5=_t4[1]; // _t5 = t4[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:101:32
_t6=(Force.toFloat(_t3)+Force.toFloat(_t5)); // _t6 = t3 + t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:26
_t7=(Force.toFloat(_t6)*Force.toFloat(_t0)); // _t7 = t6 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:36
_t8=Go.math__gamS.load(); // _t8 = *_gamS *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:101:36
_t9=_t8[2]; // _t9 = t8[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:101:44
_t10=(Force.toFloat(_t7)+Force.toFloat(_t9)); // _t10 = t7 + t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:38
_t11=(Force.toFloat(_t10)*Force.toFloat(_t0)); // _t11 = t10 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:48
_t12=Go.math__gamS.load(); // _t12 = *_gamS *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:101:48
_t13=_t12[3]; // _t13 = t12[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:101:56
_t14=(Force.toFloat(_t11)+Force.toFloat(_t13)); // _t14 = t11 + t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:50
_t15=(Force.toFloat(_t14)*Force.toFloat(_t0)); // _t15 = t14 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:60
_t16=Go.math__gamS.load(); // _t16 = *_gamS *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:101:60
_t17=_t16[4]; // _t17 = t16[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:101:68
_t18=(Force.toFloat(_t15)+Force.toFloat(_t17)); // _t18 = t15 + t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:62
_t19=(Force.toFloat(_t0)*Force.toFloat(_t18)); // _t19 = t0 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:11
_t20=(Force.toFloat(1)+Force.toFloat(_t19)); // _t20 = 1:float64 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:101:8
}// end SubFn0
private inline  function SubFn1():Void {
var _t22:Bool;
this.setPH(1273);
_t22=(Force.toFloat(p_x)>Force.toFloat(143.01608)); // _t22 = x > 1787701/12500:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:103:7
_Next=_t22 ? 1 : 3; // if t22 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/gamma.go:103:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t23:Float;
this.setPH(1274);
_t23=(Force.toFloat(0.5)*Force.toFloat(p_x)); // _t23 = 1/2:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:104:18
_t24=(Force.toFloat(_t23)-Force.toFloat(0.25)); // _t24 = t23 - 1/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:104:20
}// end SubFn2
private inline  function SubFn3():Void {
var _t26:Float;
this.setPH(1275);
_t26=Force.floatDiv(Force.toFloat(_t25),Force.toFloat(_t21)); // _t26 = t25 / t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:105:14
_t27=(Force.toFloat(_t25)*Force.toFloat(_t26)); // _t27 = t25 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:105:9
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:105:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t29:Float;
this.setPH(1279);
_t29=(Force.toFloat(2.5066282746310007)*Force.toFloat(_t28)); // _t29 = 2506628274631000502417/1000000000000000000000:float64 * t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:109:16
_t30=(Force.toFloat(_t29)*Force.toFloat(_t20)); // _t30 = t29 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:109:20
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(1277);
_t31=(Force.toFloat(p_x)-Force.toFloat(0.5)); // _t31 = x - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:107:15
}// end SubFn5
private inline  function SubFn6():Void {
_t33=Force.floatDiv(Force.toFloat(_t32),Force.toFloat(_t21)); // _t33 = t32 / t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:107:21
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:107:21
}// end SubFn6
}
#if (!php) private #end class Go__star_main_dot_circle_perim extends StackFrameBasis implements StackFrame {  // interfaces.go:39:17
var p_recv:Pointer;
public function new(gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) {
super(gr,39,"Go__star_main_dot_circle_perim");
this._bds=_bds;
this.p_recv=p_recv;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Array<Dynamic>=null;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_recv : Pointer) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go__star_main_dot_circle_perim(0,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_recv : Pointer) : Float {
var _sf=new Go__star_main_dot_circle_perim(_gr,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) : Go__star_main_dot_circle_perim
{return new Go__star_main_dot_circle_perim(gr,_bds, p_recv);
}
public function run():Go__star_main_dot_circle_perim {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(39,0);
this.SubFn0();
_SF1=Go_main_dot_circle_perim.call(this._goroutine,[],Deep.copy(_t0));
_Next = -1;
return this;
case -1:
this.setLatest(39,-1);
_t1=_SF1.res();
 // _t1 = (main.circle).perim(t0) *ssa.Call near /usr/local/go/src/pkg/math/gamma.go:107:21
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return near /usr/local/go/src/pkg/math/gamma.go:107:21

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=p_recv.load(); // _t0 = *recv *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:107:21
}// end SubFn0
}
#if (!php) private #end class Go_utf8_decodeRuneInternal extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:45:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5289,"Go_utf8_decodeRuneInternal");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int, r2:Bool};
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Pointer=null;
var _t3:Int=0;
var _t4:Bool=false;
var _t5:Int=0;
var _t6:Bool=false;
var _t7:Bool=false;
var _t8:Pointer=null;
var _t9:Int=0;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Bool=false;
var _t13:Int=0;
var _t14:Int=0;
var _t15:Int=0;
var _t16:Int=0;
var _t17:Int=0;
var _t18:Int=0;
var _t19:Bool=false;
var _t20:Bool=false;
var _t21:Pointer=null;
var _t22:Int=0;
var _t23:Bool=false;
var _t24:Bool=false;
var _t25:Bool=false;
var _t26:Int=0;
var _t27:Int=0;
var _t28:Int=0;
var _t29:Int=0;
var _t30:Int=0;
var _t31:Int=0;
var _t32:Int=0;
var _t33:Int=0;
var _t34:Int=0;
var _t35:Int=0;
var _t36:Bool=false;
var _t37:Bool=false;
var _t38:Bool=false;
var _t39:Bool=false;
var _t40:Pointer=null;
var _t41:Int=0;
var _t42:Bool=false;
var _t43:Bool=false;
var _t44:Bool=false;
var _t45:Int=0;
var _t46:Int=0;
var _t47:Int=0;
var _t48:Int=0;
var _t49:Int=0;
var _t50:Int=0;
var _t51:Int=0;
var _t52:Int=0;
var _t53:Int=0;
var _t54:Int=0;
var _t55:Int=0;
var _t56:Int=0;
var _t57:Int=0;
var _t58:Int=0;
var _t59:Bool=false;
var _t60:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : {r0:Int, r1:Int, r2:Bool} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_decodeRuneInternal(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : {r0:Int, r1:Int, r2:Bool} {
var _sf=new Go_utf8_decodeRuneInternal(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_decodeRuneInternal
{return new Go_utf8_decodeRuneInternal(gr,_bds, p_p);
}
public function run():Go_utf8_decodeRuneInternal {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5289,0);
this.SubFn0();

case 1: // if.then
this.setLatest(5289,1);
this.setPH(5292);
_res= {r0:65533,r1:0,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 0:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:48:3

case 2: // if.done
this.setLatest(5292,2);
this.SubFn1();

case 3: // if.then
this.setLatest(5292,3);
this.SubFn2();
this.setPH(5298);
_res= {r0:_t5,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:54:3

case 4: // if.done
this.setLatest(5298,4);
this.SubFn3();

case 5: // if.then
this.setLatest(5298,5);
this.setPH(5303);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:59:3

case 6: // if.done
this.setLatest(5303,6);
this.SubFn4();

case 7: // if.then
this.setLatest(5303,7);
this.setPH(5308);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:64:3

case 8: // if.done
this.setLatest(5308,8);
this.SubFn5();

case 9: // if.then
this.setLatest(5308,9);
this.setPH(5312);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:68:3

case 10: // if.done
this.setLatest(5312,10);
this.SubFn6();

case 11: // cond.false
this.setLatest(5312,11);
this.SubFn7();

case 12: // if.then
this.setLatest(5312,12);
this.SubFn8();

case 13: // if.done
this.setLatest(5312,13);
this.SubFn9();

case 14: // if.then
this.setLatest(5312,14);
this.setPH(5319);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:75:4

case 15: // if.done
this.setLatest(5319,15);
this.setPH(5321);
_res= {r0:_t18,r1:2,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18, 2:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:77:3

case 16: // if.then
this.setLatest(5321,16);
this.setPH(5326);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:82:3

case 17: // if.done
this.setLatest(5326,17);
this.SubFn10();

case 18: // if.then
this.setLatest(5326,18);
this.setPH(5330);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:86:3

case 19: // if.done
this.setLatest(5330,19);
this.SubFn11();

case 20: // cond.false
this.setLatest(5330,20);
this.SubFn12();

case 21: // if.then
this.setLatest(5330,21);
this.SubFn13();

case 22: // if.done
this.setLatest(5330,22);
this.SubFn14();

case 23: // if.then
this.setLatest(5330,23);
this.setPH(5337);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:93:4

case 24: // if.done
this.setLatest(5337,24);
this.SubFn15();

case 25: // if.then
this.setLatest(5337,25);
this.setPH(5340);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:96:4

case 26: // if.done
this.setLatest(5340,26);
this.setPH(5342);
_res= {r0:_t35,r1:3,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t35, 3:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:98:3

case 27: // cond.true
this.setLatest(5342,27);
this.SubFn16();

case 28: // if.then
this.setLatest(5342,28);
this.setPH(5347);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:103:3

case 29: // if.done
this.setLatest(5347,29);
this.SubFn17();

case 30: // if.then
this.setLatest(5347,30);
this.setPH(5351);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:107:3

case 31: // if.done
this.setLatest(5351,31);
this.SubFn18();

case 32: // cond.false
this.setLatest(5351,32);
this.SubFn19();

case 33: // if.then
this.setLatest(5351,33);
this.SubFn20();

case 34: // if.done
this.setLatest(5351,34);
this.setPH(5364);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:120:2

case 35: // if.then
this.setLatest(5364,35);
this.setPH(5358);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:114:4

case 36: // if.done
this.setLatest(5358,36);
this.setPH(5360);
_res= {r0:_t58,r1:4,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t58, 4:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:116:3

case 37: // cond.false
this.setLatest(5360,37);
this.SubFn21();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(5290);
_t0=({var _v=p_p;_v==null?0:_v.len();}); // _t0 = len(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:46:10
this.setPH(5291);
_t1=(_t0<1); // _t1 = t0 < 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:47:7
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:47:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Pointer;
var _t4:Bool;
this.setPH(5294);
if((0<0)||(0>=p_p.len())) Scheduler.ioor(); // _t2 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:50:9 [POINTER]
_t2=p_p.addr(0);  // _t2 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:50:9 [POINTER]
_t3=(_t2.load()|0); // _t3 = *t2 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:50:9
this.setPH(5297);
_t4=(Force.uintCompare(_t3,128)<0); // _t4 = t3 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:53:8
_Next=_t4 ? 3 : 4; // if t4 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:53:8
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(5298);
_t5=_t3; // _t5 = convert rune <- byte (t3) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:54:14
}// end SubFn2
private inline  function SubFn3():Void {
var _t6:Bool;
this.setPH(5302);
_t6=(Force.uintCompare(_t3,192)<0); // _t6 = t3 < 192:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:58:8
_Next=_t6 ? 5 : 6; // if t6 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:58:8
}// end SubFn3
private inline  function SubFn4():Void {
var _t7:Bool;
this.setPH(5307);
_t7=(_t0<2); // _t7 = t0 < 2:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:63:7
_Next=_t7 ? 7 : 8; // if t7 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:63:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Pointer;
var _t10:Bool;
this.setPH(5310);
if((1<0)||(1>=p_p.len())) Scheduler.ioor(); // _t8 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:66:9 [POINTER]
_t8=p_p.addr(1);  // _t8 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:66:9 [POINTER]
_t9=(_t8.load()|0); // _t9 = *t8 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:66:9
this.setPH(5311);
_t10=(Force.uintCompare(_t9,128)<0); // _t10 = t9 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:67:8
_Next=_t10 ? 9 : 11; // if t10 goto 9.if.then else 11.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:67:8
}// end SubFn5
private inline  function SubFn6():Void {
var _t11:Bool;
this.setPH(5316);
_t11=(Force.uintCompare(_t3,224)<0); // _t11 = t3 < 224:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:72:8
_Next=_t11 ? 12 : 13; // if t11 goto 12.if.then else 13.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:72:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t12:Bool;
this.setPH(5311);
_t12=(Force.uintCompare(192,_t9)<=0); // _t12 = 192:byte <= t9 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:67:19
_Next=_t12 ? 9 : 10; // if t12 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:67:19
}// end SubFn7
private inline  function SubFn8():Void {
var _t13:Int;
var _t14:Int;
var _t15:Int;
var _t16:Int;
var _t17:Int;
var _t19:Bool;
this.setPH(5317);
_t13=Force.toUint8((_t3&31)); // _t13 = t3 & 31:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:14
_t14=_t13; // _t14 = convert rune <- byte (t13) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:11
_t15=(_t14<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t15 = t14 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:21
_t16=Force.toUint8((_t9&63)); // _t16 = t9 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:34
_t17=_t16; // _t17 = convert rune <- byte (t16) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:31
_t18=Force.toInt32((_t15|_t17)); // _t18 = t15 | t17 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:73:25
this.setPH(5318);
_t19=(_t18<=127); // _t19 = t18 <= 127:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:74:8
_Next=_t19 ? 14 : 15; // if t19 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:74:8
}// end SubFn8
private inline  function SubFn9():Void {
var _t20:Bool;
this.setPH(5325);
_t20=(_t0<3); // _t20 = t0 < 3:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:81:7
_Next=_t20 ? 16 : 17; // if t20 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:81:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t21:Pointer;
var _t23:Bool;
this.setPH(5328);
if((2<0)||(2>=p_p.len())) Scheduler.ioor(); // _t21 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:84:9 [POINTER]
_t21=p_p.addr(2);  // _t21 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:84:9 [POINTER]
_t22=(_t21.load()|0); // _t22 = *t21 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:84:9
this.setPH(5329);
_t23=(Force.uintCompare(_t22,128)<0); // _t23 = t22 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:85:8
_Next=_t23 ? 18 : 20; // if t23 goto 18.if.then else 20.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:85:8
}// end SubFn10
private inline  function SubFn11():Void {
var _t24:Bool;
this.setPH(5334);
_t24=(Force.uintCompare(_t3,240)<0); // _t24 = t3 < 240:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:90:8
_Next=_t24 ? 21 : 22; // if t24 goto 21.if.then else 22.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:90:8
}// end SubFn11
private inline  function SubFn12():Void {
var _t25:Bool;
this.setPH(5329);
_t25=(Force.uintCompare(192,_t22)<=0); // _t25 = 192:byte <= t22 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:85:19
_Next=_t25 ? 18 : 19; // if t25 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:85:19
}// end SubFn12
private inline  function SubFn13():Void {
var _t26:Int;
var _t27:Int;
var _t28:Int;
var _t29:Int;
var _t30:Int;
var _t31:Int;
var _t32:Int;
var _t33:Int;
var _t34:Int;
var _t36:Bool;
this.setPH(5335);
_t26=Force.toUint8((_t3&15)); // _t26 = t3 & 15:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:14
_t27=_t26; // _t27 = convert rune <- byte (t26) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:11
_t28=(_t27<<GOint64.toInt(GOint64.make(0x0,0xc))); // _t28 = t27 << 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:21
_t29=Force.toUint8((_t9&63)); // _t29 = t9 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:35
_t30=_t29; // _t30 = convert rune <- byte (t29) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:32
_t31=(_t30<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t31 = t30 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:42
_t32=Force.toInt32((_t28|_t31)); // _t32 = t28 | t31 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:26
_t33=Force.toUint8((_t22&63)); // _t33 = t22 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:55
_t34=_t33; // _t34 = convert rune <- byte (t33) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:52
_t35=Force.toInt32((_t32|_t34)); // _t35 = t32 | t34 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:91:46
this.setPH(5336);
_t36=(_t35<=2047); // _t36 = t35 <= 2047:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:92:8
_Next=_t36 ? 23 : 24; // if t36 goto 23.if.then else 24.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:92:8
}// end SubFn13
private inline  function SubFn14():Void {
var _t37:Bool;
this.setPH(5346);
_t37=(_t0<4); // _t37 = t0 < 4:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:102:7
_Next=_t37 ? 28 : 29; // if t37 goto 28.if.then else 29.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:102:7
}// end SubFn14
private inline  function SubFn15():Void {
var _t38:Bool;
this.setPH(5339);
_t38=(55296<=_t35); // _t38 = 55296:rune <= t35 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:95:19
_Next=_t38 ? 27 : 26; // if t38 goto 27.cond.true else 26.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:95:19
}// end SubFn15
private inline  function SubFn16():Void {
var _t39:Bool;
_t39=(_t35<=57343); // _t39 = t35 <= 57343:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:95:29
_Next=_t39 ? 25 : 26; // if t39 goto 25.if.then else 26.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:95:29
}// end SubFn16
private inline  function SubFn17():Void {
var _t40:Pointer;
var _t42:Bool;
this.setPH(5349);
if((3<0)||(3>=p_p.len())) Scheduler.ioor(); // _t40 = &p[3:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:105:9 [POINTER]
_t40=p_p.addr(3);  // _t40 = &p[3:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:105:9 [POINTER]
_t41=(_t40.load()|0); // _t41 = *t40 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:105:9
this.setPH(5350);
_t42=(Force.uintCompare(_t41,128)<0); // _t42 = t41 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:106:8
_Next=_t42 ? 30 : 32; // if t42 goto 30.if.then else 32.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:106:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t43:Bool;
this.setPH(5355);
_t43=(Force.uintCompare(_t3,248)<0); // _t43 = t3 < 248:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:111:8
_Next=_t43 ? 33 : 34; // if t43 goto 33.if.then else 34.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:111:8
}// end SubFn18
private inline  function SubFn19():Void {
var _t44:Bool;
this.setPH(5350);
_t44=(Force.uintCompare(192,_t41)<=0); // _t44 = 192:byte <= t41 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:106:19
_Next=_t44 ? 30 : 31; // if t44 goto 30.if.then else 31.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:106:19
}// end SubFn19
private inline  function SubFn20():Void {
var _t45:Int;
var _t46:Int;
var _t47:Int;
var _t48:Int;
var _t49:Int;
var _t50:Int;
var _t51:Int;
var _t52:Int;
var _t53:Int;
var _t54:Int;
var _t55:Int;
var _t56:Int;
var _t57:Int;
var _t59:Bool;
this.setPH(5356);
_t45=Force.toUint8((_t3&7)); // _t45 = t3 & 7:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:14
_t46=_t45; // _t46 = convert rune <- byte (t45) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:11
_t47=(_t46<<GOint64.toInt(GOint64.make(0x0,0x12))); // _t47 = t46 << 18:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:21
_t48=Force.toUint8((_t9&63)); // _t48 = t9 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:35
_t49=_t48; // _t49 = convert rune <- byte (t48) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:32
_t50=(_t49<<GOint64.toInt(GOint64.make(0x0,0xc))); // _t50 = t49 << 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:42
_t51=Force.toInt32((_t47|_t50)); // _t51 = t47 | t50 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:26
_t52=Force.toUint8((_t22&63)); // _t52 = t22 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:56
_t53=_t52; // _t53 = convert rune <- byte (t52) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:53
_t54=(_t53<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t54 = t53 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:63
_t55=Force.toInt32((_t51|_t54)); // _t55 = t51 | t54 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:47
_t56=Force.toUint8((_t41&63)); // _t56 = t41 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:76
_t57=_t56; // _t57 = convert rune <- byte (t56) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:73
_t58=Force.toInt32((_t55|_t57)); // _t58 = t55 | t57 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:112:67
this.setPH(5357);
_t59=(_t58<=65535); // _t59 = t58 <= 65535:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:113:8
_Next=_t59 ? 35 : 37; // if t59 goto 35.if.then else 37.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:113:8
}// end SubFn20
private inline  function SubFn21():Void {
var _t60:Bool;
_t60=(1114111<_t58); // _t60 = 1114111:rune < t58 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:113:31
_Next=_t60 ? 35 : 36; // if t60 goto 35.if.then else 36.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:113:31
}// end SubFn21
}
#if (!php) private #end class Go_math_isNegInt extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/gamma.go:196:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1366,"Go_math_isNegInt");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:{r0:Float,r1:Float}=null;
var _t3:Float=0.0;
var _t4:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_isNegInt(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Bool {
var _sf=new Go_math_isNegInt(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_isNegInt
{return new Go_math_isNegInt(gr,_bds, p_x);
}
public function run():Go_math_isNegInt {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1366,0);
this.SubFn0();

case 1: // if.then
this.setLatest(1366,1);
this.setPH(1368);
_SF1=Go_math_modf.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(1368,-1);
_t1=_SF1.res();
 // _t1 = Modf(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:198:16
this.SubFn1();
this.setPH(1369);
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:199:3

case 2: // if.done
this.setLatest(1369,2);
this.setPH(1371);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:201:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(1367);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:197:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:197:7
}// end SubFn0
private inline  function SubFn1():Void {
 // _t2 = extract t1 #0 *ssa.Extract near /usr/local/go/src/pkg/math/gamma.go:197:7 [REGISTER VALUE UN-USED]
_t3=_t1.r1; // _t3 = extract t1 #1 *ssa.Extract near /usr/local/go/src/pkg/math/gamma.go:197:7
this.setPH(1369);
_t4=(Force.toFloat(_t3)==Force.toFloat(0)); // _t4 = t3 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:199:13
}// end SubFn1
}
#if (!php) private #end class Go_math_log1p extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/log1p.go:97:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2440,"Go_math_log1p");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Float=0.0;
var _t3:Bool=false;
var _SF3:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF4:StackFrame;
var _t6:Float=0.0;
var _SF5:StackFrame;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Bool=false;
var _t12:Bool=false;
var _t13:Float=0.0;
var _t14:GOint64=null;
var _t15:Int=0;
var _t16:Bool=false;
var _t17:Bool=false;
var _t18:Bool=false;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Float=0.0;
var _t24:GOint64=null;
var _t25:Int=0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Bool=false;
var _t30:Float=0.0;
var _SF6:StackFrame;
var _t31:GOint64=null;
var _t32:GOint64=null;
var _t33:GOint64=null;
var _t34:Int=0;
var _t35:Bool=false;
var _t36:GOint64=null;
var _t37:Int=0;
var _t38:Float=0.0;
var _t39:GOint64=null;
var _t40:Bool=false;
var _SF7:StackFrame;
var _t41:GOint64=null;
var _t42:GOint64=null;
var _t43:GOint64=null;
var _t44:Int=0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:GOint64=null;
var _SF8:StackFrame;
var _t51:Float=0.0;
var _t52:GOint64=null;
var _t53:Int=0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Int=0;
var _t57:GOint64=null;
var _SF9:StackFrame;
var _t58:Float=0.0;
var _t59:GOint64=null;
var _t60:GOint64=null;
var _t61:Bool=false;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Float=0.0;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Float=0.0;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Bool=false;
var _t79:Bool=false;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Bool=false;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Float=0.0;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _t89:Float=0.0;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Float=0.0;
var _t93:Float=0.0;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _t96:Float=0.0;
var _t97:Float=0.0;
var _t98:Float=0.0;
var _t99:Float=0.0;
var _t100:Float=0.0;
var _t101:Float=0.0;
var _t102:Float=0.0;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Float=0.0;
var _t106:Float=0.0;
var _t107:Float=0.0;
var _t108:Float=0.0;
var _t109:Float=0.0;
var _t110:Float=0.0;
var _t111:Float=0.0;
var _t112:Float=0.0;
var _t113:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_log1p(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_log1p(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_log1p
{return new Go_math_log1p(gr,_bds, p_x);
}
public function run():Go_math_log1p {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2440,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2440,1);
this.setPH(2461);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:118:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:118:3

case 2: // switch.body
this.setLatest(2461,2);
this.setPH(2463);
_t2=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t2 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:120:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:120:3

case 3: // switch.next
this.setLatest(2463,3);
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(2463,4);
this.setPH(2460);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(2460,-3);
_t4=_SF3.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:117:22
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(2460,5);
_t5=((_Phi==0)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:117:14
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(2460,6);
this.setPH(2465);
_t6=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t6 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:122:13
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:122:3

case 7: // switch.next
this.setLatest(2465,7);
this.setPH(2464);
_SF5=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -5;
return this;
case -5:
this.setLatest(2464,-5);
_t7=_SF5.res();
 // _t7 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:121:12
this.SubFn4();
_Phi=7;
case 8: // switch.next
this.setLatest(2464,8);
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(2464,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(2464,10);
this.setPH(2468);
_t10=((_Phi==8)?p_x:(_Phi==9)?_t9:0.0); // _t10 = phi [8.switch.next: x, 9.if.then: t9] #absx *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:125:2
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(2468,11);
this.SubFn8();
_Phi=11;
case 12: // if.done
this.setLatest(2468,12);
this.setPH(2473);
_t13=((_Phi==10)?0:(_Phi==14)?0:(_Phi==17)?p_x:0.0); // _t13 = phi [10.if.done: 0:float64, 14.if.done: 0:float64, 17.if.then: x] #f *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:130:6
this.setPH(2474);
_t14=((_Phi==10)?GOint64.make(0x0,0x0):(_Phi==14)?GOint64.make(0x0,0x0):(_Phi==17)?GOint64.make(0x0,0x1):GOint64.make(0,0)); // _t14 = phi [10.if.done: 0:uint64, 14.if.done: 0:uint64, 17.if.then: 1:uint64] #iu *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:131:6
this.setPH(2475);
_t15=((_Phi==10)?1:(_Phi==14)?1:(_Phi==17)?0:0); // _t15 = phi [10.if.done: 1:int, 14.if.done: 1:int, 17.if.then: 0:int] #k *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:132:2
this.SubFn9();
_Phi=12;
case 13: // if.then
this.setLatest(2475,13);
this.SubFn10();
_Phi=13;
case 14: // if.done
this.setLatest(2475,14);
this.SubFn11();
_Phi=14;
case 15: // if.then
this.setLatest(2475,15);
this.setPH(2479);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:136:5

case 16: // if.done
this.setLatest(2479,16);
this.SubFn12();
this.setPH(2481);
_res= _t21;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t21 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:138:4

case 17: // if.then
this.setLatest(2481,17);
this.SubFn13();
_Phi=17;
case 18: // if.then
this.setLatest(2481,18);
this.SubFn14();
_Phi=18;
case 19: // if.done
this.setLatest(2481,19);
this.setPH(2473);
_t23=((_Phi==12)?_t13:(_Phi==26)?_t55:0.0); // _t23 = phi [12.if.done: t13, 26.if.done: t55] #f *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:130:6
this.setPH(2474);
_t24=((_Phi==12)?_t14:(_Phi==26)?_t52:GOint64.make(0,0)); // _t24 = phi [12.if.done: t14, 26.if.done: t52] #iu *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:131:6
this.setPH(2475);
_t25=((_Phi==12)?_t15:(_Phi==26)?_t53:0); // _t25 = phi [12.if.done: t15, 26.if.done: t53] #k *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:132:2
this.setPH(2490);
_t26=((_Phi==12)?0:(_Phi==26)?_t38:0.0); // _t26 = phi [12.if.done: 0:float64, 26.if.done: t38] #c *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:147:6
this.SubFn15();
_Phi=19;
case 20: // if.then
this.setLatest(2490,20);
this.SubFn16();
this.setPH(2495);
_SF6=Go_math_Float64bits.call(this._goroutine,[],_t30);
_Next = -6;
return this;
case -6:
this.setLatest(2495,-6);
_t31=_SF6.res();
 // _t31 = Float64bits(t30) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:152:20
this.SubFn17();
_Phi=20;
case 21: // if.done
this.setLatest(2495,21);
this.setPH(2474);
_t36=((_Phi==23)?_t31:(_Phi==22)?_t41:(_Phi==24)?_t31:GOint64.make(0,0)); // _t36 = phi [23.if.then: t31, 22.if.else: t41, 24.if.else: t31] #iu *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:131:6
this.setPH(2475);
_t37=((_Phi==23)?_t34:(_Phi==22)?_t44:(_Phi==24)?_t34:0); // _t37 = phi [23.if.then: t34, 22.if.else: t44, 24.if.else: t34] #k *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:132:2
this.setPH(2490);
_t38=((_Phi==23)?_t46:(_Phi==22)?0:(_Phi==24)?_t49:0.0); // _t38 = phi [23.if.then: t46, 22.if.else: 0:float64, 24.if.else: t49] #c *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:147:6
this.SubFn18();
_Phi=21;
case 22: // if.else
this.setLatest(2490,22);
this.setPH(2505);
_SF7=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -7;
return this;
case -7:
this.setLatest(2505,-7);
_t41=_SF7.res();
 // _t41 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:162:20
this.SubFn19();
_Phi=22;
case 23: // if.then
this.setLatest(2505,23);
this.SubFn20();
_Phi=23;
case 24: // if.else
this.setLatest(2505,24);
this.SubFn21();
_Phi=24;
case 25: // if.then
this.setLatest(2505,25);
this.SubFn22();
this.setPH(2511);
_SF8=Go_math_Float64frombits.call(this._goroutine,[],_t50);
_Next = -8;
return this;
case -8:
this.setLatest(2511,-8);
_t51=_SF8.res();
 // _t51 = Float64frombits(t50) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:168:23
this.SubFn23();
_Phi=25;
case 26: // if.done
this.setLatest(2511,26);
this.setPH(2474);
_t52=((_Phi==25)?_t39:(_Phi==27)?_t60:GOint64.make(0,0)); // _t52 = phi [25.if.then: t39, 27.if.else: t60] #iu *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:131:6
this.setPH(2475);
_t53=((_Phi==25)?_t37:(_Phi==27)?_t56:0); // _t53 = phi [25.if.then: t37, 27.if.else: t56] #k *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:132:2
this.setPH(2492);
_t54=((_Phi==25)?_t51:(_Phi==27)?_t58:0.0); // _t54 = phi [25.if.then: t51, 27.if.else: t58] #u *ssa.Phi @ /usr/local/go/src/pkg/math/log1p.go:149:7
this.SubFn24();
_Phi=26;
case 27: // if.else
this.setLatest(2492,27);
this.SubFn25();
this.setPH(2514);
_SF9=Go_math_Float64frombits.call(this._goroutine,[],_t57);
_Next = -9;
return this;
case -9:
this.setLatest(2514,-9);
_t58=_SF9.res();
 // _t58 = Float64frombits(t57) *ssa.Call @ /usr/local/go/src/pkg/math/log1p.go:171:23
this.SubFn26();
_Phi=27;
case 28: // if.then
this.setLatest(2514,28);
this.SubFn27();
_Phi=28;
case 29: // if.done
this.setLatest(2514,29);
this.SubFn28();
_Phi=29;
case 30: // if.then
this.setLatest(2514,30);
this.SubFn29();
_Phi=30;
case 31: // if.done
this.setLatest(2514,31);
this.SubFn30();
_Phi=31;
case 32: // if.then
this.setLatest(2514,32);
this.setPH(2524);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:181:5

case 33: // if.else
this.setLatest(2524,33);
this.SubFn31();
this.setPH(2527);
_res= _t89;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t89 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:184:5

case 34: // if.then
this.setLatest(2527,34);
this.SubFn32();
this.setPH(2532);
_res= _t90;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t90 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:189:4

case 35: // if.done
this.setLatest(2532,35);
this.SubFn33();
this.setPH(2534);
_res= _t98;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t98 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:191:3

case 36: // if.then
this.setLatest(2534,36);
this.SubFn34();
this.setPH(2540);
_res= _t102;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t102 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:197:3

case 37: // if.done
this.setLatest(2540,37);
this.SubFn35();
this.setPH(2542);
_res= _t113;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t113 *ssa.Return @ /usr/local/go/src/pkg/math/log1p.go:199:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2460);
_t0=(Force.toFloat(p_x)<Force.toFloat((-1))); // _t0 = x < -1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:117:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/log1p.go:117:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Bool;
this.setPH(2462);
_t3=(Force.toFloat(p_x)==Force.toFloat((-1))); // _t3 = x == -1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:119:9
_Next=_t3 ? 2 : 7; // if t3 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/log1p.go:119:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:119:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/log1p.go:119:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t7 ? 6 : 8; // if t7 goto 6.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/log1p.go:119:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(2469);
_t8=(Force.toFloat(p_x)<Force.toFloat(0)); // _t8 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:126:10
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:126:10
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(2470);
_t9=(-Force.toFloat(p_x)); // _t9 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/log1p.go:127:10
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:127:10
}// end SubFn6
private inline  function SubFn7():Void {
var _t11:Bool;
this.setPH(2476);
_t11=(Force.toFloat(_t10)<Force.toFloat(0.41421356237309503)); // _t11 = t10 < 4142135623730950488017/10000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:133:10
_Next=_t11 ? 11 : 12; // if t11 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:133:10
}// end SubFn7
private inline  function SubFn8():Void {
var _t12:Bool;
this.setPH(2477);
_t12=(Force.toFloat(_t10)<Force.toFloat(1.862645149230957e-09)); // _t12 = t10 < 1/536870912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:134:11
_Next=_t12 ? 13 : 14; // if t12 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:134:11
}// end SubFn8
private inline  function SubFn9():Void {
var _t16:Bool;
this.setPH(2491);
_t16=(_t15!=0); // _t16 = t15 != 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:148:7
_Next=_t16 ? 18 : 19; // if t16 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:148:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t17:Bool;
this.setPH(2478);
_t17=(Force.toFloat(_t10)<Force.toFloat(5.551115123125783e-17)); // _t17 = t10 < 1/18014398509481984:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:135:12
_Next=_t17 ? 15 : 16; // if t17 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:135:12
}// end SubFn10
private inline  function SubFn11():Void {
var _t18:Bool;
this.setPH(2483);
_t18=(Force.toFloat(p_x)>Force.toFloat((-0.2928932188134525))); // _t18 = x > -366116523516815594499/1250000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:140:8
_Next=_t18 ? 17 : 12; // if t18 goto 17.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:140:8
}// end SubFn11
private inline  function SubFn12():Void {
var _t19:Float;
var _t20:Float;
this.setPH(2481);
_t19=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t19 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:138:16
_t20=(Force.toFloat(_t19)*Force.toFloat(0.5)); // _t20 = t19 * 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:138:18
_t21=(Force.toFloat(p_x)-Force.toFloat(_t20)); // _t21 = x - t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:138:13
}// end SubFn12
private inline  function SubFn13():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:138:13
}// end SubFn13
private inline  function SubFn14():Void {
var _t22:Bool;
this.setPH(2493);
_t22=(Force.toFloat(_t10)<Force.toFloat(9.007199254740992e+15)); // _t22 = t10 < 9007199254740992:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:150:11
_Next=_t22 ? 20 : 22; // if t22 goto 20.if.then else 22.if.else *ssa.If near /usr/local/go/src/pkg/math/log1p.go:150:11
}// end SubFn14
private inline  function SubFn15():Void {
var _t27:Float;
var _t29:Bool;
this.setPH(2519);
_t27=(Force.toFloat(0.5)*Force.toFloat(_t23)); // _t27 = 1/2:float64 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:176:14
_t28=(Force.toFloat(_t27)*Force.toFloat(_t23)); // _t28 = t27 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:176:18
this.setPH(2521);
_t29=(GOint64.ucompare(_t24,GOint64.make(0x0,0x0))==0); // _t29 = t24 == 0:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:178:8
_Next=_t29 ? 28 : 29; // if t29 goto 28.if.then else 29.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:178:8
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(2494);
_t30=(Force.toFloat(1)+Force.toFloat(p_x)); // _t30 = 1:float64 + x *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:151:12
}// end SubFn16
private inline  function SubFn17():Void {
var _t32:GOint64;
var _t33:GOint64;
var _t35:Bool;
this.setPH(2496);
_t32=Force.toUint64(GOint64.ushr(_t31,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t32 = t31 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:153:16
_t33=Force.toUint64(GOint64.sub(_t32,GOint64.make(0x0,0x3ff))); // _t33 = t32 - 1023:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:153:23
_t34=GOint64.toInt(_t33); // _t34 = convert int <- uint64 (t33) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:153:11
this.setPH(2497);
_t35=(_t34>0); // _t35 = t34 > 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:154:9
_Next=_t35 ? 23 : 24; // if t35 goto 23.if.then else 24.if.else *ssa.If near /usr/local/go/src/pkg/math/log1p.go:154:9
}// end SubFn17
private inline  function SubFn18():Void {
var _t40:Bool;
_t39=Force.toUint64(GOint64.and(_t36,GOint64.make(0xfffff,0xffffffff))); // _t39 = t36 & 4503599627370495:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/log1p.go:154:9
this.setPH(2510);
_t40=(GOint64.ucompare(_t39,GOint64.make(0x6a09e,0x667f3bcd))<0); // _t40 = t39 < 1865452045155277:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:167:9
_Next=_t40 ? 25 : 27; // if t40 goto 25.if.then else 27.if.else *ssa.If near /usr/local/go/src/pkg/math/log1p.go:167:9
}// end SubFn18
private inline  function SubFn19():Void {
var _t42:GOint64;
var _t43:GOint64;
this.setPH(2506);
_t42=Force.toUint64(GOint64.ushr(_t41,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t42 = t41 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:163:16
_t43=Force.toUint64(GOint64.sub(_t42,GOint64.make(0x0,0x3ff))); // _t43 = t42 - 1023:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:163:23
_t44=GOint64.toInt(_t43); // _t44 = convert int <- uint64 (t43) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:163:11
_Next=21; // jump 21.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:163:11
}// end SubFn19
private inline  function SubFn20():Void {
var _t45:Float;
this.setPH(2498);
_t45=(Force.toFloat(_t30)-Force.toFloat(p_x)); // _t45 = t30 - x *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:155:18
_t46=(Force.toFloat(1)-Force.toFloat(_t45)); // _t46 = 1:float64 - t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:155:13
_Next=21; // jump 21.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:155:13
}// end SubFn20
private inline  function SubFn21():Void {
var _t47:Float;
this.setPH(2500);
_t47=(Force.toFloat(_t30)-Force.toFloat(1)); // _t47 = t30 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:157:16
_t48=(Force.toFloat(p_x)-Force.toFloat(_t47)); // _t48 = x - t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:157:11
_t49=Force.floatDiv(Force.toFloat(_t48),Force.toFloat(_t30)); // _t49 = t48 / t30 *ssa.BinOp near /usr/local/go/src/pkg/math/log1p.go:157:11
_Next=21; // jump 21.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:157:11
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(2511);
_t50=Force.toUint64(GOint64.or(_t39,GOint64.make(0x3ff00000,0x0))); // _t50 = t39 | 4607182418800017408:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:168:27
}// end SubFn22
private inline  function SubFn23():Void {
_Next=26; // jump 26.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:168:27
}// end SubFn23
private inline  function SubFn24():Void {
this.setPH(2517);
_t55=(Force.toFloat(_t54)-Force.toFloat(1)); // _t55 = t54 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:174:9
_Next=19; // jump 19.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:174:9
}// end SubFn24
private inline  function SubFn25():Void {
_t56=(_t37+1); // _t56 = t37 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/log1p.go:174:9
this.setPH(2514);
_t57=Force.toUint64(GOint64.or(_t39,GOint64.make(0x3fe00000,0x0))); // _t57 = t39 | 4602678819172646912:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:171:27
}// end SubFn25
private inline  function SubFn26():Void {
var _t59:GOint64;
this.setPH(2515);
_t59=Force.toUint64(GOint64.sub(GOint64.make(0x100000,0x0),_t39)); // _t59 = 4503599627370496:uint64 - t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:172:29
_t60=Force.toUint64(GOint64.ushr(_t59,GOint64.toInt(GOint64.make(0x0,0x2)))); // _t60 = t59 >> 2:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:172:35
_Next=26; // jump 26.if.done *ssa.Jump near /usr/local/go/src/pkg/math/log1p.go:172:35
}// end SubFn26
private inline  function SubFn27():Void {
var _t61:Bool;
this.setPH(2522);
_t61=(Force.toFloat(_t23)==Force.toFloat(0)); // _t61 = t23 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:179:8
_Next=_t61 ? 30 : 31; // if t61 goto 30.if.then else 31.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:179:8
}// end SubFn27
private inline  function SubFn28():Void {
var _t62:Float;
var _t65:Float;
var _t66:Float;
var _t67:Float;
var _t68:Float;
var _t69:Float;
var _t70:Float;
var _t71:Float;
var _t72:Float;
var _t73:Float;
var _t74:Float;
var _t75:Float;
var _t76:Float;
var _t78:Bool;
this.setPH(2536);
_t62=(Force.toFloat(2)+Force.toFloat(_t23)); // _t62 = 2:float64 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:193:15
_t63=Force.floatDiv(Force.toFloat(_t23),Force.toFloat(_t62)); // _t63 = t23 / t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:193:8
this.setPH(2537);
_t64=(Force.toFloat(_t63)*Force.toFloat(_t63)); // _t64 = t63 * t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:194:8
this.setPH(2538);
_t65=(Force.toFloat(_t64)*Force.toFloat(0.14798198605116586)); // _t65 = t64 * 1479819860511658591/10000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:53
_t66=(Force.toFloat(0.15313837699209373)+Force.toFloat(_t65)); // _t66 = 382845942480234333/2500000000000000000:float64 + t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:51
_t67=(Force.toFloat(_t64)*Force.toFloat(_t66)); // _t67 = t64 * t66 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:46
_t68=(Force.toFloat(0.1818357216161805)+Force.toFloat(_t67)); // _t68 = 454589304040451253/2500000000000000000:float64 + t67 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:44
_t69=(Force.toFloat(_t64)*Force.toFloat(_t68)); // _t69 = t64 * t68 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:39
_t70=(Force.toFloat(0.22222198432149784)+Force.toFloat(_t69)); // _t70 = 555554960803744599/2500000000000000000:float64 + t69 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:37
_t71=(Force.toFloat(_t64)*Force.toFloat(_t70)); // _t71 = t64 * t70 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:32
_t72=(Force.toFloat(0.2857142874366239)+Force.toFloat(_t71)); // _t72 = 2857142874366239149/10000000000000000000:float64 + t71 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:30
_t73=(Force.toFloat(_t64)*Force.toFloat(_t72)); // _t73 = t64 * t72 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:25
_t74=(Force.toFloat(0.3999999999940942)+Force.toFloat(_t73)); // _t74 = 999999999985235477/2500000000000000000:float64 + t73 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:23
_t75=(Force.toFloat(_t64)*Force.toFloat(_t74)); // _t75 = t64 * t74 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:18
_t76=(Force.toFloat(0.6666666666666735)+Force.toFloat(_t75)); // _t76 = 666666666666673513/1000000000000000000:float64 + t75 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:15
_t77=(Force.toFloat(_t64)*Force.toFloat(_t76)); // _t77 = t64 * t76 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:8
this.setPH(2539);
_t78=(_t25==0); // _t78 = t25 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:196:7
_Next=_t78 ? 36 : 37; // if t78 goto 36.if.then else 37.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:196:7
}// end SubFn28
private inline  function SubFn29():Void {
var _t79:Bool;
this.setPH(2523);
_t79=(_t25==0); // _t79 = t25 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:180:9
_Next=_t79 ? 32 : 33; // if t79 goto 32.if.then else 33.if.else *ssa.If near /usr/local/go/src/pkg/math/log1p.go:180:9
}// end SubFn29
private inline  function SubFn30():Void {
var _t80:Float;
var _t81:Float;
var _t83:Bool;
this.setPH(2530);
_t80=(Force.toFloat(0.6666666666666666)*Force.toFloat(_t23)); // _t80 = 33333333333333333/50000000000000000:float64 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:187:40
_t81=(Force.toFloat(1)-Force.toFloat(_t80)); // _t81 = 1:float64 - t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:187:19
_t82=(Force.toFloat(_t28)*Force.toFloat(_t81)); // _t82 = t28 * t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:187:12
this.setPH(2531);
_t83=(_t25==0); // _t83 = t25 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:188:8
_Next=_t83 ? 34 : 35; // if t83 goto 34.if.then else 35.if.done *ssa.If near /usr/local/go/src/pkg/math/log1p.go:188:8
}// end SubFn30
private inline  function SubFn31():Void {
var _t84:Float;
var _t85:Float;
var _t87:Float;
var _t88:Float;
this.setPH(2526);
_t84=_t25; // _t84 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:183:17
_t85=(Force.toFloat(_t84)*Force.toFloat(1.9082149292705877e-10)); // _t85 = t84 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:183:21
_t86=(Force.toFloat(_t26)+Force.toFloat(_t85)); // _t86 = t26 + t85 *ssa.BinOp near /usr/local/go/src/pkg/math/log1p.go:183:21
this.setPH(2527);
_t87=_t25; // _t87 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:184:19
_t88=(Force.toFloat(_t87)*Force.toFloat(0.6931471803691238)); // _t88 = t87 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:184:22
_t89=(Force.toFloat(_t88)+Force.toFloat(_t86)); // _t89 = t88 + t86 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:184:29
}// end SubFn31
private inline  function SubFn32():Void {
this.setPH(2532);
_t90=(Force.toFloat(_t23)-Force.toFloat(_t82)); // _t90 = t23 - t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:189:13
}// end SubFn32
private inline  function SubFn33():Void {
var _t91:Float;
var _t92:Float;
var _t93:Float;
var _t94:Float;
var _t95:Float;
var _t96:Float;
var _t97:Float;
this.setPH(2534);
_t91=_t25; // _t91 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:191:17
_t92=(Force.toFloat(_t91)*Force.toFloat(0.6931471803691238)); // _t92 = t91 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:20
_t93=_t25; // _t93 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:191:43
_t94=(Force.toFloat(_t93)*Force.toFloat(1.9082149292705877e-10)); // _t94 = t93 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:46
_t95=(Force.toFloat(_t94)+Force.toFloat(_t26)); // _t95 = t94 + t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:53
_t96=(Force.toFloat(_t82)-Force.toFloat(_t95)); // _t96 = t82 - t95 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:33
_t97=(Force.toFloat(_t96)-Force.toFloat(_t23)); // _t97 = t96 - t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:59
_t98=(Force.toFloat(_t92)-Force.toFloat(_t97)); // _t98 = t92 - t97 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:27
}// end SubFn33
private inline  function SubFn34():Void {
var _t99:Float;
var _t100:Float;
var _t101:Float;
this.setPH(2540);
_t99=(Force.toFloat(_t28)+Force.toFloat(_t77)); // _t99 = t28 + t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:197:29
_t100=(Force.toFloat(_t63)*Force.toFloat(_t99)); // _t100 = t63 * t99 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:197:23
_t101=(Force.toFloat(_t28)-Force.toFloat(_t100)); // _t101 = t28 - t100 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:197:20
_t102=(Force.toFloat(_t23)-Force.toFloat(_t101)); // _t102 = t23 - t101 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:197:12
}// end SubFn34
private inline  function SubFn35():Void {
var _t103:Float;
var _t104:Float;
var _t105:Float;
var _t106:Float;
var _t107:Float;
var _t108:Float;
var _t109:Float;
var _t110:Float;
var _t111:Float;
var _t112:Float;
this.setPH(2542);
_t103=_t25; // _t103 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:199:16
_t104=(Force.toFloat(_t103)*Force.toFloat(0.6931471803691238)); // _t104 = t103 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:19
_t105=(Force.toFloat(_t28)+Force.toFloat(_t77)); // _t105 = t28 + t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:45
_t106=(Force.toFloat(_t63)*Force.toFloat(_t105)); // _t106 = t63 * t105 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:39
_t107=_t25; // _t107 = convert float64 <- int (t25) *ssa.Convert @ /usr/local/go/src/pkg/math/log1p.go:199:59
_t108=(Force.toFloat(_t107)*Force.toFloat(1.9082149292705877e-10)); // _t108 = t107 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:62
_t109=(Force.toFloat(_t108)+Force.toFloat(_t26)); // _t109 = t108 + t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:69
_t110=(Force.toFloat(_t106)+Force.toFloat(_t109)); // _t110 = t106 + t109 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:49
_t111=(Force.toFloat(_t28)-Force.toFloat(_t110)); // _t111 = t28 - t110 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:35
_t112=(Force.toFloat(_t111)-Force.toFloat(_t23)); // _t112 = t111 - t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:76
_t113=(Force.toFloat(_t104)-Force.toFloat(_t112)); // _t113 = t104 - t112 *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:26
}// end SubFn35
}
#if (!php) private #end class Go_math_sqrt extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sqrt.go:94:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3521,"Go_math_sqrt");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _SF2:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF3:StackFrame;
var _t5:Bool=false;
var _SF4:StackFrame;
var _t6:GOint64=null;
var _t7:GOint64=null;
var _t8:GOint64=null;
var _t9:Int=0;
var _t10:Bool=false;
var _t11:GOint64=null;
var _t12:Int=0;
var _t13:Int=0;
var _t14:GOint64=null;
var _t15:GOint64=null;
var _t16:Int=0;
var _t17:Bool=false;
var _t18:GOint64=null;
var _t19:Int=0;
var _t20:Int=0;
var _t21:GOint64=null;
var _t22:Int=0;
var _t23:GOint64=null;
var _t24:GOint64=null;
var _t25:Bool=false;
var _t26:GOint64=null;
var _t27:GOint64=null;
var _t28:Int=0;
var _t29:GOint64=null;
var _t30:GOint64=null;
var _t31:Bool=false;
var _t32:Bool=false;
var _t33:GOint64=null;
var _t34:GOint64=null;
var _t35:GOint64=null;
var _t36:GOint64=null;
var _t37:Bool=false;
var _t38:GOint64=null;
var _t39:GOint64=null;
var _t40:GOint64=null;
var _t41:GOint64=null;
var _t42:GOint64=null;
var _t43:GOint64=null;
var _t44:GOint64=null;
var _t45:GOint64=null;
var _t46:GOint64=null;
var _t47:GOint64=null;
var _t48:GOint64=null;
var _t49:GOint64=null;
var _t50:Int=0;
var _t51:Int=0;
var _t52:GOint64=null;
var _t53:GOint64=null;
var _t54:GOint64=null;
var _SF5:StackFrame;
var _t55:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_sqrt(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_sqrt(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_sqrt
{return new Go_math_sqrt(gr,_bds, p_x);
}
public function run():Go_math_sqrt {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3521,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(3521,1);
this.setPH(3525);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/sqrt.go:98:3

case 2: // switch.body
this.setLatest(3525,2);
this.setPH(3527);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:100:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/sqrt.go:100:3

case 3: // switch.next
this.setLatest(3527,3);
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(3527,4);
this.setPH(3524);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -2;
return this;
case -2:
this.setLatest(3524,-2);
_t3=_SF2.res();
 // _t3 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:97:34
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(3524,5);
_t4=((_Phi==0)?true:(_Phi==6)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 6.cond.false: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:97:26
this.SubFn3();
_Phi=5;
case 6: // cond.false
this.setLatest(3524,6);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(3524,-3);
_t5=_SF3.res();
 // _t5 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:97:22
this.SubFn4();
_Phi=6;
case 7: // switch.next
this.setLatest(3524,7);
this.setPH(3529);
_SF4=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(3529,-4);
_t6=_SF4.res();
 // _t6 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:102:19
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(3529,8);
_t11=((_Phi==7)?_t6:(_Phi==10)?_t21:GOint64.make(0,0)); // _t11 = phi [7.switch.next: t6, 10.for.done: t21] #ix *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:102:2
this.setPH(3531);
_t12=((_Phi==7)?_t9:(_Phi==10)?_t20:0); // _t12 = phi [7.switch.next: t9, 10.for.done: t20] #exp *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:104:2
this.SubFn6();
_Phi=8;
case 9: // for.body
this.setLatest(3531,9);
this.SubFn7();
_Phi=9;
case 10: // for.done
this.setLatest(3531,10);
this.SubFn8();
_Phi=10;
case 11: // for.loop
this.setLatest(3531,11);
this.setPH(3529);
_t21=((_Phi==7)?_t6:(_Phi==9)?_t18:GOint64.make(0,0)); // _t21 = phi [7.switch.next: t6, 9.for.body: t18] #ix *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:102:2
this.setPH(3531);
_t22=((_Phi==7)?_t9:(_Phi==9)?_t19:0); // _t22 = phi [7.switch.next: t9, 9.for.body: t19] #exp *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:104:2
this.SubFn9();
_Phi=11;
case 12: // if.then
this.setLatest(3531,12);
this.SubFn10();
_Phi=12;
case 13: // if.done
this.setLatest(3531,13);
this.setPH(3529);
_t27=((_Phi==8)?_t15:(_Phi==12)?_t26:GOint64.make(0,0)); // _t27 = phi [8.if.done: t15, 12.if.then: t26] #ix *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:102:2
this.SubFn11();
_Phi=13;
case 14: // for.body
this.setLatest(3529,14);
this.SubFn12();
_Phi=14;
case 15: // for.done
this.setLatest(3529,15);
this.SubFn13();
_Phi=15;
case 16: // for.loop
this.setLatest(3529,16);
_t33=((_Phi==13)?_t29:(_Phi==18)?_t44:GOint64.make(0,0)); // _t33 = phi [13.if.done: t29, 18.if.done: t44] #ix *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:102:2
this.setPH(3548);
_t34=((_Phi==13)?GOint64.make(0x0,0x0):(_Phi==18)?_t42:GOint64.make(0,0)); // _t34 = phi [13.if.done: 0:uint64, 18.if.done: t42] #q *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:121:6
_t35=((_Phi==13)?GOint64.make(0x0,0x0):(_Phi==18)?_t43:GOint64.make(0,0)); // _t35 = phi [13.if.done: 0:uint64, 18.if.done: t43] #s *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:121:9
this.setPH(3549);
_t36=((_Phi==13)?GOint64.make(0x200000,0x0):(_Phi==18)?_t45:GOint64.make(0,0)); // _t36 = phi [13.if.done: 9007199254740992:uint64, 18.if.done: t45] #r *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:122:2
this.SubFn14();
_Phi=16;
case 17: // if.then
this.setLatest(3549,17);
this.SubFn15();
_Phi=17;
case 18: // if.done
this.setLatest(3549,18);
this.setPH(3529);
_t41=((_Phi==14)?_t33:(_Phi==17)?_t39:GOint64.make(0,0)); // _t41 = phi [14.for.body: t33, 17.if.then: t39] #ix *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:102:2
this.setPH(3548);
_t42=((_Phi==14)?_t34:(_Phi==17)?_t40:GOint64.make(0,0)); // _t42 = phi [14.for.body: t34, 17.if.then: t40] #q *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:121:6
_t43=((_Phi==14)?_t35:(_Phi==17)?_t38:GOint64.make(0,0)); // _t43 = phi [14.for.body: t35, 17.if.then: t38] #s *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:121:9
this.SubFn16();
_Phi=18;
case 19: // if.then
this.setLatest(3548,19);
this.SubFn17();
_Phi=19;
case 20: // if.done
this.setLatest(3548,20);
_t48=((_Phi==15)?_t34:(_Phi==19)?_t47:GOint64.make(0,0)); // _t48 = phi [15.for.done: t34, 19.if.then: t47] #q *ssa.Phi @ /usr/local/go/src/pkg/math/sqrt.go:121:6
this.SubFn18();
this.setPH(3565);
_SF5=Go_math_Float64frombits.call(this._goroutine,[],_t54);
_Next = -5;
return this;
case -5:
this.setLatest(3565,-5);
_t55=_SF5.res();
 // _t55 = Float64frombits(t54) *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:138:24
_res= _t55;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t55 *ssa.Return @ /usr/local/go/src/pkg/math/sqrt.go:138:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3524);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:97:9
_Next=_t0 ? 5 : 6; // if t0 goto 5.binop.done else 6.cond.false *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:97:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(3526);
_t2=(Force.toFloat(p_x)<Force.toFloat(0)); // _t2 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:99:9
_Next=_t2 ? 2 : 7; // if t2 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:99:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:99:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:99:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t5 ? 5 : 4; // if t5 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:99:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:GOint64;
var _t8:GOint64;
var _t10:Bool;
this.setPH(3531);
_t7=Force.toUint64(GOint64.ushr(_t6,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t7 = t6 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:104:17
_t8=Force.toUint64(GOint64.and(_t7,GOint64.make(0x0,0x7ff))); // _t8 = t7 & 2047:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:104:27
_t9=GOint64.toInt(_t8); // _t9 = convert int <- uint64 (t8) *ssa.Convert @ /usr/local/go/src/pkg/math/sqrt.go:104:12
this.setPH(3532);
_t10=(_t9==0); // _t10 = t9 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:105:9
_Next=_t10 ? 11 : 8; // if t10 goto 11.for.loop else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:105:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t16:Int;
var _t17:Bool;
_t13=(_t12-1023); // _t13 = t12 - 1023:int *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:105:9
_t14=Force.toUint64(GOint64.and(_t11,GOint64.xor(GOint64.make(0x7ff00000,0x0),GOint64.make(-1,-1)))); // _t14 = t11 &^ 9218868437227405312:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:105:9
_t15=Force.toUint64(GOint64.or(_t14,GOint64.make(0x100000,0x0))); // _t15 = t14 | 4503599627370496:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:105:9
this.setPH(3542);
_t16=(_t13&1); // _t16 = t13 & 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:115:8
_t17=(_t16==1); // _t17 = t16 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:115:11
_Next=_t17 ? 12 : 13; // if t17 goto 12.if.then else 13.if.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:115:11
}// end SubFn6
private inline  function SubFn7():Void {
_t18=Force.toUint64(GOint64.shl(_t21,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t18 = t21 << 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:115:11
_t19=(_t22-1); // _t19 = t22 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:115:11
_Next=11; // jump 11.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:115:11
}// end SubFn7
private inline  function SubFn8():Void {
_t20=(_t22+1); // _t20 = t22 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:115:11
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:115:11
}// end SubFn8
private inline  function SubFn9():Void {
var _t23:GOint64;
var _t24:GOint64;
var _t25:Bool;
this.setPH(3533);
_t23=Force.toUint64(GOint64.and(_t21,GOint64.make(0x0,0x1))); // _t23 = t21 & 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:106:9
_t24=Force.toUint64(GOint64.shl(_t23,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t24 = t23 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:106:11
_t25=(GOint64.ucompare(_t24,GOint64.make(0x0,0x0))==0); // _t25 = t24 == 0:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:106:19
_Next=_t25 ? 9 : 10; // if t25 goto 9.for.body else 10.for.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:106:19
}// end SubFn9
private inline  function SubFn10():Void {
_t26=Force.toUint64(GOint64.shl(_t15,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t26 = t15 << 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:106:19
_Next=13; // jump 13.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:106:19
}// end SubFn10
private inline  function SubFn11():Void {
_t28=(_t13>>GOint64.toInt(GOint64.make(0x0,0x1))); // _t28 = t13 >> 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:106:19
_t29=Force.toUint64(GOint64.shl(_t27,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t29 = t27 << 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:106:19
_Next=16; // jump 16.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:106:19
}// end SubFn11
private inline  function SubFn12():Void {
var _t31:Bool;
this.setPH(3551);
_t30=Force.toUint64(GOint64.add(_t35,_t36)); // _t30 = t35 + t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:124:10
this.setPH(3552);
_t31=(GOint64.ucompare(_t30,_t33)<=0); // _t31 = t30 <= t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:125:8
_Next=_t31 ? 17 : 18; // if t31 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:125:8
}// end SubFn12
private inline  function SubFn13():Void {
var _t32:Bool;
this.setPH(3561);
_t32=(GOint64.ucompare(_t33,GOint64.make(0x0,0x0))!=0); // _t32 = t33 != 0:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:134:8
_Next=_t32 ? 19 : 20; // if t32 goto 19.if.then else 20.if.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:134:8
}// end SubFn13
private inline  function SubFn14():Void {
var _t37:Bool;
this.setPH(3550);
_t37=(GOint64.ucompare(_t36,GOint64.make(0x0,0x0))!=0); // _t37 = t36 != 0:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:123:8
_Next=_t37 ? 14 : 15; // if t37 goto 14.for.body else 15.for.done *ssa.If near /usr/local/go/src/pkg/math/sqrt.go:123:8
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(3553);
_t38=Force.toUint64(GOint64.add(_t30,_t36)); // _t38 = t30 + t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:126:10
_t39=Force.toUint64(GOint64.sub(_t33,_t30)); // _t39 = t33 - t30 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:126:10
_t40=Force.toUint64(GOint64.add(_t34,_t36)); // _t40 = t34 + t36 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:126:10
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:126:10
}// end SubFn15
private inline  function SubFn16():Void {
_t44=Force.toUint64(GOint64.shl(_t41,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t44 = t41 << 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:126:10
_t45=Force.toUint64(GOint64.ushr(_t36,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t45 = t36 >> 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:126:10
_Next=16; // jump 16.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:126:10
}// end SubFn16
private inline  function SubFn17():Void {
var _t46:GOint64;
this.setPH(3562);
_t46=Force.toUint64(GOint64.and(_t34,GOint64.make(0x0,0x1))); // _t46 = t34 & 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:135:10
_t47=Force.toUint64(GOint64.add(_t34,_t46)); // _t47 = t34 + t46 *ssa.BinOp near /usr/local/go/src/pkg/math/sqrt.go:135:10
_Next=20; // jump 20.if.done *ssa.Jump near /usr/local/go/src/pkg/math/sqrt.go:135:10
}// end SubFn17
private inline  function SubFn18():Void {
var _t49:GOint64;
var _t50:Int;
var _t51:Int;
var _t52:GOint64;
var _t53:GOint64;
this.setPH(3564);
_t49=Force.toUint64(GOint64.ushr(_t48,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t49 = t48 >> 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:137:8
_t50=(_t28-1); // _t50 = t28 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:137:24
_t51=(_t50+1023); // _t51 = t50 + 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:137:26
_t52=GOint64.ofInt(_t51); // _t52 = convert uint64 <- int (t51) *ssa.Convert @ /usr/local/go/src/pkg/math/sqrt.go:137:20
_t53=Force.toUint64(GOint64.shl(_t52,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t53 = t52 << 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:137:32
_t54=Force.toUint64(GOint64.add(_t49,_t53)); // _t54 = t49 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/sqrt.go:137:12
}// end SubFn18
}
#if js @:expose("Go_math_Gamma") #end class Go_math_Gamma extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/gamma.go:122:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1292,"Go_math_Gamma");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _SF4:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF5:StackFrame;
var _t6:Bool=false;
var _SF6:StackFrame;
var _t7:Float=0.0;
var _t8:Bool=false;
var _SF7:StackFrame;
var _t9:Float=0.0;
var _SF8:StackFrame;
var _t10:Float=0.0;
var _SF9:StackFrame;
var _t11:Float=0.0;
var _SF10:StackFrame;
var _t12:Float=0.0;
var _t13:Bool=false;
var _t14:Bool=false;
var _t15:Bool=false;
var _t16:Bool=false;
var _SF11:StackFrame;
var _t17:Float=0.0;
var _t18:Int=0;
var _t19:Int=0;
var _t20:Bool=false;
var _t21:Int=0;
var _t22:Float=0.0;
var _t23:Bool=false;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _SF12:StackFrame;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Bool=false;
var _SF13:StackFrame;
var _t31:Float=0.0;
var _SF14:StackFrame;
var _t32:Float=0.0;
var _SF15:StackFrame;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Bool=false;
var _t43:Bool=false;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Bool=false;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Bool=false;
var _t52:Bool=false;
var _t53:Bool=false;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Bool=false;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Array<Float>=null;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Array<Float>=null;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Array<Float>=null;
var _t68:Float=0.0;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Array<Float>=null;
var _t72:Float=0.0;
var _t73:Float=0.0;
var _t74:Float=0.0;
var _t75:Array<Float>=null;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Array<Float>=null;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Array<Float>=null;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Array<Float>=null;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _t89:Array<Float>=null;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Float=0.0;
var _t93:Array<Float>=null;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _t96:Float=0.0;
var _t97:Array<Float>=null;
var _t98:Float=0.0;
var _t99:Float=0.0;
var _t100:Float=0.0;
var _t101:Array<Float>=null;
var _t102:Float=0.0;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Array<Float>=null;
var _t106:Float=0.0;
var _t107:Float=0.0;
var _t108:Float=0.0;
var _t109:Array<Float>=null;
var _t110:Float=0.0;
var _t111:Float=0.0;
var _t112:Float=0.0;
var _t113:Array<Float>=null;
var _t114:Float=0.0;
var _t115:Float=0.0;
var _t116:Float=0.0;
var _t117:Float=0.0;
var _SF16:StackFrame;
var _t118:Float=0.0;
var _t119:Float=0.0;
var _t120:Float=0.0;
var _t121:Float=0.0;
var _t122:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Gamma(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Gamma(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Gamma
{return new Go_math_Gamma(gr,_bds, p_x);
}
public function run():Go_math_Gamma {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1292,0);
this.setPH(1296);
_SF1=Go_math_isNegInt.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(1296,-1);
_t0=_SF1.res();
 // _t0 = isNegInt(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:126:15
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1296,1);
this.setPH(1297);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:127:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:127:3

case 2: // switch.body
this.setLatest(1297,2);
this.setPH(1299);
_SF3=Go_math_Signbit.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(1299,-3);
_t2=_SF3.res();
 // _t2 = Signbit(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:129:13
this.SubFn1();
_Phi=2;
case 3: // switch.next
this.setLatest(1299,3);
this.SubFn2();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1299,4);
this.setPH(1296);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(1296,-4);
_t4=_SF4.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:126:43
this.SubFn3();
_Phi=4;
case 5: // binop.done
this.setLatest(1296,5);
_t5=((_Phi==0)?true:(_Phi==6)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 6.cond.false: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:126:35
this.SubFn4();
_Phi=5;
case 6: // cond.false
this.setLatest(1296,6);
_SF5=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -5;
return this;
case -5:
this.setLatest(1296,-5);
_t6=_SF5.res();
 // _t6 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:126:27
this.SubFn5();
_Phi=6;
case 7: // switch.body
this.setLatest(1296,7);
this.setPH(1304);
_t7=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t7 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:134:13
_res= _t7;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t7 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:134:3

case 8: // switch.next
this.setLatest(1304,8);
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(1304,9);
this.setPH(1300);
_t9=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t9 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:130:14
_res= _t9;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t9 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:130:4

case 10: // if.done
this.setLatest(1300,10);
this.setPH(1302);
_t10=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t10 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:132:13
_res= _t10;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t10 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:132:3

case 11: // switch.next
this.setLatest(1302,11);
this.setPH(1306);
_t11=Math.abs(p_x); // _t11 = Abs(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:136:10
this.setPH(1307);
_t12=Math.ffloor(_t11); // _t12 = Floor(t11) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:137:12
this.SubFn7();
_Phi=11;
case 12: // binop.rhs
this.setLatest(1307,12);
this.SubFn8();
_Phi=12;
case 13: // binop.done
this.setLatest(1307,13);
this.setPH(1303);
_t15=((_Phi==8)?true:(_Phi==12)?_t14:false); // _t15 = phi [8.switch.next: true:bool, 12.binop.rhs: t14] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:133:30
this.SubFn9();
_Phi=13;
case 14: // if.then
this.setLatest(1303,14);
this.SubFn10();
_Phi=14;
case 15: // if.done
this.setLatest(1303,15);
this.SubFn11();
_Phi=15;
case 16: // if.then
this.setLatest(1303,16);
this.setPH(1310);
_SF11=Go_math_stirling.call(this._goroutine,[],p_x);
_Next = -11;
return this;
case -11:
this.setLatest(1310,-11);
_t17=_SF11.res();
 // _t17 = stirling(x) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:140:19
_res= _t17;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t17 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:140:4

case 17: // if.done
this.setLatest(1310,17);
this.SubFn12();
_Phi=17;
case 18: // if.then
this.setLatest(1310,18);
this.SubFn13();
_Phi=18;
case 19: // if.done
this.setLatest(1310,19);
this.setPH(1312);
_t21=((_Phi==17)?1:(_Phi==18)?(-1):0); // _t21 = phi [17.if.done: 1:int, 18.if.then: -1:int] #signgam *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:142:3
this.SubFn14();
_Phi=19;
case 20: // if.then
this.setLatest(1312,20);
this.SubFn15();
_Phi=20;
case 21: // if.done
this.setLatest(1312,21);
this.setPH(1316);
_t26=((_Phi==19)?_t22:(_Phi==20)?_t25:0.0); // _t26 = phi [19.if.done: t22, 20.if.then: t25] #z *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:146:3
this.SubFn16();
this.setPH(1321);
_t28=Math.sin(_t27); // _t28 = Sin(t27) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:151:14
this.SubFn17();
_Phi=21;
case 22: // if.then
this.setLatest(1321,22);
this.setPH(1323);
_t31=(_t21>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t31 = Inf(t21) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:153:14
_res= _t31;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t31 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:153:4

case 23: // if.done
this.setLatest(1323,23);
this.setPH(1325);
_t32=Math.abs(_t29); // _t32 = Abs(t29) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:155:16
_SF15=Go_math_stirling.call(this._goroutine,[],_t11);
_Next = -15;
return this;
case -15:
this.setLatest(1325,-15);
_t33=_SF15.res();
 // _t33 = stirling(t11) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:155:30
this.SubFn18();
this.setPH(1326);
_res= _t37;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t37 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:156:3

case 24: // for.body
this.setLatest(1326,24);
this.SubFn19();
_Phi=24;
case 25: // for.loop
this.setLatest(1326,25);
this.setPH(1292);
_t40=((_Phi==15)?p_x:(_Phi==24)?_t38:0.0); // _t40 = phi [15.if.done: x, 24.for.body: t38] #x *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:122:12
this.setPH(1330);
_t41=((_Phi==15)?1:(_Phi==24)?_t39:0.0); // _t41 = phi [15.if.done: 1:float64, 24.for.body: t39] #z *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:160:2
this.SubFn20();
_Phi=25;
case 26: // for.body
this.setLatest(1330,26);
this.SubFn21();
_Phi=26;
case 27: // for.loop
this.setLatest(1330,27);
this.setPH(1292);
_t44=((_Phi==25)?_t40:(_Phi==28)?_t48:0.0); // _t44 = phi [25.for.loop: t40, 28.if.done: t48] #x *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:122:12
this.setPH(1330);
_t45=((_Phi==25)?_t41:(_Phi==28)?_t47:0.0); // _t45 = phi [25.for.loop: t41, 28.if.done: t47] #z *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:160:2
this.SubFn22();
_Phi=27;
case 28: // if.done
this.setLatest(1330,28);
this.SubFn23();
_Phi=28;
case 29: // small
this.setLatest(1330,29);
this.setPH(1292);
_t49=((_Phi==26)?_t44:(_Phi==30)?_t54:0.0); // _t49 = phi [26.for.body: t44, 30.for.body: t54] #x *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:122:12
this.setPH(1330);
_t50=((_Phi==26)?_t45:(_Phi==30)?_t55:0.0); // _t50 = phi [26.for.body: t45, 30.for.body: t55] #z *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:160:2
this.SubFn24();
_Phi=29;
case 30: // for.body
this.setLatest(1330,30);
this.SubFn25();
_Phi=30;
case 31: // for.done
this.setLatest(1330,31);
this.SubFn26();
_Phi=31;
case 32: // for.loop
this.setLatest(1330,32);
this.setPH(1292);
_t54=((_Phi==27)?_t44:(_Phi==33)?_t58:0.0); // _t54 = phi [27.for.loop: t44, 33.if.done: t58] #x *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:122:12
this.setPH(1330);
_t55=((_Phi==27)?_t45:(_Phi==33)?_t57:0.0); // _t55 = phi [27.for.loop: t45, 33.if.done: t57] #z *ssa.Phi @ /usr/local/go/src/pkg/math/gamma.go:160:2
this.SubFn27();
_Phi=32;
case 33: // if.done
this.setLatest(1330,33);
this.SubFn28();
_Phi=33;
case 34: // if.then
this.setLatest(1330,34);
this.setPH(1351);
_res= _t55;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t55 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:181:3

case 35: // if.done
this.setLatest(1351,35);
this.SubFn29();
this.setPH(1357);
_res= _t117;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t117 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:187:2

case 36: // if.then
this.setLatest(1357,36);
this.setPH(1361);
_t118=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t118 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/gamma.go:191:13
_res= _t118;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t118 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:191:3

case 37: // if.done
this.setLatest(1361,37);
this.SubFn30();
this.setPH(1363);
_res= _t122;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t122 *ssa.Return @ /usr/local/go/src/pkg/math/gamma.go:193:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 6; // if t0 goto 5.binop.done else 6.cond.false *ssa.If near /usr/local/go/src/pkg/math/gamma.go:193:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 9 : 10; // if t2 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:193:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
this.setPH(1298);
_t3=(Force.toFloat(p_x)==Force.toFloat(0)); // _t3 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:128:9
_Next=_t3 ? 2 : 8; // if t3 goto 2.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/gamma.go:128:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:128:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/gamma.go:128:9
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t6 ? 5 : 4; // if t6 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/gamma.go:128:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t8:Bool;
this.setPH(1303);
_t8=(Force.toFloat(p_x)<Force.toFloat((-170.5674972726612))); // _t8 = x < -426418743181653/2500000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:133:9
_Next=_t8 ? 13 : 12; // if t8 goto 13.binop.done else 12.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/gamma.go:133:9
}// end SubFn6
private inline  function SubFn7():Void {
var _t13:Bool;
this.setPH(1308);
_t13=(Force.toFloat(_t11)>Force.toFloat(33)); // _t13 = t11 > 33:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:138:7
_Next=_t13 ? 14 : 15; // if t13 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:138:7
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(1303);
_t14=(Force.toFloat(p_x)>Force.toFloat(171.61447887182297)); // _t14 = x > 8580723943591149/50000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:133:35
_Next=13; // jump 13.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:133:35
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t15 ? 7 : 11; // if t15 goto 7.switch.body else 11.switch.next *ssa.If near /usr/local/go/src/pkg/math/gamma.go:133:35
}// end SubFn9
private inline  function SubFn10():Void {
var _t16:Bool;
this.setPH(1309);
_t16=(Force.toFloat(p_x)>=Force.toFloat(0)); // _t16 = x >= 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:139:8
_Next=_t16 ? 16 : 17; // if t16 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:139:8
}// end SubFn10
private inline  function SubFn11():Void {
_Next=25; // jump 25.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:139:8
}// end SubFn11
private inline  function SubFn12():Void {
var _t19:Int;
var _t20:Bool;
this.setPH(1313);
_t18={var _f:Float=_t12;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t18 = convert int <- float64 (t12) *ssa.Convert @ /usr/local/go/src/pkg/math/gamma.go:143:15
_t19=(_t18&1); // _t19 = t18 & 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:143:22
_t20=(_t19==0); // _t20 = t19 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:143:25
_Next=_t20 ? 18 : 19; // if t20 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:143:25
}// end SubFn12
private inline  function SubFn13():Void {
_Next=19; // jump 19.if.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:143:25
}// end SubFn13
private inline  function SubFn14():Void {
var _t23:Bool;
this.setPH(1316);
_t22=(Force.toFloat(_t11)-Force.toFloat(_t12)); // _t22 = t11 - t12 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:146:10
this.setPH(1317);
_t23=(Force.toFloat(_t22)>Force.toFloat(0.5)); // _t23 = t22 > 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:147:8
_Next=_t23 ? 20 : 21; // if t23 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:147:8
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(1318);
_t24=(Force.toFloat(_t12)+Force.toFloat(1)); // _t24 = t12 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:148:10
this.setPH(1319);
_t25=(Force.toFloat(_t11)-Force.toFloat(_t24)); // _t25 = t11 - t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:149:10
_Next=21; // jump 21.if.done *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:149:10
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(1321);
_t27=(Force.toFloat(3.141592653589793)*Force.toFloat(_t26)); // _t27 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:151:17
}// end SubFn16
private inline  function SubFn17():Void {
var _t30:Bool;
_t29=(Force.toFloat(_t11)*Force.toFloat(_t28)); // _t29 = t11 * t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:151:9
this.setPH(1322);
_t30=(Force.toFloat(_t29)==Force.toFloat(0)); // _t30 = t29 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:152:8
_Next=_t30 ? 22 : 23; // if t30 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:152:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t34:Float;
var _t36:Float;
this.setPH(1325);
_t34=(Force.toFloat(_t32)*Force.toFloat(_t33)); // _t34 = t32 * t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:155:20
_t35=Force.floatDiv(Force.toFloat(3.141592653589793),Force.toFloat(_t34)); // _t35 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 / t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:155:10
this.setPH(1326);
_t36=_t21; // _t36 = convert float64 <- int (t21) *ssa.Convert @ /usr/local/go/src/pkg/math/gamma.go:156:17
_t37=(Force.toFloat(_t36)*Force.toFloat(_t35)); // _t37 = t36 * t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:156:27
}// end SubFn18
private inline  function SubFn19():Void {
this.setPH(1332);
_t38=(Force.toFloat(_t40)-Force.toFloat(1)); // _t38 = t40 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:162:9
this.setPH(1333);
_t39=(Force.toFloat(_t41)*Force.toFloat(_t38)); // _t39 = t41 * t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:163:9
_Next=25; // jump 25.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:163:9
}// end SubFn19
private inline  function SubFn20():Void {
var _t42:Bool;
this.setPH(1331);
_t42=(Force.toFloat(_t40)>=Force.toFloat(3)); // _t42 = t40 >= 3:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:161:8
_Next=_t42 ? 24 : 27; // if t42 goto 24.for.body else 27.for.loop *ssa.If near /usr/local/go/src/pkg/math/gamma.go:161:8
}// end SubFn20
private inline  function SubFn21():Void {
var _t43:Bool;
this.setPH(1336);
_t43=(Force.toFloat(_t44)>Force.toFloat((-1e-09))); // _t43 = t44 > -1/1000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:166:8
_Next=_t43 ? 29 : 28; // if t43 goto 29.small else 28.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:166:8
}// end SubFn21
private inline  function SubFn22():Void {
var _t46:Bool;
this.setPH(1335);
_t46=(Force.toFloat(_t44)<Force.toFloat(0)); // _t46 = t44 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:165:8
_Next=_t46 ? 26 : 32; // if t46 goto 26.for.body else 32.for.loop *ssa.If near /usr/local/go/src/pkg/math/gamma.go:165:8
}// end SubFn22
private inline  function SubFn23():Void {
this.setPH(1339);
_t47=Force.floatDiv(Force.toFloat(_t45),Force.toFloat(_t44)); // _t47 = t45 / t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:169:9
this.setPH(1340);
_t48=(Force.toFloat(_t44)+Force.toFloat(1)); // _t48 = t44 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:170:9
_Next=27; // jump 27.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:170:9
}// end SubFn23
private inline  function SubFn24():Void {
var _t51:Bool;
this.setPH(1360);
_t51=(Force.toFloat(_t49)==Force.toFloat(0)); // _t51 = t49 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:190:7
_Next=_t51 ? 36 : 37; // if t51 goto 36.if.then else 37.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:190:7
}// end SubFn24
private inline  function SubFn25():Void {
var _t52:Bool;
this.setPH(1343);
_t52=(Force.toFloat(_t54)<Force.toFloat(1e-09)); // _t52 = t54 < 1/1000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:173:8
_Next=_t52 ? 29 : 33; // if t52 goto 29.small else 33.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:173:8
}// end SubFn25
private inline  function SubFn26():Void {
var _t53:Bool;
this.setPH(1350);
_t53=(Force.toFloat(_t54)==Force.toFloat(2)); // _t53 = t54 == 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:180:7
_Next=_t53 ? 34 : 35; // if t53 goto 34.if.then else 35.if.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:180:7
}// end SubFn26
private inline  function SubFn27():Void {
var _t56:Bool;
this.setPH(1342);
_t56=(Force.toFloat(_t54)<Force.toFloat(2)); // _t56 = t54 < 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:172:8
_Next=_t56 ? 30 : 31; // if t56 goto 30.for.body else 31.for.done *ssa.If near /usr/local/go/src/pkg/math/gamma.go:172:8
}// end SubFn27
private inline  function SubFn28():Void {
this.setPH(1346);
_t57=Force.floatDiv(Force.toFloat(_t55),Force.toFloat(_t54)); // _t57 = t55 / t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:176:9
this.setPH(1347);
_t58=(Force.toFloat(_t54)+Force.toFloat(1)); // _t58 = t54 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:177:9
_Next=32; // jump 32.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/gamma.go:177:9
}// end SubFn28
private inline  function SubFn29():Void {
var _t60:Array<Float>;
var _t61:Float;
var _t62:Float;
var _t63:Array<Float>;
var _t64:Float;
var _t65:Float;
var _t66:Float;
var _t67:Array<Float>;
var _t68:Float;
var _t69:Float;
var _t70:Float;
var _t71:Array<Float>;
var _t72:Float;
var _t73:Float;
var _t74:Float;
var _t75:Array<Float>;
var _t76:Float;
var _t77:Float;
var _t78:Float;
var _t79:Array<Float>;
var _t80:Float;
var _t81:Float;
var _t82:Float;
var _t83:Array<Float>;
var _t84:Float;
var _t86:Array<Float>;
var _t87:Float;
var _t88:Float;
var _t89:Array<Float>;
var _t90:Float;
var _t91:Float;
var _t92:Float;
var _t93:Array<Float>;
var _t94:Float;
var _t95:Float;
var _t96:Float;
var _t97:Array<Float>;
var _t98:Float;
var _t99:Float;
var _t100:Float;
var _t101:Array<Float>;
var _t102:Float;
var _t103:Float;
var _t104:Float;
var _t105:Array<Float>;
var _t106:Float;
var _t107:Float;
var _t108:Float;
var _t109:Array<Float>;
var _t110:Float;
var _t111:Float;
var _t112:Float;
var _t113:Array<Float>;
var _t114:Float;
var _t116:Float;
this.setPH(1354);
_t59=(Force.toFloat(_t54)-Force.toFloat(2)); // _t59 = t54 - 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:184:8
_t60=Go.math__gamP.load(); // _t60 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:184:8
this.setPH(1355);
_t61=_t60[0]; // _t61 = t60[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:18
_t62=(Force.toFloat(_t59)*Force.toFloat(_t61)); // _t62 = t59 * t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:12
_t63=Go.math__gamP.load(); // _t63 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:12
_t64=_t63[1]; // _t64 = t63[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:27
_t65=(Force.toFloat(_t62)+Force.toFloat(_t64)); // _t65 = t62 + t64 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:21
_t66=(Force.toFloat(_t65)*Force.toFloat(_t59)); // _t66 = t65 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:31
_t67=Go.math__gamP.load(); // _t67 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:31
_t68=_t67[2]; // _t68 = t67[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:39
_t69=(Force.toFloat(_t66)+Force.toFloat(_t68)); // _t69 = t66 + t68 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:33
_t70=(Force.toFloat(_t69)*Force.toFloat(_t59)); // _t70 = t69 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:43
_t71=Go.math__gamP.load(); // _t71 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:43
_t72=_t71[3]; // _t72 = t71[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:51
_t73=(Force.toFloat(_t70)+Force.toFloat(_t72)); // _t73 = t70 + t72 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:45
_t74=(Force.toFloat(_t73)*Force.toFloat(_t59)); // _t74 = t73 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:55
_t75=Go.math__gamP.load(); // _t75 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:55
_t76=_t75[4]; // _t76 = t75[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:63
_t77=(Force.toFloat(_t74)+Force.toFloat(_t76)); // _t77 = t74 + t76 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:57
_t78=(Force.toFloat(_t77)*Force.toFloat(_t59)); // _t78 = t77 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:67
_t79=Go.math__gamP.load(); // _t79 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:67
_t80=_t79[5]; // _t80 = t79[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:75
_t81=(Force.toFloat(_t78)+Force.toFloat(_t80)); // _t81 = t78 + t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:69
_t82=(Force.toFloat(_t81)*Force.toFloat(_t59)); // _t82 = t81 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:79
_t83=Go.math__gamP.load(); // _t83 = *_gamP *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:79
_t84=_t83[6]; // _t84 = t83[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:185:89
_t85=(Force.toFloat(_t82)+Force.toFloat(_t84)); // _t85 = t82 + t84 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:185:82
_t86=Go.math__gamQ.load(); // _t86 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:185:82
this.setPH(1356);
_t87=_t86[0]; // _t87 = t86[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:19
_t88=(Force.toFloat(_t59)*Force.toFloat(_t87)); // _t88 = t59 * t87 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:13
_t89=Go.math__gamQ.load(); // _t89 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:13
_t90=_t89[1]; // _t90 = t89[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:28
_t91=(Force.toFloat(_t88)+Force.toFloat(_t90)); // _t91 = t88 + t90 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:22
_t92=(Force.toFloat(_t91)*Force.toFloat(_t59)); // _t92 = t91 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:32
_t93=Go.math__gamQ.load(); // _t93 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:32
_t94=_t93[2]; // _t94 = t93[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:40
_t95=(Force.toFloat(_t92)+Force.toFloat(_t94)); // _t95 = t92 + t94 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:34
_t96=(Force.toFloat(_t95)*Force.toFloat(_t59)); // _t96 = t95 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:44
_t97=Go.math__gamQ.load(); // _t97 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:44
_t98=_t97[3]; // _t98 = t97[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:52
_t99=(Force.toFloat(_t96)+Force.toFloat(_t98)); // _t99 = t96 + t98 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:46
_t100=(Force.toFloat(_t99)*Force.toFloat(_t59)); // _t100 = t99 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:56
_t101=Go.math__gamQ.load(); // _t101 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:56
_t102=_t101[4]; // _t102 = t101[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:64
_t103=(Force.toFloat(_t100)+Force.toFloat(_t102)); // _t103 = t100 + t102 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:58
_t104=(Force.toFloat(_t103)*Force.toFloat(_t59)); // _t104 = t103 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:68
_t105=Go.math__gamQ.load(); // _t105 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:68
_t106=_t105[5]; // _t106 = t105[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:76
_t107=(Force.toFloat(_t104)+Force.toFloat(_t106)); // _t107 = t104 + t106 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:70
_t108=(Force.toFloat(_t107)*Force.toFloat(_t59)); // _t108 = t107 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:80
_t109=Go.math__gamQ.load(); // _t109 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:80
_t110=_t109[6]; // _t110 = t109[6:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:88
_t111=(Force.toFloat(_t108)+Force.toFloat(_t110)); // _t111 = t108 + t110 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:82
_t112=(Force.toFloat(_t111)*Force.toFloat(_t59)); // _t112 = t111 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:92
_t113=Go.math__gamQ.load(); // _t113 = *_gamQ *ssa.UnOp near /usr/local/go/src/pkg/math/gamma.go:186:92
_t114=_t113[7]; // _t114 = t113[7:int] *ssa.Index @ /usr/local/go/src/pkg/math/gamma.go:186:102
_t115=(Force.toFloat(_t112)+Force.toFloat(_t114)); // _t115 = t112 + t114 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:186:95
this.setPH(1357);
_t116=(Force.toFloat(_t55)*Force.toFloat(_t85)); // _t116 = t55 * t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:187:11
_t117=Force.floatDiv(Force.toFloat(_t116),Force.toFloat(_t115)); // _t117 = t116 / t115 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:187:15
}// end SubFn29
private inline  function SubFn30():Void {
var _t119:Float;
var _t120:Float;
var _t121:Float;
this.setPH(1363);
_t119=(Force.toFloat(0.5772156649015329)*Force.toFloat(_t49)); // _t119 = 7215195811269160757581401126030030388026991699249/12500000000000000000000000000000000000000000000000:float64 * t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:193:24
_t120=(Force.toFloat(1)+Force.toFloat(_t119)); // _t120 = 1:float64 + t119 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:193:17
_t121=(Force.toFloat(_t120)*Force.toFloat(_t49)); // _t121 = t120 * t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:193:28
_t122=Force.floatDiv(Force.toFloat(_t50),Force.toFloat(_t121)); // _t122 = t50 / t121 *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:193:11
}// end SubFn30
}
#if (!php) private #end class Go_utf8_decodeRuneInStringInternal extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:123:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5367,"Go_utf8_decodeRuneInStringInternal");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int, r2:Bool};
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Int=0;
var _t3:Bool=false;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Int=0;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Int=0;
var _t12:Int=0;
var _t13:Int=0;
var _t14:Int=0;
var _t15:Int=0;
var _t16:Int=0;
var _t17:Bool=false;
var _t18:Bool=false;
var _t19:Int=0;
var _t20:Bool=false;
var _t21:Bool=false;
var _t22:Bool=false;
var _t23:Int=0;
var _t24:Int=0;
var _t25:Int=0;
var _t26:Int=0;
var _t27:Int=0;
var _t28:Int=0;
var _t29:Int=0;
var _t30:Int=0;
var _t31:Int=0;
var _t32:Int=0;
var _t33:Bool=false;
var _t34:Bool=false;
var _t35:Bool=false;
var _t36:Bool=false;
var _t37:Int=0;
var _t38:Bool=false;
var _t39:Bool=false;
var _t40:Bool=false;
var _t41:Int=0;
var _t42:Int=0;
var _t43:Int=0;
var _t44:Int=0;
var _t45:Int=0;
var _t46:Int=0;
var _t47:Int=0;
var _t48:Int=0;
var _t49:Int=0;
var _t50:Int=0;
var _t51:Int=0;
var _t52:Int=0;
var _t53:Int=0;
var _t54:Int=0;
var _t55:Bool=false;
var _t56:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : {r0:Int, r1:Int, r2:Bool} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_decodeRuneInStringInternal(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : {r0:Int, r1:Int, r2:Bool} {
var _sf=new Go_utf8_decodeRuneInStringInternal(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_decodeRuneInStringInternal
{return new Go_utf8_decodeRuneInStringInternal(gr,_bds, p_s);
}
public function run():Go_utf8_decodeRuneInStringInternal {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5367,0);
this.SubFn0();

case 1: // if.then
this.setLatest(5367,1);
this.setPH(5370);
_res= {r0:65533,r1:0,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 0:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:126:3

case 2: // if.done
this.setLatest(5370,2);
this.SubFn1();

case 3: // if.then
this.setLatest(5370,3);
this.SubFn2();
this.setPH(5376);
_res= {r0:_t4,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:132:3

case 4: // if.done
this.setLatest(5376,4);
this.SubFn3();

case 5: // if.then
this.setLatest(5376,5);
this.setPH(5381);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:137:3

case 6: // if.done
this.setLatest(5381,6);
this.SubFn4();

case 7: // if.then
this.setLatest(5381,7);
this.setPH(5386);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:142:3

case 8: // if.done
this.setLatest(5386,8);
this.SubFn5();

case 9: // if.then
this.setLatest(5386,9);
this.setPH(5390);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:146:3

case 10: // if.done
this.setLatest(5390,10);
this.SubFn6();

case 11: // cond.false
this.setLatest(5390,11);
this.SubFn7();

case 12: // if.then
this.setLatest(5390,12);
this.SubFn8();

case 13: // if.done
this.setLatest(5390,13);
this.SubFn9();

case 14: // if.then
this.setLatest(5390,14);
this.setPH(5397);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:153:4

case 15: // if.done
this.setLatest(5397,15);
this.setPH(5399);
_res= {r0:_t16,r1:2,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t16, 2:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:155:3

case 16: // if.then
this.setLatest(5399,16);
this.setPH(5404);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:160:3

case 17: // if.done
this.setLatest(5404,17);
this.SubFn10();

case 18: // if.then
this.setLatest(5404,18);
this.setPH(5408);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:164:3

case 19: // if.done
this.setLatest(5408,19);
this.SubFn11();

case 20: // cond.false
this.setLatest(5408,20);
this.SubFn12();

case 21: // if.then
this.setLatest(5408,21);
this.SubFn13();

case 22: // if.done
this.setLatest(5408,22);
this.SubFn14();

case 23: // if.then
this.setLatest(5408,23);
this.setPH(5415);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:171:4

case 24: // if.done
this.setLatest(5415,24);
this.SubFn15();

case 25: // if.then
this.setLatest(5415,25);
this.setPH(5418);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:174:4

case 26: // if.done
this.setLatest(5418,26);
this.setPH(5420);
_res= {r0:_t32,r1:3,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t32, 3:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:176:3

case 27: // cond.true
this.setLatest(5420,27);
this.SubFn16();

case 28: // if.then
this.setLatest(5420,28);
this.setPH(5425);
_res= {r0:65533,r1:1,r2:true};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:181:3

case 29: // if.done
this.setLatest(5425,29);
this.SubFn17();

case 30: // if.then
this.setLatest(5425,30);
this.setPH(5429);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:185:3

case 31: // if.done
this.setLatest(5429,31);
this.SubFn18();

case 32: // cond.false
this.setLatest(5429,32);
this.SubFn19();

case 33: // if.then
this.setLatest(5429,33);
this.SubFn20();

case 34: // if.done
this.setLatest(5429,34);
this.setPH(5442);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:198:2

case 35: // if.then
this.setLatest(5442,35);
this.setPH(5436);
_res= {r0:65533,r1:1,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:192:4

case 36: // if.done
this.setLatest(5436,36);
this.setPH(5438);
_res= {r0:_t54,r1:4,r2:false};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t54, 4:int, false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:194:3

case 37: // cond.false
this.setLatest(5438,37);
this.SubFn21();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(5368);
_t0=Force.toUTF8length(this._goroutine,p_s); // _t0 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:124:10
this.setPH(5369);
_t1=(_t0<1); // _t1 = t0 < 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:125:7
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:125:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Bool;
this.setPH(5372);
_t2=Force.toUTF8slice(this._goroutine,p_s).getAt(0); // _t2 = s[0:int] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:128:9
this.setPH(5375);
_t3=(Force.uintCompare(_t2,128)<0); // _t3 = t2 < 128:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:131:8
_Next=_t3 ? 3 : 4; // if t3 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:131:8
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(5376);
_t4=_t2; // _t4 = convert rune <- uint8 (t2) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:132:14
}// end SubFn2
private inline  function SubFn3():Void {
var _t5:Bool;
this.setPH(5380);
_t5=(Force.uintCompare(_t2,192)<0); // _t5 = t2 < 192:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:136:8
_Next=_t5 ? 5 : 6; // if t5 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:136:8
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(5385);
_t6=(_t0<2); // _t6 = t0 < 2:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:141:7
_Next=_t6 ? 7 : 8; // if t6 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:141:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(5388);
_t7=Force.toUTF8slice(this._goroutine,p_s).getAt(1); // _t7 = s[1:int] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:144:9
this.setPH(5389);
_t8=(Force.uintCompare(_t7,128)<0); // _t8 = t7 < 128:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:145:8
_Next=_t8 ? 9 : 11; // if t8 goto 9.if.then else 11.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:145:8
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Bool;
this.setPH(5394);
_t9=(Force.uintCompare(_t2,224)<0); // _t9 = t2 < 224:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:150:8
_Next=_t9 ? 12 : 13; // if t9 goto 12.if.then else 13.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:150:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t10:Bool;
this.setPH(5389);
_t10=(Force.uintCompare(192,_t7)<=0); // _t10 = 192:uint8 <= t7 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:145:19
_Next=_t10 ? 9 : 10; // if t10 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:145:19
}// end SubFn7
private inline  function SubFn8():Void {
var _t11:Int;
var _t12:Int;
var _t13:Int;
var _t14:Int;
var _t15:Int;
var _t17:Bool;
this.setPH(5395);
_t11=Force.toUint8((_t2&31)); // _t11 = t2 & 31:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:14
_t12=_t11; // _t12 = convert rune <- uint8 (t11) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:11
_t13=(_t12<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t13 = t12 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:21
_t14=Force.toUint8((_t7&63)); // _t14 = t7 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:34
_t15=_t14; // _t15 = convert rune <- uint8 (t14) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:31
_t16=Force.toInt32((_t13|_t15)); // _t16 = t13 | t15 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:151:25
this.setPH(5396);
_t17=(_t16<=127); // _t17 = t16 <= 127:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:152:8
_Next=_t17 ? 14 : 15; // if t17 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:152:8
}// end SubFn8
private inline  function SubFn9():Void {
var _t18:Bool;
this.setPH(5403);
_t18=(_t0<3); // _t18 = t0 < 3:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:159:7
_Next=_t18 ? 16 : 17; // if t18 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:159:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t20:Bool;
this.setPH(5406);
_t19=Force.toUTF8slice(this._goroutine,p_s).getAt(2); // _t19 = s[2:int] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:162:9
this.setPH(5407);
_t20=(Force.uintCompare(_t19,128)<0); // _t20 = t19 < 128:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:163:8
_Next=_t20 ? 18 : 20; // if t20 goto 18.if.then else 20.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:163:8
}// end SubFn10
private inline  function SubFn11():Void {
var _t21:Bool;
this.setPH(5412);
_t21=(Force.uintCompare(_t2,240)<0); // _t21 = t2 < 240:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:168:8
_Next=_t21 ? 21 : 22; // if t21 goto 21.if.then else 22.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:168:8
}// end SubFn11
private inline  function SubFn12():Void {
var _t22:Bool;
this.setPH(5407);
_t22=(Force.uintCompare(192,_t19)<=0); // _t22 = 192:uint8 <= t19 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:163:19
_Next=_t22 ? 18 : 19; // if t22 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:163:19
}// end SubFn12
private inline  function SubFn13():Void {
var _t23:Int;
var _t24:Int;
var _t25:Int;
var _t26:Int;
var _t27:Int;
var _t28:Int;
var _t29:Int;
var _t30:Int;
var _t31:Int;
var _t33:Bool;
this.setPH(5413);
_t23=Force.toUint8((_t2&15)); // _t23 = t2 & 15:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:14
_t24=_t23; // _t24 = convert rune <- uint8 (t23) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:11
_t25=(_t24<<GOint64.toInt(GOint64.make(0x0,0xc))); // _t25 = t24 << 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:21
_t26=Force.toUint8((_t7&63)); // _t26 = t7 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:35
_t27=_t26; // _t27 = convert rune <- uint8 (t26) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:32
_t28=(_t27<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t28 = t27 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:42
_t29=Force.toInt32((_t25|_t28)); // _t29 = t25 | t28 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:26
_t30=Force.toUint8((_t19&63)); // _t30 = t19 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:55
_t31=_t30; // _t31 = convert rune <- uint8 (t30) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:52
_t32=Force.toInt32((_t29|_t31)); // _t32 = t29 | t31 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:169:46
this.setPH(5414);
_t33=(_t32<=2047); // _t33 = t32 <= 2047:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:170:8
_Next=_t33 ? 23 : 24; // if t33 goto 23.if.then else 24.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:170:8
}// end SubFn13
private inline  function SubFn14():Void {
var _t34:Bool;
this.setPH(5424);
_t34=(_t0<4); // _t34 = t0 < 4:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:180:7
_Next=_t34 ? 28 : 29; // if t34 goto 28.if.then else 29.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:180:7
}// end SubFn14
private inline  function SubFn15():Void {
var _t35:Bool;
this.setPH(5417);
_t35=(55296<=_t32); // _t35 = 55296:rune <= t32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:173:19
_Next=_t35 ? 27 : 26; // if t35 goto 27.cond.true else 26.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:173:19
}// end SubFn15
private inline  function SubFn16():Void {
var _t36:Bool;
_t36=(_t32<=57343); // _t36 = t32 <= 57343:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:173:29
_Next=_t36 ? 25 : 26; // if t36 goto 25.if.then else 26.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:173:29
}// end SubFn16
private inline  function SubFn17():Void {
var _t38:Bool;
this.setPH(5427);
_t37=Force.toUTF8slice(this._goroutine,p_s).getAt(3); // _t37 = s[3:int] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:183:9
this.setPH(5428);
_t38=(Force.uintCompare(_t37,128)<0); // _t38 = t37 < 128:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:184:8
_Next=_t38 ? 30 : 32; // if t38 goto 30.if.then else 32.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:184:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t39:Bool;
this.setPH(5433);
_t39=(Force.uintCompare(_t2,248)<0); // _t39 = t2 < 248:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:189:8
_Next=_t39 ? 33 : 34; // if t39 goto 33.if.then else 34.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:189:8
}// end SubFn18
private inline  function SubFn19():Void {
var _t40:Bool;
this.setPH(5428);
_t40=(Force.uintCompare(192,_t37)<=0); // _t40 = 192:uint8 <= t37 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:184:19
_Next=_t40 ? 30 : 31; // if t40 goto 30.if.then else 31.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:184:19
}// end SubFn19
private inline  function SubFn20():Void {
var _t41:Int;
var _t42:Int;
var _t43:Int;
var _t44:Int;
var _t45:Int;
var _t46:Int;
var _t47:Int;
var _t48:Int;
var _t49:Int;
var _t50:Int;
var _t51:Int;
var _t52:Int;
var _t53:Int;
var _t55:Bool;
this.setPH(5434);
_t41=Force.toUint8((_t2&7)); // _t41 = t2 & 7:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:14
_t42=_t41; // _t42 = convert rune <- uint8 (t41) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:11
_t43=(_t42<<GOint64.toInt(GOint64.make(0x0,0x12))); // _t43 = t42 << 18:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:21
_t44=Force.toUint8((_t7&63)); // _t44 = t7 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:35
_t45=_t44; // _t45 = convert rune <- uint8 (t44) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:32
_t46=(_t45<<GOint64.toInt(GOint64.make(0x0,0xc))); // _t46 = t45 << 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:42
_t47=Force.toInt32((_t43|_t46)); // _t47 = t43 | t46 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:26
_t48=Force.toUint8((_t19&63)); // _t48 = t19 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:56
_t49=_t48; // _t49 = convert rune <- uint8 (t48) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:53
_t50=(_t49<<GOint64.toInt(GOint64.make(0x0,0x6))); // _t50 = t49 << 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:63
_t51=Force.toInt32((_t47|_t50)); // _t51 = t47 | t50 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:47
_t52=Force.toUint8((_t37&63)); // _t52 = t37 & 63:uint8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:76
_t53=_t52; // _t53 = convert rune <- uint8 (t52) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:73
_t54=Force.toInt32((_t51|_t53)); // _t54 = t51 | t53 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:190:67
this.setPH(5435);
_t55=(_t54<=65535); // _t55 = t54 <= 65535:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:191:8
_Next=_t55 ? 35 : 37; // if t55 goto 35.if.then else 37.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:191:8
}// end SubFn20
private inline  function SubFn21():Void {
var _t56:Bool;
_t56=(1114111<_t54); // _t56 = 1114111:rune < t54 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:191:31
_Next=_t56 ? 35 : 36; // if t56 goto 35.if.then else 36.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:191:31
}// end SubFn21
}
#if (!php) private #end class Go_math_sqrtC extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/sqrt.go:141:6
var p_f:Float;
var p_r:Pointer;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float, p_r : Pointer) {
super(gr,3568,"Go_math_sqrtC");
this._bds=_bds;
this.p_f=p_f;
this.p_r=p_r;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float, p_r : Pointer) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_sqrtC(0,[], p_f, p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr, p_f : Float, p_r : Pointer) : Void {
var _sf=new Go_math_sqrtC(_gr,[], p_f, p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float, p_r : Pointer) : Go_math_sqrtC
{return new Go_math_sqrtC(gr,_bds, p_f, p_r);
}
public function run():Go_math_sqrtC {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3568,0);
this.setPH(3569);
_SF1=Go_math_sqrt.call(this._goroutine,[],p_f);
_Next = -1;
return this;
case -1:
this.setLatest(3569,-1);
_t0=_SF1.res();
 // _t0 = sqrt(f) *ssa.Call @ /usr/local/go/src/pkg/math/sqrt.go:142:11
this.SubFn0();
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/sqrt.go:142:11

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
p_r.store(_t0); // *r = t0 *ssa.Store @ /usr/local/go/src/pkg/math/sqrt.go:142:2
}// end SubFn0
}
#if (!php) private #end class Go_math_trunc extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/floor.go:50:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2135,"Go_math_trunc");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:{r0:Float,r1:Float}=null;
var _t2:Float=0.0;
var _SF2:StackFrame;
var _t4:Bool=false;
var _SF3:StackFrame;
var _t5:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_trunc(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_trunc(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_trunc
{return new Go_math_trunc(gr,_bds, p_x);
}
public function run():Go_math_trunc {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2135,0);
this.SubFn0();

case 1: // if.then
this.setLatest(2135,1);
this.setPH(2137);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:52:3

case 2: // if.done
this.setLatest(2137,2);
this.setPH(2139);
_SF1=Go_math_modf.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2139,-1);
_t1=_SF1.res();
 // _t1 = Modf(x) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:54:14
this.SubFn1();
this.setPH(2140);
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/floor.go:55:2

case 3: // cond.false
this.setLatest(2140,3);
this.setPH(2136);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(2136,-2);
_t4=_SF2.res();
 // _t4 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:51:32
this.SubFn2();

case 4: // cond.false
this.setLatest(2136,4);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(2136,-3);
_t5=_SF3.res();
 // _t5 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/floor.go:51:20
this.SubFn3();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/floor.go:51:7
_Next=_t0 ? 1 : 4; // if t0 goto 1.if.then else 4.cond.false *ssa.If near /usr/local/go/src/pkg/math/floor.go:51:7
}// end SubFn0
private inline  function SubFn1():Void {
_t2=_t1.r0; // _t2 = extract t1 #0 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:51:7
 // _t3 = extract t1 #1 *ssa.Extract near /usr/local/go/src/pkg/math/floor.go:51:7 [REGISTER VALUE UN-USED]
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t4 ? 1 : 2; // if t4 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/floor.go:51:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.if.then else 3.cond.false *ssa.If near /usr/local/go/src/pkg/math/floor.go:51:7
}// end SubFn3
}
#if js @:expose("Go_utf8_FullRune") #end class Go_utf8_FullRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:203:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5447,"Go_utf8_FullRune");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Int,r1:Int,r2:Bool}=null;
var _t3:Bool=false;
var _t4:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_FullRune(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : Bool {
var _sf=new Go_utf8_FullRune(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_FullRune
{return new Go_utf8_FullRune(gr,_bds, p_p);
}
public function run():Go_utf8_FullRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5447,0);
this.setPH(5448);
_SF1=Go_utf8_decodeRuneInternal.call(this._goroutine,[],p_p);
_Next = -1;
return this;
case -1:
this.setLatest(5448,-1);
_t0=_SF1.res();
 // _t0 = decodeRuneInternal(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:204:35
this.SubFn0();
this.setPH(5449);
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:205:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
 // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:205:2 [REGISTER VALUE UN-USED]
 // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:205:2 [REGISTER VALUE UN-USED]
_t3=_t0.r2; // _t3 = extract t0 #2 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:205:2
_t4=(!_t3); // _t4 = !t3 *ssa.UnOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:205:9
}// end SubFn0
}
#if js @:expose("Go_utf16_EncodeRune") #end class Go_utf16_EncodeRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf16/utf16.go:47:6
var p_r:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Int) {
super(gr,5183,"Go_utf16_EncodeRune");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int};
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Int=0;
var _t2:Int=0;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Int=0;
var _SF1:StackFrame;
var _t7:Bool=false;
var _t8:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Int) : {r0:Int, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf16_EncodeRune(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Int) : {r0:Int, r1:Int} {
var _sf=new Go_utf16_EncodeRune(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Int) : Go_utf16_EncodeRune
{return new Go_utf16_EncodeRune(gr,_bds, p_r);
}
public function run():Go_utf16_EncodeRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5183,0);
this.SubFn0();

case 1: // if.then
this.setLatest(5183,1);
this.setPH(5185);
_res= {r0:65533,r1:65533};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 65533:rune *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:49:3

case 2: // if.done
this.setLatest(5185,2);
this.SubFn1();
this.setPH(5188);
_res= {r0:_t4,r1:_t6};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4, t6 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:2

case 3: // cond.false
this.setLatest(5188,3);
this.setPH(5184);
_SF1=Go_utf16_IsSurrogate.call(this._goroutine,[],p_r);
_Next = -1;
return this;
case -1:
this.setLatest(5184,-1);
_t7=_SF1.res();
 // _t7 = IsSurrogate(r) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:47
this.SubFn2();

case 4: // cond.false
this.setLatest(5184,4);
this.SubFn3();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=(p_r<65536); // _t0 = r < 65536:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:7
_Next=_t0 ? 1 : 4; // if t0 goto 1.if.then else 4.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Int;
var _t3:Int;
var _t5:Int;
_t1=Force.toInt32((p_r-65536)); // _t1 = r - 65536:rune *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:7
this.setPH(5188);
_t2=(_t1>>GOint64.toInt(GOint64.make(0x0,0xa))); // _t2 = t1 >> 10:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:19
_t3=Force.toInt32((_t2&1023)); // _t3 = t2 & 1023:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:24
_t4=Force.toInt32((55296+_t3)); // _t4 = 55296:rune + t3 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:15
_t5=Force.toInt32((_t1&1023)); // _t5 = t1 & 1023:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:41
_t6=Force.toInt32((56320+_t5)); // _t6 = 56320:rune + t5 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:38
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t7 ? 1 : 2; // if t7 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:52:38
}// end SubFn2
private inline  function SubFn3():Void {
var _t8:Bool;
this.setPH(5184);
_t8=(p_r>1114111); // _t8 = r > 1114111:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:23
_Next=_t8 ? 1 : 3; // if t8 goto 1.if.then else 3.cond.false *ssa.If near /usr/local/go/src/pkg/unicode/utf16/utf16.go:48:23
}// end SubFn3
}
#if js @:expose("Go_math_Acosh") #end class Go_math_Acosh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/acosh.go:42:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,127,"Go_math_Acosh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _SF2:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF3:StackFrame;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _SF4:StackFrame;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _SF5:StackFrame;
var _t15:Float=0.0;
var _t16:Bool=false;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _SF6:StackFrame;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _SF7:StackFrame;
var _t23:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Acosh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Acosh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Acosh
{return new Go_math_Acosh(gr,_bds, p_x);
}
public function run():Go_math_Acosh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(127,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(127,1);
this.setPH(135);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:50:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/acosh.go:50:3

case 2: // switch.body
this.setLatest(135,2);
this.setPH(137);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/acosh.go:52:3

case 3: // switch.next
this.setLatest(137,3);
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(137,4);
this.setPH(134);
_SF2=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -2;
return this;
case -2:
this.setLatest(134,-2);
_t3=_SF2.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:49:21
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(134,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/acosh.go:49:13
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(134,6);
this.setPH(139);
_t5=Math.log(p_x); // _t5 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:54:13
this.SubFn4();
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/acosh.go:54:3

case 7: // switch.next
this.setLatest(139,7);
this.SubFn5();
_Phi=7;
case 8: // switch.body
this.setLatest(139,8);
this.SubFn6();
this.setPH(141);
_t11=Math.sqrt(_t10); // _t11 = Sqrt(t10) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:56:29
this.SubFn7();
_t15=Math.log(_t14); // _t15 = Log(t14) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:56:13
_res= _t15;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t15 *ssa.Return @ /usr/local/go/src/pkg/math/acosh.go:56:3

case 9: // switch.next
this.setLatest(141,9);
this.SubFn8();
_Phi=9;
case 10: // switch.next
this.setLatest(141,10);
this.SubFn9();
this.setPH(144);
_t21=Math.sqrt(_t20); // _t21 = Sqrt(t20) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:59:23
this.SubFn10();
_SF7=Go_math_log1p.call(this._goroutine,[],_t22);
_Next = -7;
return this;
case -7:
this.setLatest(144,-7);
_t23=_SF7.res();
 // _t23 = Log1p(t22) *ssa.Call @ /usr/local/go/src/pkg/math/acosh.go:59:14
_res= _t23;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t23 *ssa.Return @ /usr/local/go/src/pkg/math/acosh.go:59:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(134);
_t0=(Force.toFloat(p_x)<Force.toFloat(1)); // _t0 = x < 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:49:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/acosh.go:49:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(136);
_t2=(Force.toFloat(p_x)==Force.toFloat(1)); // _t2 = x == 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:51:9
_Next=_t2 ? 2 : 7; // if t2 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/acosh.go:51:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/acosh.go:51:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/acosh.go:51:9
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(139);
_t6=(Force.toFloat(_t5)+Force.toFloat(0.6931471805599453)); // _t6 = t5 + 693147180559945286227/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:54:17
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(138);
_t7=(Force.toFloat(p_x)>=Force.toFloat(2.68435456e+08)); // _t7 = x >= 268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:53:9
_Next=_t7 ? 6 : 9; // if t7 goto 6.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/math/acosh.go:53:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Float;
this.setPH(141);
_t8=(Force.toFloat(2)*Force.toFloat(p_x)); // _t8 = 2:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:15
_t9=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t9 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:31
_t10=(Force.toFloat(_t9)-Force.toFloat(1)); // _t10 = t9 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:33
}// end SubFn6
private inline  function SubFn7():Void {
var _t12:Float;
var _t13:Float;
_t12=(Force.toFloat(p_x)+Force.toFloat(_t11)); // _t12 = x + t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:24
_t13=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t12)); // _t13 = 1:float64 / t12 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:21
_t14=(Force.toFloat(_t8)-Force.toFloat(_t13)); // _t14 = t8 - t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:56:18
}// end SubFn7
private inline  function SubFn8():Void {
var _t16:Bool;
this.setPH(140);
_t16=(Force.toFloat(p_x)>Force.toFloat(2)); // _t16 = x > 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:55:9
_Next=_t16 ? 8 : 10; // if t16 goto 8.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/acosh.go:55:9
}// end SubFn8
private inline  function SubFn9():Void {
var _t18:Float;
var _t19:Float;
this.setPH(143);
_t17=(Force.toFloat(p_x)-Force.toFloat(1)); // _t17 = x - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:58:9
this.setPH(144);
_t18=(Force.toFloat(2)*Force.toFloat(_t17)); // _t18 = 2:float64 * t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:59:25
_t19=(Force.toFloat(_t17)*Force.toFloat(_t17)); // _t19 = t17 * t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:59:29
_t20=(Force.toFloat(_t18)+Force.toFloat(_t19)); // _t20 = t18 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:59:27
}// end SubFn9
private inline  function SubFn10():Void {
_t22=(Force.toFloat(_t17)+Force.toFloat(_t21)); // _t22 = t17 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:59:17
}// end SubFn10
}
#if js @:expose("Go_math_Logb") #end class Go_math_Logb extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/logb.go:13:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4309,"Go_math_Logb");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Float=0.0;
var _SF3:StackFrame;
var _t3:Bool=false;
var _SF4:StackFrame;
var _t4:Bool=false;
var _SF5:StackFrame;
var _t5:Int=0;
var _t6:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Logb(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Logb(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Logb
{return new Go_math_Logb(gr,_bds, p_x);
}
public function run():Go_math_Logb {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4309,0);
this.SubFn0();

case 1: // switch.body
this.setLatest(4309,1);
this.setPH(4313);
_t1=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t1 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:17:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:17:3

case 2: // switch.body
this.setLatest(4313,2);
this.setPH(4315);
_t2=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t2 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:19:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:19:3

case 3: // switch.next
this.setLatest(4315,3);
this.setPH(4314);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -3;
return this;
case -3:
this.setLatest(4314,-3);
_t3=_SF3.res();
 // _t3 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:18:12
this.SubFn1();

case 4: // switch.body
this.setLatest(4314,4);
this.setPH(4317);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:21:3

case 5: // switch.next
this.setLatest(4317,5);
this.setPH(4316);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(4316,-4);
_t4=_SF4.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:20:12
this.SubFn2();

case 6: // switch.next
this.setLatest(4316,6);
this.setPH(4319);
_SF5=Go_math_ilogb.call(this._goroutine,[],p_x);
_Next = -5;
return this;
case -5:
this.setLatest(4319,-5);
_t5=_SF5.res();
 // _t5 = ilogb(x) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:23:22
this.SubFn3();
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:23:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4312);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:16:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:16:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t3 ? 2 : 5; // if t3 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:16:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t4 ? 4 : 6; // if t4 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:16:9
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(4319);
_t6=_t5; // _t6 = convert float64 <- int (t5) *ssa.Convert @ /usr/local/go/src/pkg/math/logb.go:23:16
}// end SubFn3
}
#if js @:expose("Go_math_J0") #end class Go_math_J0 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j0.go:76:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2997,"Go_math_J0");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _t6:Bool=false;
var _SF3:StackFrame;
var _t7:{r0:Float,r1:Float}=null;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Bool=false;
var _t14:Float=0.0;
var _SF4:StackFrame;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Bool=false;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Bool=false;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _SF5:StackFrame;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _SF6:StackFrame;
var _t28:Float=0.0;
var _SF7:StackFrame;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _SF8:StackFrame;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Bool=false;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Bool=false;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_J0(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_J0(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_J0
{return new Go_math_J0(gr,_bds, p_x);
}
public function run():Go_math_J0 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2997,0);
this.setPH(3015);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(3015,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:94:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(3015,1);
this.setPH(3016);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:95:3

case 2: // switch.body
this.setLatest(3016,2);
this.setPH(3018);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:97:3

case 3: // switch.next
this.setLatest(3018,3);
this.setPH(3017);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(3017,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:96:12
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(3017,4);
this.setPH(3020);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:99:3

case 5: // switch.next
this.setLatest(3020,5);
this.SubFn2();
_Phi=5;
case 6: // switch.next
this.setLatest(3020,6);
this.SubFn3();
_Phi=6;
case 7: // if.then
this.setLatest(3020,7);
this.SubFn4();
_Phi=7;
case 8: // if.done
this.setLatest(3020,8);
this.setPH(2997);
_t5=((_Phi==6)?p_x:(_Phi==7)?_t4:0.0); // _t5 = phi [6.switch.next: x, 7.if.then: t4] #x *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:76:9
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(2997,9);
this.setPH(3027);
_SF3=Go_math_sincos.call(this._goroutine,[],_t5);
_Next = -3;
return this;
case -3:
this.setLatest(3027,-3);
_t7=_SF3.res();
 // _t7 = Sincos(t5) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:106:17
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(3027,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(3027,11);
this.SubFn8();
this.setPH(3033);
_t15=Math.cos(_t14); // _t15 = Cos(t14) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:112:13
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(3033,12);
this.setPH(3028);
_t19=((_Phi==9)?_t10:(_Phi==13)?_t10:(_Phi==14)?_t23:0.0); // _t19 = phi [9.if.then: t10, 13.if.then: t10, 14.if.else: t23] #ss *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:107:3
this.setPH(3029);
_t20=((_Phi==9)?_t11:(_Phi==13)?_t22:(_Phi==14)?_t11:0.0); // _t20 = phi [9.if.then: t11, 13.if.then: t22, 14.if.else: t11] #cc *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:108:3
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(3029,13);
this.SubFn11();
_Phi=13;
case 14: // if.else
this.setLatest(3029,14);
this.SubFn12();
_Phi=14;
case 15: // if.then
this.setLatest(3029,15);
this.SubFn13();
this.setPH(3046);
_t25=Math.sqrt(_t5); // _t25 = Sqrt(t5) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:125:32
this.SubFn14();
_Phi=15;
case 16: // if.done
this.setLatest(3046,16);
this.setPH(3044);
_t27=((_Phi==15)?_t26:(_Phi==17)?_t35:0.0); // _t27 = phi [15.if.then: t26, 17.if.else: t35] #z *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:123:7
this.setPH(3052);
_res= _t27;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t27 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:131:3

case 17: // if.else
this.setLatest(3052,17);
this.setPH(3048);
_SF6=Go_math_pzero.call(this._goroutine,[],_t5);
_Next = -6;
return this;
case -6:
this.setLatest(3048,-6);
_t28=_SF6.res();
 // _t28 = pzero(t5) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:127:14
this.setPH(3049);
_SF7=Go_math_qzero.call(this._goroutine,[],_t5);
_Next = -7;
return this;
case -7:
this.setLatest(3049,-7);
_t29=_SF7.res();
 // _t29 = qzero(t5) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:128:14
this.SubFn15();
this.setPH(3050);
_t34=Math.sqrt(_t5); // _t34 = Sqrt(t5) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:129:43
this.SubFn16();
_Phi=17;
case 18: // if.then
this.setLatest(3050,18);
this.SubFn17();
_Phi=18;
case 19: // if.done
this.setLatest(3050,19);
this.SubFn18();
_Phi=19;
case 20: // if.then
this.setLatest(3050,20);
this.setPH(3056);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:135:4

case 21: // if.done
this.setLatest(3056,21);
this.SubFn19();
this.setPH(3058);
_res= _t56;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t56 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:137:3

case 22: // if.then
this.setLatest(3058,22);
this.SubFn20();
this.setPH(3064);
_res= _t60;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t60 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:143:3

case 23: // if.done
this.setLatest(3064,23);
this.SubFn21();
this.setPH(3067);
_res= _t67;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t67 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:146:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:146:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 5; // if t1 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:146:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(3019);
_t2=(Force.toFloat(p_x)==Force.toFloat(0)); // _t2 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:98:9
_Next=_t2 ? 4 : 6; // if t2 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:98:9
}// end SubFn2
private inline  function SubFn3():Void {
var _t3:Bool;
this.setPH(3023);
_t3=(Force.toFloat(p_x)<Force.toFloat(0)); // _t3 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:102:7
_Next=_t3 ? 7 : 8; // if t3 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:102:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(3024);
_t4=(-Force.toFloat(p_x)); // _t4 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/j0.go:103:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:103:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t6:Bool;
this.setPH(3026);
_t6=(Force.toFloat(_t5)>=Force.toFloat(2)); // _t6 = t5 >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:105:7
_Next=_t6 ? 9 : 10; // if t6 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:105:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t12:Bool;
_t8=_t7.r0; // _t8 = extract t7 #0 *ssa.Extract near /usr/local/go/src/pkg/math/j0.go:105:7
_t9=_t7.r1; // _t9 = extract t7 #1 *ssa.Extract near /usr/local/go/src/pkg/math/j0.go:105:7
this.setPH(3028);
_t10=(Force.toFloat(_t8)-Force.toFloat(_t9)); // _t10 = t8 - t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:107:11
this.setPH(3029);
_t11=(Force.toFloat(_t8)+Force.toFloat(_t9)); // _t11 = t8 + t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:108:11
this.setPH(3032);
_t12=(Force.toFloat(_t5)<Force.toFloat(8.988465674311579e+307)); // _t12 = t5 < 89884656743115785407263711865852178399050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:111:8
_Next=_t12 ? 11 : 12; // if t12 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:111:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t13:Bool;
this.setPH(3054);
_t13=(Force.toFloat(_t5)<Force.toFloat(0.0001220703125)); // _t13 = t5 < 1/8192:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:133:7
_Next=_t13 ? 18 : 19; // if t13 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:133:7
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(3033);
_t14=(Force.toFloat(_t5)+Force.toFloat(_t5)); // _t14 = t5 + t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:112:16
}// end SubFn8
private inline  function SubFn9():Void {
var _t17:Float;
var _t18:Bool;
_t16=(-Force.toFloat(_t15)); // _t16 = -t15 *ssa.UnOp @ /usr/local/go/src/pkg/math/j0.go:112:9
this.setPH(3034);
_t17=(Force.toFloat(_t8)*Force.toFloat(_t9)); // _t17 = t8 * t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:113:8
_t18=(Force.toFloat(_t17)<Force.toFloat(0)); // _t18 = t17 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:113:11
_Next=_t18 ? 13 : 14; // if t18 goto 13.if.then else 14.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:113:11
}// end SubFn9
private inline  function SubFn10():Void {
var _t21:Bool;
this.setPH(3045);
_t21=(Force.toFloat(_t5)>Force.toFloat(6.80564733841877e+38)); // _t21 = t5 > 680564733841876926926749214863536422912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:124:8
_Next=_t21 ? 15 : 17; // if t21 goto 15.if.then else 17.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:124:8
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(3035);
_t22=Force.floatDiv(Force.toFloat(_t16),Force.toFloat(_t10)); // _t22 = t16 / t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:114:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:114:12
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(3037);
_t23=Force.floatDiv(Force.toFloat(_t16),Force.toFloat(_t11)); // _t23 = t16 / t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:116:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:116:12
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(3046);
_t24=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t20)); // _t24 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:125:21
}// end SubFn13
private inline  function SubFn14():Void {
_t26=Force.floatDiv(Force.toFloat(_t24),Force.toFloat(_t25)); // _t26 = t24 / t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:125:26
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:125:26
}// end SubFn14
private inline  function SubFn15():Void {
var _t30:Float;
var _t31:Float;
var _t32:Float;
this.setPH(3050);
_t30=(Force.toFloat(_t28)*Force.toFloat(_t20)); // _t30 = t28 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:25
_t31=(Force.toFloat(_t29)*Force.toFloat(_t19)); // _t31 = t29 * t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:32
_t32=(Force.toFloat(_t30)-Force.toFloat(_t31)); // _t32 = t30 - t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:29
_t33=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t32)); // _t33 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:21
}// end SubFn15
private inline  function SubFn16():Void {
_t35=Force.floatDiv(Force.toFloat(_t33),Force.toFloat(_t34)); // _t35 = t33 / t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:37
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:129:37
}// end SubFn16
private inline  function SubFn17():Void {
var _t36:Bool;
this.setPH(3055);
_t36=(Force.toFloat(_t5)<Force.toFloat(7.450580596923828e-09)); // _t36 = t5 < 1/134217728:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:134:8
_Next=_t36 ? 20 : 21; // if t36 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:134:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t53:Bool;
this.setPH(3060);
_t37=(Force.toFloat(_t5)*Force.toFloat(_t5)); // _t37 = t5 * t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:139:9
this.setPH(3061);
_t38=(Force.toFloat(_t37)*Force.toFloat((-4.618326885321032e-09))); // _t38 = t37 * -461832688532103189199/100000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:33
_t39=(Force.toFloat(1.8295404953270067e-06)+Force.toFloat(_t38)); // _t39 = 18295404953270066567/10000000000000000000000000:float64 + t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:31
_t40=(Force.toFloat(_t37)*Force.toFloat(_t39)); // _t40 = t37 * t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:26
_t41=(Force.toFloat((-0.00018997929423885472))+Force.toFloat(_t40)); // _t41 = -189979294238854721751/1000000000000000000000000:float64 + t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:24
_t42=(Force.toFloat(_t37)*Force.toFloat(_t41)); // _t42 = t37 * t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:19
_t43=(Force.toFloat(0.015624999999999995)+Force.toFloat(_t42)); // _t43 = 78124999999999973979/5000000000000000000000:float64 + t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:16
_t44=(Force.toFloat(_t37)*Force.toFloat(_t43)); // _t44 = t37 * t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:9
this.setPH(3062);
_t45=(Force.toFloat(_t37)*Force.toFloat(1.1661400333379e-09)); // _t45 = t37 * 23322800666758000041/20000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:33
_t46=(Force.toFloat(5.135465502073181e-07)+Force.toFloat(_t45)); // _t46 = 256773275103659055723/500000000000000000000000000:float64 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:31
_t47=(Force.toFloat(_t37)*Force.toFloat(_t46)); // _t47 = t37 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:26
_t48=(Force.toFloat(0.00011692678466333745)+Force.toFloat(_t47)); // _t48 = 5846339233166872513/50000000000000000000000:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:24
_t49=(Force.toFloat(_t37)*Force.toFloat(_t48)); // _t49 = t37 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:19
_t50=(Force.toFloat(0.015619102946489001)+Force.toFloat(_t49)); // _t50 = 39047757366222502623/2500000000000000000000:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:17
_t51=(Force.toFloat(_t37)*Force.toFloat(_t50)); // _t51 = t37 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:12
_t52=(Force.toFloat(1)+Force.toFloat(_t51)); // _t52 = 1:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:9
this.setPH(3063);
_t53=(Force.toFloat(_t5)<Force.toFloat(1)); // _t53 = t5 < 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:142:7
_Next=_t53 ? 22 : 23; // if t53 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:142:7
}// end SubFn18
private inline  function SubFn19():Void {
var _t54:Float;
var _t55:Float;
this.setPH(3058);
_t54=(Force.toFloat(0.25)*Force.toFloat(_t5)); // _t54 = 1/4:float64 * t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:137:18
_t55=(Force.toFloat(_t54)*Force.toFloat(_t5)); // _t55 = t54 * t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:137:20
_t56=(Force.toFloat(1)-Force.toFloat(_t55)); // _t56 = 1:float64 - t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:137:12
}// end SubFn19
private inline  function SubFn20():Void {
var _t57:Float;
var _t58:Float;
var _t59:Float;
this.setPH(3064);
_t57=Force.floatDiv(Force.toFloat(_t44),Force.toFloat(_t52)); // _t57 = t44 / t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:143:25
_t58=(Force.toFloat((-0.25))+Force.toFloat(_t57)); // _t58 = -1/4:float64 + t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:143:22
_t59=(Force.toFloat(_t37)*Force.toFloat(_t58)); // _t59 = t37 * t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:143:15
_t60=(Force.toFloat(1)+Force.toFloat(_t59)); // _t60 = 1:float64 + t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:143:12
}// end SubFn20
private inline  function SubFn21():Void {
var _t62:Float;
var _t63:Float;
var _t64:Float;
var _t65:Float;
var _t66:Float;
this.setPH(3066);
_t61=(Force.toFloat(0.5)*Force.toFloat(_t5)); // _t61 = 1/2:float64 * t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:145:11
this.setPH(3067);
_t62=(Force.toFloat(1)+Force.toFloat(_t61)); // _t62 = 1:float64 + t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:11
_t63=(Force.toFloat(1)-Force.toFloat(_t61)); // _t63 = 1:float64 - t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:17
_t64=(Force.toFloat(_t62)*Force.toFloat(_t63)); // _t64 = t62 * t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:14
_t65=Force.floatDiv(Force.toFloat(_t44),Force.toFloat(_t52)); // _t65 = t44 / t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:27
_t66=(Force.toFloat(_t37)*Force.toFloat(_t65)); // _t66 = t37 * t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:24
_t67=(Force.toFloat(_t64)+Force.toFloat(_t66)); // _t67 = t64 + t66 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:146:21
}// end SubFn21
}
#if (!php) private #end class Go_math_ilogb extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/logb.go:47:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4343,"Go_math_ilogb");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Float,r1:Int}=null;
var _t1:Float=0.0;
var _t2:Int=0;
var _SF2:StackFrame;
var _t3:GOint64=null;
var _t4:GOint64=null;
var _t5:GOint64=null;
var _t6:Int=0;
var _t7:Int=0;
var _t8:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_ilogb(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Int {
var _sf=new Go_math_ilogb(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_ilogb
{return new Go_math_ilogb(gr,_bds, p_x);
}
public function run():Go_math_ilogb {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4343,0);
this.setPH(4344);
_SF1=Go_math_normalize.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(4344,-1);
_t0=_SF1.res();
 // _t0 = normalize(x) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:48:21
this.SubFn0();
this.setPH(4345);
_SF2=Go_math_Float64bits.call(this._goroutine,[],_t1);
_Next = -2;
return this;
case -2:
this.setLatest(4345,-2);
_t3=_SF2.res();
 // _t3 = Float64bits(t1) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:49:25
this.SubFn1();
_res= _t8;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t8 *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:49:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=_t0.r0; // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/math/logb.go:49:2
_t2=_t0.r1; // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/math/logb.go:49:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t4:GOint64;
var _t5:GOint64;
var _t6:Int;
var _t7:Int;
_t4=Force.toUint64(GOint64.ushr(_t3,GOint64.toInt(GOint64.make(0x0,0x34)))); // _t4 = t3 >> 52:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:49:28
_t5=Force.toUint64(GOint64.and(_t4,GOint64.make(0x0,0x7ff))); // _t5 = t4 & 2047:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:49:36
_t6=GOint64.toInt(_t5); // _t6 = convert int <- uint64 (t5) *ssa.Convert @ /usr/local/go/src/pkg/math/logb.go:49:12
_t7=(_t6-1023); // _t7 = t6 - 1023:int *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:49:43
_t8=(_t7+_t2); // _t8 = t7 + t2 *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:49:50
}// end SubFn1
}
#if js @:expose("Go_utf8_DecodeRune") #end class Go_utf8_DecodeRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:219:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5463,"Go_utf8_DecodeRune");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int};
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Int,r1:Int,r2:Bool}=null;
var _t1:Int=0;
var _t2:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : {r0:Int, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_DecodeRune(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : {r0:Int, r1:Int} {
var _sf=new Go_utf8_DecodeRune(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_DecodeRune
{return new Go_utf8_DecodeRune(gr,_bds, p_p);
}
public function run():Go_utf8_DecodeRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5463,0);
this.setPH(5464);
_SF1=Go_utf8_decodeRuneInternal.call(this._goroutine,[],p_p);
_Next = -1;
return this;
case -1:
this.setLatest(5464,-1);
_t0=_SF1.res();
 // _t0 = decodeRuneInternal(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:220:33
this.SubFn0();
this.setPH(5465);
_res= {r0:_t1,r1:_t2};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1, t2 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:221:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=_t0.r0; // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:221:2
_t2=_t0.r1; // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:221:2
 // _t3 = extract t0 #2 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:221:2 [REGISTER VALUE UN-USED]
}// end SubFn0
}
#if js @:expose("Go_haxegoruntime_RunesToUTF16") #end class Go_haxegoruntime_RunesToUTF16 extends StackFrameBasis implements StackFrame {  // langgoruntime.go:75:6
var p_r:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Slice) {
super(gr,5070,"Go_haxegoruntime_RunesToUTF16");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Slice=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_RunesToUTF16(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Slice) : Slice {
var _sf=new Go_haxegoruntime_RunesToUTF16(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Slice) : Go_haxegoruntime_RunesToUTF16
{return new Go_haxegoruntime_RunesToUTF16(gr,_bds, p_r);
}
public function run():Go_haxegoruntime_RunesToUTF16 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5070,0);
this.setPH(5071);
_SF1=Go_utf16_Encode.call(this._goroutine,[],p_r);
_Next = -1;
return this;
case -1:
this.setLatest(5071,-1);
_t0=_SF1.res();
 // _t0 = unicode/utf16.Encode(r) *ssa.Call @ langgoruntime.go:76:21
_res= _t0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t0 *ssa.Return @ langgoruntime.go:76:2

default: Scheduler.bbi();}}}
}
#if (!php) private #end class Go_math_tan extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/tan.go:84:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4928,"Go_math_tan");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Bool=false;
var _t9:Float=0.0;
var _t10:GOint64=null;
var _t11:Float=0.0;
var _t12:GOint64=null;
var _t13:Bool=false;
var _t14:GOint64=null;
var _t15:Float=0.0;
var _t16:GOint64=null;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Bool=false;
var _t26:Array<Float>=null;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Array<Float>=null;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Array<Float>=null;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Array<Float>=null;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Array<Float>=null;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:GOint64=null;
var _t57:Bool=false;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_tan(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_tan(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_tan
{return new Go_math_tan(gr,_bds, p_x);
}
public function run():Go_math_tan {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4928,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(4928,1);
this.setPH(4938);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/tan.go:94:3

case 2: // switch.body
this.setLatest(4938,2);
this.setPH(4940);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/tan.go:96:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/tan.go:96:3

case 3: // switch.next
this.setLatest(4940,3);
this.setPH(4939);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(4939,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/tan.go:95:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(4939,4);
this.setPH(4937);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(4937,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/tan.go:93:22
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(4937,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:93:14
this.SubFn3();
_Phi=5;
case 6: // switch.next
this.setLatest(4937,6);
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(4937,7);
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(4937,8);
this.setPH(4928);
_t7=((_Phi==6)?p_x:(_Phi==7)?_t6:0.0); // _t7 = phi [6.switch.next: x, 7.if.then: t6] #x *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:84:10
this.setPH(4944);
_t8=((_Phi==6)?false:(_Phi==7)?true:false); // _t8 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:100:2
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(4944,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(4944,10);
this.setPH(4950);
_t16=((_Phi==8)?_t10:(_Phi==9)?_t14:GOint64.make(0,0)); // _t16 = phi [8.if.done: t10, 9.if.then: t14] #j *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:106:2
this.setPH(4951);
_t17=((_Phi==8)?_t11:(_Phi==9)?_t15:0.0); // _t17 = phi [8.if.done: t11, 9.if.then: t15] #y *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:107:2
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(4951,11);
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(4951,12);
_t55=((_Phi==11)?_t54:(_Phi==13)?_t23:0.0); // _t55 = phi [11.if.then: t54, 13.if.else: t23] #y *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:107:2
this.SubFn10();
_Phi=12;
case 13: // if.else
this.setLatest(4951,13);
this.SubFn11();
_Phi=13;
case 14: // if.then
this.setLatest(4951,14);
this.SubFn12();
_Phi=14;
case 15: // if.done
this.setLatest(4951,15);
_t59=((_Phi==12)?_t55:(_Phi==14)?_t58:0.0); // _t59 = phi [12.if.done: t55, 14.if.then: t58] #y *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:107:2
this.SubFn13();
_Phi=15;
case 16: // if.then
this.setLatest(4951,16);
this.SubFn14();
_Phi=16;
case 17: // if.done
this.setLatest(4951,17);
_t61=((_Phi==15)?_t59:(_Phi==16)?_t60:0.0); // _t61 = phi [15.if.done: t59, 16.if.then: t60] #y *ssa.Phi @ /usr/local/go/src/pkg/math/tan.go:107:2
this.setPH(4973);
_res= _t61;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t61 *ssa.Return @ /usr/local/go/src/pkg/math/tan.go:129:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4937);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:93:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/tan.go:93:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 6; // if t2 goto 2.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/tan.go:93:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:93:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/tan.go:93:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(4945);
_t5=(Force.toFloat(p_x)<Force.toFloat(0)); // _t5 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:101:7
_Next=_t5 ? 7 : 8; // if t5 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/tan.go:101:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(4946);
_t6=(-Force.toFloat(p_x)); // _t6 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/tan.go:102:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:102:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Float;
var _t12:GOint64;
var _t13:Bool;
this.setPH(4950);
_t9=(Force.toFloat(_t7)*Force.toFloat(1.2732395447351625)); // _t9 = t7 * 2867080569611329/2251799813685248:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:106:15
_t10=GOint64.ofFloat(_t9); // _t10 = convert int64 <- float64 (t9) *ssa.Convert @ /usr/local/go/src/pkg/math/tan.go:106:12
this.setPH(4951);
_t11=GOint64.toFloat(_t10); // _t11 = convert float64 <- int64 (t10) *ssa.Convert @ /usr/local/go/src/pkg/math/tan.go:107:14
this.setPH(4954);
_t12=Force.toInt64(GOint64.and(_t10,GOint64.make(0x0,0x1))); // _t12 = t10 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:110:6
_t13=(GOint64.compare(_t12,GOint64.make(0x0,0x1))==0); // _t13 = t12 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:110:9
_Next=_t13 ? 9 : 10; // if t13 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/tan.go:110:9
}// end SubFn6
private inline  function SubFn7():Void {
_t14=Force.toInt64(GOint64.add(_t10,GOint64.make(0x0,0x1))); // _t14 = t10 + 1:int64 *ssa.BinOp near /usr/local/go/src/pkg/math/tan.go:110:9
_t15=(Force.toFloat(_t11)+Force.toFloat(1)); // _t15 = t11 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/tan.go:110:9
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:110:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t25:Bool;
this.setPH(4959);
_t18=(Force.toFloat(_t17)*Force.toFloat(0.7853981256484985)); // _t18 = t17 * 196349531412124633789/250000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:14
_t19=(Force.toFloat(_t7)-Force.toFloat(_t18)); // _t19 = t7 - t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:11
_t20=(Force.toFloat(_t17)*Force.toFloat(3.774894707930798e-08)); // _t20 = t17 * 94372367698269954417/2500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:24
_t21=(Force.toFloat(_t19)-Force.toFloat(_t20)); // _t21 = t19 - t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:21
_t22=(Force.toFloat(_t17)*Force.toFloat(2.6951514290790595e-15)); // _t22 = t17 * 53903028581581190529/20000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:34
_t23=(Force.toFloat(_t21)-Force.toFloat(_t22)); // _t23 = t21 - t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:31
this.setPH(4960);
_t24=(Force.toFloat(_t23)*Force.toFloat(_t23)); // _t24 = t23 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:116:10
this.setPH(4962);
_t25=(Force.toFloat(_t24)>Force.toFloat(1e-14)); // _t25 = t24 > 1/100000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:118:8
_Next=_t25 ? 11 : 13; // if t25 goto 11.if.then else 13.if.else *ssa.If near /usr/local/go/src/pkg/math/tan.go:118:8
}// end SubFn8
private inline  function SubFn9():Void {
var _t26:Array<Float>;
var _t27:Float;
var _t28:Float;
var _t29:Array<Float>;
var _t30:Float;
var _t31:Float;
var _t32:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Float;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Array<Float>;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Array<Float>;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Array<Float>;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Float;
_t26=Go.math__tanP.load(); // _t26 = *_tanP *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:118:8
this.setPH(4963);
_t27=_t26[0]; // _t27 = t26[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:25
_t28=(Force.toFloat(_t27)*Force.toFloat(_t24)); // _t28 = t27 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:28
_t29=Go.math__tanP.load(); // _t29 = *_tanP *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:28
_t30=_t29[1]; // _t30 = t29[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:38
_t31=(Force.toFloat(_t28)+Force.toFloat(_t30)); // _t31 = t28 + t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:32
_t32=(Force.toFloat(_t31)*Force.toFloat(_t24)); // _t32 = t31 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:42
_t33=Go.math__tanP.load(); // _t33 = *_tanP *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:42
_t34=_t33[2]; // _t34 = t33[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:51
_t35=(Force.toFloat(_t32)+Force.toFloat(_t34)); // _t35 = t32 + t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:45
_t36=(Force.toFloat(_t24)*Force.toFloat(_t35)); // _t36 = t24 * t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:16
_t37=Go.math__tanQ.load(); // _t37 = *_tanQ *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:16
_t38=_t37[1]; // _t38 = t37[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:68
_t39=(Force.toFloat(_t24)+Force.toFloat(_t38)); // _t39 = t24 + t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:62
_t40=(Force.toFloat(_t39)*Force.toFloat(_t24)); // _t40 = t39 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:72
_t41=Go.math__tanQ.load(); // _t41 = *_tanQ *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:72
_t42=_t41[2]; // _t42 = t41[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:81
_t43=(Force.toFloat(_t40)+Force.toFloat(_t42)); // _t43 = t40 + t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:75
_t44=(Force.toFloat(_t43)*Force.toFloat(_t24)); // _t44 = t43 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:85
_t45=Go.math__tanQ.load(); // _t45 = *_tanQ *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:85
_t46=_t45[3]; // _t46 = t45[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:94
_t47=(Force.toFloat(_t44)+Force.toFloat(_t46)); // _t47 = t44 + t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:88
_t48=(Force.toFloat(_t47)*Force.toFloat(_t24)); // _t48 = t47 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:98
_t49=Go.math__tanQ.load(); // _t49 = *_tanQ *ssa.UnOp near /usr/local/go/src/pkg/math/tan.go:119:98
_t50=_t49[4]; // _t50 = t49[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/tan.go:119:107
_t51=(Force.toFloat(_t48)+Force.toFloat(_t50)); // _t51 = t48 + t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:101
_t52=Force.floatDiv(Force.toFloat(_t36),Force.toFloat(_t51)); // _t52 = t36 / t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:55
_t53=(Force.toFloat(_t23)*Force.toFloat(_t52)); // _t53 = t23 * t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:12
_t54=(Force.toFloat(_t23)+Force.toFloat(_t53)); // _t54 = t23 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:119:9
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:119:9
}// end SubFn9
private inline  function SubFn10():Void {
var _t56:GOint64;
var _t57:Bool;
this.setPH(4967);
_t56=Force.toInt64(GOint64.and(_t16,GOint64.make(0x0,0x2))); // _t56 = t16 & 2:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:123:6
_t57=(GOint64.compare(_t56,GOint64.make(0x0,0x2))==0); // _t57 = t56 == 2:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:123:9
_Next=_t57 ? 14 : 15; // if t57 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/math/tan.go:123:9
}// end SubFn10
private inline  function SubFn11():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:123:9
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(4968);
_t58=Force.floatDiv(Force.toFloat((-1)),Force.toFloat(_t55)); // _t58 = -1:float64 / t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:124:10
_Next=15; // jump 15.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:124:10
}// end SubFn12
private inline  function SubFn13():Void {
_Next=_t8 ? 16 : 17; // if t8 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/math/tan.go:124:10
}// end SubFn13
private inline  function SubFn14():Void {
this.setPH(4971);
_t60=(-Force.toFloat(_t59)); // _t60 = -t59 *ssa.UnOp @ /usr/local/go/src/pkg/math/tan.go:127:7
_Next=17; // jump 17.if.done *ssa.Jump near /usr/local/go/src/pkg/math/tan.go:127:7
}// end SubFn14
}
#if js @:expose("Go_haxegoruntime_StringCompare") #end class Go_haxegoruntime_StringCompare extends StackFrameBasis implements StackFrame {  // langgoruntime.go:120:6
var p_a:String;
var p_b:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_a : String, p_b : String) {
super(gr,5115,"Go_haxegoruntime_StringCompare");
this._bds=_bds;
this.p_a=p_a;
this.p_b=p_b;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Slice=null;
var _t1:Slice=null;
var _t2:Pointer=null;
var _t3:Int=0;
var _t4:Pointer=null;
var _t5:Int=0;
var _t6:Bool=false;
var _t7:Int=0;
var _t8:Int=0;
var _t9:Bool=false;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Bool=false;
var _t13:Int=0;
var _t14:Bool=false;
var _t15:Pointer=null;
var _t16:Int=0;
var _t17:Pointer=null;
var _t18:Int=0;
var _t19:Bool=false;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Int=0;
var _t23:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_a : String, p_b : String) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_StringCompare(0,[], p_a, p_b).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_a : String, p_b : String) : Int {
var _sf=new Go_haxegoruntime_StringCompare(_gr,[], p_a, p_b).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_a : String, p_b : String) : Go_haxegoruntime_StringCompare
{return new Go_haxegoruntime_StringCompare(gr,_bds, p_a, p_b);
}
public function run():Go_haxegoruntime_StringCompare {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5115,0);
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(5115,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(5115,2);
this.SubFn2();
_Phi=2;
case 3: // for.loop
this.setLatest(5115,3);
this.setPH(5119);
_t10=((_Phi==0)?0:(_Phi==8)?_t20:0); // _t10 = phi [0.entry: 0:int, 8.if.done: t20] #i *ssa.Phi @ langgoruntime.go:124:2
this.SubFn3();
_Phi=3;
case 4: // cond.true
this.setLatest(5119,4);
this.SubFn4();
_Phi=4;
case 5: // if.then
this.setLatest(5119,5);
this.setPH(5122);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:int *ssa.Return @ langgoruntime.go:127:4

case 6: // if.done
this.setLatest(5122,6);
this.SubFn5();
_Phi=6;
case 7: // if.then
this.setLatest(5122,7);
this.setPH(5125);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:int *ssa.Return @ langgoruntime.go:130:4

case 8: // if.done
this.setLatest(5125,8);
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(5125,9);
this.setPH(5130);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:int *ssa.Return @ langgoruntime.go:135:3

case 10: // if.done
this.setLatest(5130,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(5130,11);
this.setPH(5133);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:int *ssa.Return @ langgoruntime.go:138:3

case 12: // if.done
this.setLatest(5133,12);
this.setPH(5135);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:int *ssa.Return @ langgoruntime.go:140:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5117);
_t0=Force.toUTF8slice(this._goroutine,p_a); // _t0 = convert []byte <- string (a) *ssa.Convert @ langgoruntime.go:122:13
this.setPH(5118);
_t1=Force.toUTF8slice(this._goroutine,p_b); // _t1 = convert []byte <- string (b) *ssa.Convert @ langgoruntime.go:123:13
_Next=3; // jump 3.for.loop *ssa.Jump near langgoruntime.go:123:13
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Pointer;
var _t3:Int;
var _t4:Pointer;
var _t5:Int;
var _t6:Bool;
this.setPH(5121);
if((_t10<0)||(_t10>=_t0.len())) Scheduler.ioor(); // _t2 = &t0[t10] *ssa.IndexAddr @ langgoruntime.go:126:7 [POINTER]
_t2=_t0.addr(_t10);  // _t2 = &t0[t10] *ssa.IndexAddr @ langgoruntime.go:126:7 [POINTER]
_t3=(_t2.load()|0); // _t3 = *t2 *ssa.UnOp near langgoruntime.go:126:7
if((_t10<0)||(_t10>=_t1.len())) Scheduler.ioor(); // _t4 = &t1[t10] *ssa.IndexAddr @ langgoruntime.go:126:14 [POINTER]
_t4=_t1.addr(_t10);  // _t4 = &t1[t10] *ssa.IndexAddr @ langgoruntime.go:126:14 [POINTER]
_t5=(_t4.load()|0); // _t5 = *t4 *ssa.UnOp near langgoruntime.go:126:14
_t6=(Force.uintCompare(_t3,_t5)<0); // _t6 = t3 < t5 *ssa.BinOp @ langgoruntime.go:126:11
_Next=_t6 ? 5 : 6; // if t6 goto 5.if.then else 6.if.done *ssa.If near langgoruntime.go:126:11
}// end SubFn1
private inline  function SubFn2():Void {
var _t7:Int;
var _t8:Int;
var _t9:Bool;
this.setPH(5129);
_t7=({var _v=_t0;_v==null?0:_v.len();}); // _t7 = len(t0) *ssa.Call @ langgoruntime.go:134:8
_t8=({var _v=_t1;_v==null?0:_v.len();}); // _t8 = len(t1) *ssa.Call @ langgoruntime.go:134:18
_t9=(_t7==_t8); // _t9 = t7 == t8 *ssa.BinOp @ langgoruntime.go:134:12
_Next=_t9 ? 9 : 10; // if t9 goto 9.if.then else 10.if.done *ssa.If near langgoruntime.go:134:12
}// end SubFn2
private inline  function SubFn3():Void {
var _t11:Int;
var _t12:Bool;
this.setPH(5120);
_t11=({var _v=_t0;_v==null?0:_v.len();}); // _t11 = len(t0) *ssa.Call @ langgoruntime.go:125:14
_t12=(_t10<_t11); // _t12 = t10 < t11 *ssa.BinOp @ langgoruntime.go:125:9
_Next=_t12 ? 4 : 2; // if t12 goto 4.cond.true else 2.for.done *ssa.If near langgoruntime.go:125:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t13:Int;
var _t14:Bool;
_t13=({var _v=_t1;_v==null?0:_v.len();}); // _t13 = len(t1) *ssa.Call @ langgoruntime.go:125:30
_t14=(_t10<_t13); // _t14 = t10 < t13 *ssa.BinOp @ langgoruntime.go:125:25
_Next=_t14 ? 1 : 2; // if t14 goto 1.for.body else 2.for.done *ssa.If near langgoruntime.go:125:25
}// end SubFn4
private inline  function SubFn5():Void {
var _t15:Pointer;
var _t16:Int;
var _t17:Pointer;
var _t18:Int;
var _t19:Bool;
this.setPH(5124);
if((_t10<0)||(_t10>=_t0.len())) Scheduler.ioor(); // _t15 = &t0[t10] *ssa.IndexAddr @ langgoruntime.go:129:7 [POINTER]
_t15=_t0.addr(_t10);  // _t15 = &t0[t10] *ssa.IndexAddr @ langgoruntime.go:129:7 [POINTER]
_t16=(_t15.load()|0); // _t16 = *t15 *ssa.UnOp near langgoruntime.go:129:7
if((_t10<0)||(_t10>=_t1.len())) Scheduler.ioor(); // _t17 = &t1[t10] *ssa.IndexAddr @ langgoruntime.go:129:14 [POINTER]
_t17=_t1.addr(_t10);  // _t17 = &t1[t10] *ssa.IndexAddr @ langgoruntime.go:129:14 [POINTER]
_t18=(_t17.load()|0); // _t18 = *t17 *ssa.UnOp near langgoruntime.go:129:14
_t19=(Force.uintCompare(_t16,_t18)>0); // _t19 = t16 > t18 *ssa.BinOp @ langgoruntime.go:129:11
_Next=_t19 ? 7 : 8; // if t19 goto 7.if.then else 8.if.done *ssa.If near langgoruntime.go:129:11
}// end SubFn5
private inline  function SubFn6():Void {
_t20=(_t10+1); // _t20 = t10 + 1:int *ssa.BinOp near langgoruntime.go:129:11
_Next=3; // jump 3.for.loop *ssa.Jump near langgoruntime.go:129:11
}// end SubFn6
private inline  function SubFn7():Void {
var _t21:Int;
var _t22:Int;
var _t23:Bool;
this.setPH(5132);
_t21=({var _v=_t0;_v==null?0:_v.len();}); // _t21 = len(t0) *ssa.Call @ langgoruntime.go:137:8
_t22=({var _v=_t1;_v==null?0:_v.len();}); // _t22 = len(t1) *ssa.Call @ langgoruntime.go:137:17
_t23=(_t21<_t22); // _t23 = t21 < t22 *ssa.BinOp @ langgoruntime.go:137:12
_Next=_t23 ? 11 : 12; // if t23 goto 11.if.then else 12.if.done *ssa.If near langgoruntime.go:137:12
}// end SubFn7
}
#if js @:expose("Go_math_Tanh") #end class Go_math_Tanh extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/tanh.go:74:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,2898,"Go_math_Tanh");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _t1:Bool=false;
var _t2:Float=0.0;
var _t3:Bool=false;
var _t4:Float=0.0;
var _SF2:StackFrame;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Array<Float>=null;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Array<Float>=null;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Array<Float>=null;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Array<Float>=null;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Array<Float>=null;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Array<Float>=null;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Tanh(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Tanh(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Tanh
{return new Go_math_Tanh(gr,_bds, p_x);
}
public function run():Go_math_Tanh {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2898,0);
this.setPH(2900);
_t0=Math.abs(p_x); // _t0 = Abs(x) *ssa.Call @ /usr/local/go/src/pkg/math/tanh.go:76:10
this.SubFn0();
_Phi=0;
case 1: // switch.done
this.setLatest(2900,1);
_t2=((_Phi==3)?_t8:(_Phi==10)?_t38:(_Phi==8)?_t12:0.0); // _t2 = phi [3.switch.body: t8, 10.if.done: t38, 8.if.then: t12] #z *ssa.Phi @ /usr/local/go/src/pkg/math/tanh.go:76:2
this.setPH(2920);
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/tanh.go:96:2

case 2: // switch.body
this.setLatest(2920,2);
this.SubFn1();
_Phi=2;
case 3: // switch.body
this.setLatest(2920,3);
this.SubFn2();
this.setPH(2908);
_t5=Math.exp(_t4); // _t5 = Exp(t4) *ssa.Call @ /usr/local/go/src/pkg/math/tanh.go:84:11
this.SubFn3();
_Phi=3;
case 4: // switch.next
this.setLatest(2908,4);
this.SubFn4();
_Phi=4;
case 5: // if.then
this.setLatest(2908,5);
this.setPH(2904);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/tanh.go:80:4

case 6: // if.done
this.setLatest(2904,6);
this.setPH(2906);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/tanh.go:82:3

case 7: // switch.next
this.setLatest(2906,7);
this.SubFn5();
_Phi=7;
case 8: // if.then
this.setLatest(2906,8);
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(2906,9);
this.setPH(2915);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/tanh.go:91:4

case 10: // if.done
this.setLatest(2915,10);
this.SubFn7();
_Phi=10;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(2902);
_t1=(Force.toFloat(_t0)>Force.toFloat(44.014845965556525)); // _t1 = t0 > 22007422982778263573997/500000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:78:9
_Next=_t1 ? 2 : 4; // if t1 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/tanh.go:78:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Bool;
this.setPH(2903);
_t3=(Force.toFloat(p_x)<Force.toFloat(0)); // _t3 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:79:8
_Next=_t3 ? 5 : 6; // if t3 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/tanh.go:79:8
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(2908);
_t4=(Force.toFloat(2)*Force.toFloat(_t0)); // _t4 = 2:float64 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:84:14
}// end SubFn2
private inline  function SubFn3():Void {
var _t6:Float;
var _t7:Float;
var _t9:Bool;
this.setPH(2909);
_t6=(Force.toFloat(_t5)+Force.toFloat(1)); // _t6 = t5 + 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:85:15
_t7=Force.floatDiv(Force.toFloat(2),Force.toFloat(_t6)); // _t7 = 2:float64 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:85:12
_t8=(Force.toFloat(1)-Force.toFloat(_t7)); // _t8 = 1:float64 - t7 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:85:9
this.setPH(2910);
_t9=(Force.toFloat(p_x)<Force.toFloat(0)); // _t9 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:86:8
_Next=_t9 ? 8 : 1; // if t9 goto 8.if.then else 1.switch.done *ssa.If near /usr/local/go/src/pkg/math/tanh.go:86:8
}// end SubFn3
private inline  function SubFn4():Void {
var _t10:Bool;
this.setPH(2907);
_t10=(Force.toFloat(_t0)>=Force.toFloat(0.625)); // _t10 = t0 >= 5/8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:83:9
_Next=_t10 ? 3 : 7; // if t10 goto 3.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/tanh.go:83:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t11:Bool;
this.setPH(2914);
_t11=(Force.toFloat(p_x)==Force.toFloat(0)); // _t11 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:90:8
_Next=_t11 ? 9 : 10; // if t11 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/tanh.go:90:8
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(2911);
_t12=(-Force.toFloat(_t8)); // _t12 = -t8 *ssa.UnOp @ /usr/local/go/src/pkg/math/tanh.go:87:8
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/tanh.go:87:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t14:Float;
var _t15:Array<Float>;
var _t16:Float;
var _t17:Float;
var _t18:Array<Float>;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Array<Float>;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Array<Float>;
var _t27:Float;
var _t28:Float;
var _t29:Float;
var _t30:Array<Float>;
var _t31:Float;
var _t32:Float;
var _t33:Float;
var _t34:Array<Float>;
var _t35:Float;
var _t36:Float;
var _t37:Float;
this.setPH(2917);
_t13=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t13 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:93:10
this.setPH(2918);
_t14=(Force.toFloat(p_x)*Force.toFloat(_t13)); // _t14 = x * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:12
_t15=Go.math_tanhP.load(); // _t15 = *tanhP *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:12
_t16=_t15[0]; // _t16 = t15[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:22
_t17=(Force.toFloat(_t16)*Force.toFloat(_t13)); // _t17 = t16 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:25
_t18=Go.math_tanhP.load(); // _t18 = *tanhP *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:25
_t19=_t18[1]; // _t19 = t18[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:33
_t20=(Force.toFloat(_t17)+Force.toFloat(_t19)); // _t20 = t17 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:27
_t21=(Force.toFloat(_t20)*Force.toFloat(_t13)); // _t21 = t20 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:37
_t22=Go.math_tanhP.load(); // _t22 = *tanhP *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:37
_t23=_t22[2]; // _t23 = t22[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:45
_t24=(Force.toFloat(_t21)+Force.toFloat(_t23)); // _t24 = t21 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:39
_t25=(Force.toFloat(_t14)*Force.toFloat(_t24)); // _t25 = t14 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:14
_t26=Go.math_tanhQ.load(); // _t26 = *tanhQ *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:14
_t27=_t26[0]; // _t27 = t26[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:60
_t28=(Force.toFloat(_t13)+Force.toFloat(_t27)); // _t28 = t13 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:54
_t29=(Force.toFloat(_t28)*Force.toFloat(_t13)); // _t29 = t28 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:64
_t30=Go.math_tanhQ.load(); // _t30 = *tanhQ *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:64
_t31=_t30[1]; // _t31 = t30[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:72
_t32=(Force.toFloat(_t29)+Force.toFloat(_t31)); // _t32 = t29 + t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:66
_t33=(Force.toFloat(_t32)*Force.toFloat(_t13)); // _t33 = t32 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:76
_t34=Go.math_tanhQ.load(); // _t34 = *tanhQ *ssa.UnOp near /usr/local/go/src/pkg/math/tanh.go:94:76
_t35=_t34[2]; // _t35 = t34[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/tanh.go:94:84
_t36=(Force.toFloat(_t33)+Force.toFloat(_t35)); // _t36 = t33 + t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:78
_t37=Force.floatDiv(Force.toFloat(_t25),Force.toFloat(_t36)); // _t37 = t25 / t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:49
_t38=(Force.toFloat(p_x)+Force.toFloat(_t37)); // _t38 = x + t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:94:9
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/tanh.go:94:9
}// end SubFn7
}
#if js @:expose("Go_utf8_DecodeRuneInString") #end class Go_utf8_DecodeRuneInString extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:229:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5473,"Go_utf8_DecodeRuneInString");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int};
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Int,r1:Int,r2:Bool}=null;
var _t1:Int=0;
var _t2:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : {r0:Int, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_DecodeRuneInString(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : {r0:Int, r1:Int} {
var _sf=new Go_utf8_DecodeRuneInString(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_DecodeRuneInString
{return new Go_utf8_DecodeRuneInString(gr,_bds, p_s);
}
public function run():Go_utf8_DecodeRuneInString {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5473,0);
this.setPH(5474);
_SF1=Go_utf8_decodeRuneInStringInternal.call(this._goroutine,[],p_s);
_Next = -1;
return this;
case -1:
this.setLatest(5474,-1);
_t0=_SF1.res();
 // _t0 = decodeRuneInStringInternal(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:230:41
this.SubFn0();
this.setPH(5475);
_res= {r0:_t1,r1:_t2};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1, t2 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:231:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t1=_t0.r0; // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:231:2
_t2=_t0.r1; // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:231:2
 // _t3 = extract t0 #2 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:231:2 [REGISTER VALUE UN-USED]
}// end SubFn0
}
#if js @:expose("Go_math_Y0") #end class Go_math_Y0 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j0.go:156:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3077,"Go_math_Y0");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Float=0.0;
var _t6:Bool=false;
var _t7:Bool=false;
var _SF5:StackFrame;
var _t8:{r0:Float,r1:Float}=null;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Bool=false;
var _t14:Bool=false;
var _t15:Float=0.0;
var _SF6:StackFrame;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Bool=false;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _SF7:StackFrame;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _SF8:StackFrame;
var _t29:Float=0.0;
var _SF9:StackFrame;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _SF10:StackFrame;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _SF11:StackFrame;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _SF12:StackFrame;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _SF13:StackFrame;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Y0(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Y0(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Y0
{return new Go_math_Y0(gr,_bds, p_x);
}
public function run():Go_math_Y0 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3077,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(3077,1);
this.setPH(3096);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:175:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:175:3

case 2: // switch.body
this.setLatest(3096,2);
this.setPH(3098);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:177:3

case 3: // switch.next
this.setLatest(3098,3);
this.setPH(3097);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -2;
return this;
case -2:
this.setLatest(3097,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:176:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(3097,4);
this.setPH(3095);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(3095,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:174:21
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(3095,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:174:13
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(3095,6);
this.setPH(3100);
_t5=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t5 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:179:13
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:179:3

case 7: // switch.next
this.setLatest(3100,7);
this.SubFn4();
_Phi=7;
case 8: // switch.next
this.setLatest(3100,8);
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(3100,9);
this.setPH(3116);
_SF5=Go_math_sincos.call(this._goroutine,[],p_x);
_Next = -5;
return this;
case -5:
this.setLatest(3116,-5);
_t8=_SF5.res();
 // _t8 = Sincos(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:195:17
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(3116,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(3116,11);
this.SubFn8();
this.setPH(3125);
_t16=Math.cos(_t15); // _t16 = Cos(t15) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:204:13
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(3125,12);
this.setPH(3117);
_t20=((_Phi==9)?_t11:(_Phi==13)?_t11:(_Phi==14)?_t24:0.0); // _t20 = phi [9.if.then: t11, 13.if.then: t11, 14.if.else: t24] #ss *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:196:3
this.setPH(3118);
_t21=((_Phi==9)?_t12:(_Phi==13)?_t23:(_Phi==14)?_t12:0.0); // _t21 = phi [9.if.then: t12, 13.if.then: t23, 14.if.else: t12] #cc *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:197:3
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(3118,13);
this.SubFn11();
_Phi=13;
case 14: // if.else
this.setLatest(3118,14);
this.SubFn12();
_Phi=14;
case 15: // if.then
this.setLatest(3118,15);
this.SubFn13();
this.setPH(3134);
_t26=Math.sqrt(p_x); // _t26 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:213:32
this.SubFn14();
_Phi=15;
case 16: // if.done
this.setLatest(3134,16);
this.setPH(3132);
_t28=((_Phi==15)?_t27:(_Phi==17)?_t36:0.0); // _t28 = phi [15.if.then: t27, 17.if.else: t36] #z *ssa.Phi @ /usr/local/go/src/pkg/math/j0.go:211:7
this.setPH(3140);
_res= _t28;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t28 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:219:3

case 17: // if.else
this.setLatest(3140,17);
this.setPH(3136);
_SF8=Go_math_pzero.call(this._goroutine,[],p_x);
_Next = -8;
return this;
case -8:
this.setLatest(3136,-8);
_t29=_SF8.res();
 // _t29 = pzero(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:215:14
this.setPH(3137);
_SF9=Go_math_qzero.call(this._goroutine,[],p_x);
_Next = -9;
return this;
case -9:
this.setLatest(3137,-9);
_t30=_SF9.res();
 // _t30 = qzero(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:216:14
this.SubFn15();
this.setPH(3138);
_t35=Math.sqrt(p_x); // _t35 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:217:43
this.SubFn16();
_Phi=17;
case 18: // if.then
this.setLatest(3138,18);
this.setPH(3143);
_t37=Math.log(p_x); // _t37 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:222:26
this.SubFn17();
_res= _t39;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t39 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:222:3

case 19: // if.done
this.setLatest(3143,19);
this.SubFn18();
this.setPH(3148);
_SF12=Go_math_J0.call(this._goroutine,[],p_x);
_Next = -12;
return this;
case -12:
this.setLatest(3148,-12);
_t62=_SF12.res();
 // _t62 = J0(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:227:24
this.SubFn19();
_t64=Math.log(p_x); // _t64 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/j0.go:227:31
this.SubFn20();
_res= _t66;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t66 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:227:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3095);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:174:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/j0.go:174:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 7; // if t2 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:174:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:174:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:174:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(3099);
_t6=(Force.toFloat(p_x)==Force.toFloat(0)); // _t6 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:178:9
_Next=_t6 ? 6 : 8; // if t6 goto 6.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/j0.go:178:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(3103);
_t7=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t7 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:182:7
_Next=_t7 ? 9 : 10; // if t7 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:182:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t13:Bool;
_t9=_t8.r0; // _t9 = extract t8 #0 *ssa.Extract near /usr/local/go/src/pkg/math/j0.go:182:7
_t10=_t8.r1; // _t10 = extract t8 #1 *ssa.Extract near /usr/local/go/src/pkg/math/j0.go:182:7
this.setPH(3117);
_t11=(Force.toFloat(_t9)-Force.toFloat(_t10)); // _t11 = t9 - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:196:11
this.setPH(3118);
_t12=(Force.toFloat(_t9)+Force.toFloat(_t10)); // _t12 = t9 + t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:197:11
this.setPH(3124);
_t13=(Force.toFloat(p_x)<Force.toFloat(8.988465674311579e+307)); // _t13 = x < 89884656743115785407263711865852178399050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:203:8
_Next=_t13 ? 11 : 12; // if t13 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:203:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t14:Bool;
this.setPH(3142);
_t14=(Force.toFloat(p_x)<=Force.toFloat(7.450580596923828e-09)); // _t14 = x <= 1/134217728:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:221:7
_Next=_t14 ? 18 : 19; // if t14 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:221:7
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(3125);
_t15=(Force.toFloat(p_x)+Force.toFloat(p_x)); // _t15 = x + x *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:204:16
}// end SubFn8
private inline  function SubFn9():Void {
var _t18:Float;
var _t19:Bool;
_t17=(-Force.toFloat(_t16)); // _t17 = -t16 *ssa.UnOp @ /usr/local/go/src/pkg/math/j0.go:204:9
this.setPH(3126);
_t18=(Force.toFloat(_t9)*Force.toFloat(_t10)); // _t18 = t9 * t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:205:8
_t19=(Force.toFloat(_t18)<Force.toFloat(0)); // _t19 = t18 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:205:11
_Next=_t19 ? 13 : 14; // if t19 goto 13.if.then else 14.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:205:11
}// end SubFn9
private inline  function SubFn10():Void {
var _t22:Bool;
this.setPH(3133);
_t22=(Force.toFloat(p_x)>Force.toFloat(6.80564733841877e+38)); // _t22 = x > 680564733841876926926749214863536422912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:212:8
_Next=_t22 ? 15 : 17; // if t22 goto 15.if.then else 17.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:212:8
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(3127);
_t23=Force.floatDiv(Force.toFloat(_t17),Force.toFloat(_t11)); // _t23 = t17 / t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:206:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:206:12
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(3129);
_t24=Force.floatDiv(Force.toFloat(_t17),Force.toFloat(_t12)); // _t24 = t17 / t12 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:208:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:208:12
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(3134);
_t25=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t20)); // _t25 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:213:21
}// end SubFn13
private inline  function SubFn14():Void {
_t27=Force.floatDiv(Force.toFloat(_t25),Force.toFloat(_t26)); // _t27 = t25 / t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:213:26
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:213:26
}// end SubFn14
private inline  function SubFn15():Void {
var _t31:Float;
var _t32:Float;
var _t33:Float;
this.setPH(3138);
_t31=(Force.toFloat(_t29)*Force.toFloat(_t20)); // _t31 = t29 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:25
_t32=(Force.toFloat(_t30)*Force.toFloat(_t21)); // _t32 = t30 * t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:32
_t33=(Force.toFloat(_t31)+Force.toFloat(_t32)); // _t33 = t31 + t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:29
_t34=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t33)); // _t34 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:21
}// end SubFn15
private inline  function SubFn16():Void {
_t36=Force.floatDiv(Force.toFloat(_t34),Force.toFloat(_t35)); // _t36 = t34 / t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:37
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:217:37
}// end SubFn16
private inline  function SubFn17():Void {
var _t38:Float;
this.setPH(3143);
_t38=(Force.toFloat(0.6366197723675814)*Force.toFloat(_t37)); // _t38 = 200000000000000000000000000000000000000000000000000000000000000/314159265358979323846264338327950288419716939937510582097494459:float64 * t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:222:22
_t39=(Force.toFloat((-0.07380429510868723))+Force.toFloat(_t38)); // _t39 = -738042951086872317523/10000000000000000000000:float64 + t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:222:14
}// end SubFn17
private inline  function SubFn18():Void {
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t53:Float;
var _t54:Float;
var _t55:Float;
var _t56:Float;
var _t57:Float;
var _t58:Float;
var _t59:Float;
this.setPH(3145);
_t40=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t40 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:224:9
this.setPH(3146);
_t41=(Force.toFloat(_t40)*Force.toFloat((-3.982051941321034e-11))); // _t41 = t40 * -398205194132103398453/10000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:49
_t42=(Force.toFloat(1.9559013703502292e-08)+Force.toFloat(_t41)); // _t42 = 97795068517511460103/5000000000000000000000000000:float64 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:47
_t43=(Force.toFloat(_t40)*Force.toFloat(_t42)); // _t43 = t40 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:42
_t44=(Force.toFloat((-3.8140705372436416e-06))+Force.toFloat(_t43)); // _t44 = -3051256429794913289/800000000000000000000000:float64 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:40
_t45=(Force.toFloat(_t40)*Force.toFloat(_t44)); // _t45 = t40 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:35
_t46=(Force.toFloat(0.00034745343209368365)+Force.toFloat(_t45)); // _t46 = 173726716046841825119/500000000000000000000000:float64 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:33
_t47=(Force.toFloat(_t40)*Force.toFloat(_t46)); // _t47 = t40 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:28
_t48=(Force.toFloat((-0.01381856719455969))+Force.toFloat(_t47)); // _t48 = -8636604496599806181/625000000000000000000:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:26
_t49=(Force.toFloat(_t40)*Force.toFloat(_t48)); // _t49 = t40 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:21
_t50=(Force.toFloat(0.17666645250918112)+Force.toFloat(_t49)); // _t50 = 88333226254590557769/500000000000000000000:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:19
_t51=(Force.toFloat(_t40)*Force.toFloat(_t50)); // _t51 = t40 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:14
_t52=(Force.toFloat((-0.07380429510868723))+Force.toFloat(_t51)); // _t52 = -738042951086872317523/10000000000000000000000:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:11
this.setPH(3147);
_t53=(Force.toFloat(_t40)*Force.toFloat(4.4111031133267547e-10)); // _t53 = t40 * 441110311332675467403/1000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:33
_t54=(Force.toFloat(2.591508518404578e-07)+Force.toFloat(_t53)); // _t54 = 259150851840457805467/1000000000000000000000000000:float64 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:31
_t55=(Force.toFloat(_t40)*Force.toFloat(_t54)); // _t55 = t40 * t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:26
_t56=(Force.toFloat(7.600686273503533e-05)+Force.toFloat(_t55)); // _t56 = 380034313675176626851/5000000000000000000000000:float64 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:24
_t57=(Force.toFloat(_t40)*Force.toFloat(_t56)); // _t57 = t40 * t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:19
_t58=(Force.toFloat(0.01273048348341237)+Force.toFloat(_t57)); // _t58 = 994569022141591401/78125000000000000000:float64 + t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:17
_t59=(Force.toFloat(_t40)*Force.toFloat(_t58)); // _t59 = t40 * t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:12
_t60=(Force.toFloat(1)+Force.toFloat(_t59)); // _t60 = 1:float64 + t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:9
this.setPH(3148);
_t61=Force.floatDiv(Force.toFloat(_t52),Force.toFloat(_t60)); // _t61 = t52 / t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:227:10
}// end SubFn18
private inline  function SubFn19():Void {
_t63=(Force.toFloat(0.6366197723675814)*Force.toFloat(_t62)); // _t63 = 200000000000000000000000000000000000000000000000000000000000000/314159265358979323846264338327950288419716939937510582097494459:float64 * t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:227:21
}// end SubFn19
private inline  function SubFn20():Void {
var _t65:Float;
_t65=(Force.toFloat(_t63)*Force.toFloat(_t64)); // _t65 = t63 * t64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:227:27
_t66=(Force.toFloat(_t61)+Force.toFloat(_t65)); // _t66 = t61 + t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:227:13
}// end SubFn20
}
#if (!php) private #end class Go_math_init extends StackFrameBasis implements StackFrame { 
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,3148,"Go_math_init");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Bool=false;
var _t1:Pointer=null;
var _t2:Pointer=null;
var _t3:Pointer=null;
var _t4:Pointer=null;
var _t5:Pointer=null;
var _t6:Pointer=null;
var _t7:Pointer=null;
var _t8:Pointer=null;
var _t9:Pointer=null;
var _t10:Pointer=null;
var _t11:Pointer=null;
var _t12:Pointer=null;
var _t13:Pointer=null;
var _t14:Pointer=null;
var _t15:Pointer=null;
var _t16:Pointer=null;
var _t17:Pointer=null;
var _t18:Pointer=null;
var _t19:Pointer=null;
var _t20:Pointer=null;
var _t21:Pointer=null;
var _t22:Pointer=null;
var _t23:Pointer=null;
var _t24:Pointer=null;
var _t25:Pointer=null;
var _t26:Pointer=null;
var _t27:Pointer=null;
var _t28:Pointer=null;
var _t29:Pointer=null;
var _t30:Pointer=null;
var _t31:Pointer=null;
var _t32:Pointer=null;
var _t33:Pointer=null;
var _t34:Pointer=null;
var _t35:Pointer=null;
var _t36:Pointer=null;
var _t37:Pointer=null;
var _t38:Pointer=null;
var _t39:Pointer=null;
var _t40:Pointer=null;
var _t41:Pointer=null;
var _t42:Pointer=null;
var _t43:Pointer=null;
var _t44:Pointer=null;
var _t45:Pointer=null;
var _t46:Pointer=null;
var _t47:Pointer=null;
var _t48:Pointer=null;
var _t49:Pointer=null;
var _t50:Pointer=null;
var _t51:Pointer=null;
var _t52:Pointer=null;
var _t53:Pointer=null;
var _t54:Pointer=null;
var _t55:Pointer=null;
var _t56:Pointer=null;
var _t57:Pointer=null;
var _t58:Pointer=null;
var _t59:Pointer=null;
var _t60:Pointer=null;
var _t61:Pointer=null;
var _t62:Pointer=null;
var _t63:Pointer=null;
var _t64:Pointer=null;
var _t65:Pointer=null;
var _t66:Pointer=null;
var _t67:Pointer=null;
var _t68:Pointer=null;
var _t69:Pointer=null;
var _t70:Pointer=null;
var _t71:Pointer=null;
var _t72:Pointer=null;
var _t73:Pointer=null;
var _t74:Pointer=null;
var _t75:Pointer=null;
var _t76:Pointer=null;
var _t77:Pointer=null;
var _t78:Pointer=null;
var _t79:Pointer=null;
var _t80:Pointer=null;
var _t81:Pointer=null;
var _t82:Pointer=null;
var _t83:Pointer=null;
var _t84:Pointer=null;
var _t85:Pointer=null;
var _t86:Pointer=null;
var _t87:Pointer=null;
var _t88:Pointer=null;
var _t89:Pointer=null;
var _t90:Pointer=null;
var _t91:Pointer=null;
var _t92:Pointer=null;
var _t93:Pointer=null;
var _t94:Pointer=null;
var _t95:Pointer=null;
var _t96:Pointer=null;
var _t97:Pointer=null;
var _t98:Pointer=null;
var _t99:Pointer=null;
var _t100:Pointer=null;
var _t101:Pointer=null;
var _t102:Pointer=null;
var _t103:Pointer=null;
var _t104:Pointer=null;
var _t105:Pointer=null;
var _t106:Pointer=null;
var _t107:Pointer=null;
var _t108:Pointer=null;
var _t109:Pointer=null;
var _t110:Pointer=null;
var _t111:Pointer=null;
var _t112:Pointer=null;
var _t113:Pointer=null;
var _t114:Pointer=null;
var _t115:Pointer=null;
var _t116:Pointer=null;
var _t117:Pointer=null;
var _t118:Pointer=null;
var _t119:Pointer=null;
var _t120:Pointer=null;
var _t121:Pointer=null;
var _t122:Pointer=null;
var _t123:Pointer=null;
var _t124:Pointer=null;
var _t125:Pointer=null;
var _t126:Pointer=null;
var _t127:Pointer=null;
var _t128:Pointer=null;
var _t129:Pointer=null;
var _t130:Pointer=null;
var _t131:Pointer=null;
var _t132:Pointer=null;
var _t133:Pointer=null;
var _t134:Pointer=null;
var _t135:Pointer=null;
var _t136:Pointer=null;
var _t137:Pointer=null;
var _t138:Pointer=null;
var _t139:Pointer=null;
var _t140:Pointer=null;
var _t141:Pointer=null;
var _t142:Pointer=null;
var _t143:Pointer=null;
var _t144:Pointer=null;
var _t145:Pointer=null;
var _t146:Pointer=null;
var _t147:Pointer=null;
var _t148:Pointer=null;
var _t149:Pointer=null;
var _t150:Pointer=null;
var _t151:Pointer=null;
var _t152:Pointer=null;
var _t153:Pointer=null;
var _t154:Pointer=null;
var _t155:Pointer=null;
var _t156:Pointer=null;
var _t157:Pointer=null;
var _t158:Pointer=null;
var _t159:Pointer=null;
var _t160:Pointer=null;
var _t161:Pointer=null;
var _t162:Pointer=null;
var _t163:Pointer=null;
var _t164:Pointer=null;
var _t165:Pointer=null;
var _t166:Pointer=null;
var _t167:Pointer=null;
var _t168:Pointer=null;
var _t169:Pointer=null;
var _t170:Pointer=null;
var _t171:Pointer=null;
var _t172:Pointer=null;
var _t173:Pointer=null;
var _t174:Pointer=null;
var _t175:Pointer=null;
var _t176:Pointer=null;
var _t177:Pointer=null;
var _t178:Pointer=null;
var _t179:Pointer=null;
var _t180:Pointer=null;
var _t181:Pointer=null;
var _t182:Pointer=null;
var _t183:Pointer=null;
var _t184:Pointer=null;
var _t185:Pointer=null;
var _t186:Pointer=null;
var _t187:Pointer=null;
var _t188:Pointer=null;
var _t189:Pointer=null;
var _t190:Pointer=null;
var _t191:Pointer=null;
var _t192:Pointer=null;
var _t193:Pointer=null;
var _t194:Pointer=null;
var _t195:Pointer=null;
var _t196:Pointer=null;
var _t197:Pointer=null;
var _t198:Pointer=null;
var _t199:Pointer=null;
var _t200:Pointer=null;
var _t201:Pointer=null;
var _t202:Pointer=null;
var _t203:Pointer=null;
var _t204:Pointer=null;
var _t205:Pointer=null;
var _t206:Pointer=null;
var _t207:Pointer=null;
var _t208:Pointer=null;
var _t209:Pointer=null;
var _t210:Pointer=null;
var _t211:Pointer=null;
var _t212:Pointer=null;
var _t213:Pointer=null;
var _t214:Pointer=null;
var _t215:Pointer=null;
var _t216:Pointer=null;
var _t217:Pointer=null;
var _t218:Pointer=null;
var _t219:Pointer=null;
var _t220:Pointer=null;
var _t221:Pointer=null;
var _t222:Pointer=null;
var _t223:Pointer=null;
var _t224:Pointer=null;
var _t225:Pointer=null;
var _t226:Pointer=null;
var _t227:Pointer=null;
var _t228:Pointer=null;
var _t229:Pointer=null;
var _t230:Pointer=null;
var _t231:Pointer=null;
var _t232:Pointer=null;
var _t233:Pointer=null;
var _t234:Pointer=null;
var _t235:Pointer=null;
var _t236:Pointer=null;
var _t237:Pointer=null;
var _t238:Pointer=null;
var _t239:Pointer=null;
var _t240:Pointer=null;
var _t241:Pointer=null;
var _t242:Pointer=null;
var _t243:Pointer=null;
var _t244:Pointer=null;
var _t245:Pointer=null;
var _t246:Pointer=null;
var _t247:Pointer=null;
var _t248:Pointer=null;
var _t249:Pointer=null;
var _t250:Pointer=null;
var _t251:Pointer=null;
var _t252:Pointer=null;
var _t253:Pointer=null;
var _t254:Pointer=null;
var _t255:Pointer=null;
var _t256:Pointer=null;
var _t257:Pointer=null;
var _t258:Pointer=null;
var _t259:Pointer=null;
var _t260:Pointer=null;
var _t261:Pointer=null;
var _t262:Pointer=null;
var _t263:Pointer=null;
var _t264:Pointer=null;
var _t265:Pointer=null;
var _t266:Pointer=null;
var _t267:Pointer=null;
var _t268:Pointer=null;
var _t269:Pointer=null;
var _t270:Pointer=null;
var _t271:Pointer=null;
var _t272:Pointer=null;
var _t273:Pointer=null;
var _t274:Pointer=null;
var _t275:Pointer=null;
var _t276:Pointer=null;
var _t277:Pointer=null;
var _t278:Pointer=null;
var _t279:Pointer=null;
var _t280:Pointer=null;
var _t281:Pointer=null;
var _t282:Pointer=null;
var _t283:Pointer=null;
var _t284:Pointer=null;
var _t285:Pointer=null;
var _t286:Pointer=null;
var _t287:Pointer=null;
var _t288:Pointer=null;
var _t289:Pointer=null;
var _t290:Pointer=null;
var _SF1:StackFrame;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_init(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_math_init(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_math_init
{return new Go_math_init(gr,_bds);
}
public function run():Go_math_init {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3148,0);
this.SubFn0();

case 1: // init.start
this.setLatest(3148,1);
this.SubFn1();
this.SubFn2();
this.SubFn3();
Go_math_init_36_1.call(this._goroutine,[]);
_Next = -1;
return this;
case -1:
this.setLatest(3148,-1);
 // _t291 = init$1() *ssa.Call near /usr/local/go/src/pkg/math/j0.go:227:13 [REGISTER VALUE UN-USED]
this.SubFn4();

case 2: // init.done
this.setLatest(3148,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/j0.go:227:13

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=Go.math_init_36_guard.load(); // _t0 = *init$guard *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:227:13
_Next=_t0 ? 2 : 1; // if t0 goto 2.init.done else 1.init.start *ssa.If near /usr/local/go/src/pkg/math/j0.go:227:13
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Pointer;
var _t2:Pointer;
var _t3:Pointer;
var _t4:Pointer;
var _t5:Pointer;
var _t6:Pointer;
var _t7:Pointer;
var _t8:Pointer;
var _t9:Pointer;
var _t10:Pointer;
var _t11:Pointer;
var _t12:Pointer;
var _t13:Pointer;
var _t14:Pointer;
var _t15:Pointer;
var _t16:Pointer;
var _t17:Pointer;
var _t18:Pointer;
var _t19:Pointer;
var _t20:Pointer;
var _t21:Pointer;
var _t22:Pointer;
var _t23:Pointer;
var _t24:Pointer;
var _t25:Pointer;
var _t26:Pointer;
var _t27:Pointer;
var _t28:Pointer;
var _t29:Pointer;
var _t30:Pointer;
var _t31:Pointer;
var _t32:Pointer;
var _t33:Pointer;
var _t34:Pointer;
var _t35:Pointer;
var _t36:Pointer;
var _t37:Pointer;
var _t38:Pointer;
var _t39:Pointer;
var _t40:Pointer;
var _t41:Pointer;
var _t42:Pointer;
var _t43:Pointer;
var _t44:Pointer;
var _t45:Pointer;
var _t46:Pointer;
var _t47:Pointer;
var _t48:Pointer;
var _t49:Pointer;
var _t50:Pointer;
var _t51:Pointer;
var _t52:Pointer;
var _t53:Pointer;
var _t54:Pointer;
var _t55:Pointer;
var _t56:Pointer;
var _t57:Pointer;
var _t58:Pointer;
var _t59:Pointer;
var _t60:Pointer;
var _t61:Pointer;
var _t62:Pointer;
var _t63:Pointer;
var _t64:Pointer;
var _t65:Pointer;
var _t66:Pointer;
var _t67:Pointer;
var _t68:Pointer;
var _t69:Pointer;
var _t70:Pointer;
var _t71:Pointer;
var _t72:Pointer;
var _t73:Pointer;
var _t74:Pointer;
var _t75:Pointer;
var _t76:Pointer;
var _t77:Pointer;
var _t78:Pointer;
var _t79:Pointer;
var _t80:Pointer;
var _t81:Pointer;
var _t82:Pointer;
var _t83:Pointer;
var _t84:Pointer;
var _t85:Pointer;
var _t86:Pointer;
var _t87:Pointer;
var _t88:Pointer;
var _t89:Pointer;
var _t90:Pointer;
var _t91:Pointer;
var _t92:Pointer;
var _t93:Pointer;
var _t94:Pointer;
var _t95:Pointer;
var _t96:Pointer;
var _t97:Pointer;
var _t98:Pointer;
var _t99:Pointer;
var _t100:Pointer;
var _t101:Pointer;
var _t102:Pointer;
var _t103:Pointer;
var _t104:Pointer;
var _t105:Pointer;
var _t106:Pointer;
var _t107:Pointer;
var _t108:Pointer;
var _t109:Pointer;
var _t110:Pointer;
var _t111:Pointer;
var _t112:Pointer;
var _t113:Pointer;
var _t114:Pointer;
var _t115:Pointer;
var _t116:Pointer;
var _t117:Pointer;
var _t118:Pointer;
var _t119:Pointer;
var _t120:Pointer;
var _t121:Pointer;
var _t122:Pointer;
var _t123:Pointer;
var _t124:Pointer;
var _t125:Pointer;
var _t126:Pointer;
var _t127:Pointer;
var _t128:Pointer;
Go.math_init_36_guard.store(true); // *init$guard = true:bool *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t1=Go.math__gamP.addr(0);  // _t1 = &_gamP[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t1.store(0.00016011952247675185); // *t1 = 160119522476751861407/1000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t2=Go.math__gamP.addr(1);  // _t2 = &_gamP[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t2.store(0.0011913514700658638); // *t2 = 119135147006586384913/100000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t3=Go.math__gamP.addr(2);  // _t3 = &_gamP[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t3.store(0.010421379756176158); // *t3 = 20842759512352313987/2000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t4=Go.math__gamP.addr(3);  // _t4 = &_gamP[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t4.store(0.04763678004571372); // *t4 = 59545975057142153933/1250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t5=Go.math__gamP.addr(4);  // _t5 = &_gamP[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t5.store(0.20744822764843598); // *t5 = 4148964552968719503/20000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t6=Go.math__gamP.addr(5);  // _t6 = &_gamP[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t6.store(0.4942148268014971); // *t6 = 494214826801497100753/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t7=Go.math__gamP.addr(6);  // _t7 = &_gamP[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t7.store(1); // *t7 = 249999999999999999199/250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t8=Go.math__gamQ.addr(0);  // _t8 = &_gamQ[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t8.store((-2.3158187332412014e-05)); // *t8 = -231581873324120129819/10000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t9=Go.math__gamQ.addr(1);  // _t9 = &_gamQ[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t9.store(0.0005396055804933034); // *t9 = 269802790246651698921/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t10=Go.math__gamQ.addr(2);  // _t10 = &_gamQ[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t10.store((-0.004456419138517973)); // *t10 = -222820956925898620247/50000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t11=Go.math__gamQ.addr(3);  // _t11 = &_gamQ[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t11.store(0.011813978522206043); // *t11 = 3691868288189388611/312500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t12=Go.math__gamQ.addr(4);  // _t12 = &_gamQ[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t12.store(0.035823639860549865); // *t12 = 358236398605498653373/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t13=Go.math__gamQ.addr(5);  // _t13 = &_gamQ[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t13.store((-0.23459179571824335)); // *t13 = -29323974464780418571/125000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t14=Go.math__gamQ.addr(6);  // _t14 = &_gamQ[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t14.store(0.0714304917030273); // *t14 = 142860983406054614817/2000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t15=Go.math__gamQ.addr(7);  // _t15 = &_gamQ[7:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t15.store(1); // *t15 = 312500000000000001/312500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t16=Go.math__gamS.addr(0);  // _t16 = &_gamS[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t16.store(0.0007873113957930937); // *t16 = 787311395793093628397/1000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t17=Go.math__gamS.addr(1);  // _t17 = &_gamS[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t17.store((-0.00022954996161337813)); // *t17 = -11477498080668906319/50000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t18=Go.math__gamS.addr(2);  // _t18 = &_gamS[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t18.store((-0.0026813261780578124)); // *t18 = -10725304712231249313/4000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t19=Go.math__gamS.addr(3);  // _t19 = &_gamS[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t19.store(0.0034722222160545866); // *t19 = 34722222160545866731/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t20=Go.math__gamS.addr(4);  // _t20 = &_gamS[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t20.store(0.08333333333334822); // *t20 = 416666666666741128563/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t21=Go.math_p0R8.addr(0);  // _t21 = &p0R8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t21.store(0); // *t21 = 0:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t22=Go.math_p0R8.addr(1);  // _t22 = &p0R8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t22.store((-0.07031249999999004)); // *t22 = -175781249999975089371/2500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t23=Go.math_p0R8.addr(2);  // _t23 = &p0R8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t23.store((-8.081670412753498)); // *t23 = -404083520637674897813/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t24=Go.math_p0R8.addr(3);  // _t24 = &p0R8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t24.store((-257.06310567970485)); // *t24 = -128531552839852423631/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t25=Go.math_p0R8.addr(4);  // _t25 = &p0R8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t25.store((-2485.216410094288)); // *t25 = -1941575320386162673/781250000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t26=Go.math_p0R8.addr(5);  // _t26 = &p0R8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t26.store((-5253.043804907295)); // *t26 = -65663047561341193159/12500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t27=Go.math_p0S8.addr(0);  // _t27 = &p0S8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t27.store(116.53436461966818); // *t27 = 116534364619668181717/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t28=Go.math_p0S8.addr(1);  // _t28 = &p0S8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t28.store(3833.7447536412183); // *t28 = 76674895072824365343/20000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t29=Go.math_p0S8.addr(2);  // _t29 = &p0S8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t29.store(40597.857264847255); // *t29 = 25373660790529534097/625000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t30=Go.math_p0S8.addr(3);  // _t30 = &p0S8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t30.store(116752.97256437592); // *t30 = 116752972564375915681/1000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t31=Go.math_p0S8.addr(4);  // _t31 = &p0S8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t31.store(47627.728414673096); // *t31 = 19051091365869238507/400000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t32=Go.math_p0R5.addr(0);  // _t32 = &p0R5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t32.store((-1.141254646918945e-11)); // *t32 = -14265683086486812823/1250000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t33=Go.math_p0R5.addr(1);  // _t33 = &p0R5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t33.store((-0.07031249408735993)); // *t33 = -351562470436799640039/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t34=Go.math_p0R5.addr(2);  // _t34 = &p0R5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t34.store((-4.159610644705878)); // *t34 = -207980532235293891219/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t35=Go.math_p0R5.addr(3);  // _t35 = &p0R5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t35.store((-67.67476522651673)); // *t35 = -676747652265167261021/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t36=Go.math_p0R5.addr(4);  // _t36 = &p0R5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t36.store((-331.23129964917297)); // *t36 = -331231299649172967747/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t37=Go.math_p0R5.addr(5);  // _t37 = &p0R5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t37.store((-346.4333883656049)); // *t37 = -346433388365604912451/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t38=Go.math_p0S5.addr(0);  // _t38 = &p0S5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t38.store(60.753938269230034); // *t38 = 24301575307692013439/400000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t39=Go.math_p0S5.addr(1);  // _t39 = &p0S5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t39.store(1051.2523059570458); // *t39 = 105125230595704579173/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t40=Go.math_p0S5.addr(2);  // _t40 = &p0S5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t40.store(5978.970943338558); // *t40 = 298948547166927892249/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t41=Go.math_p0S5.addr(3);  // _t41 = &p0S5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t41.store(9625.445143577745); // *t41 = 962544514357774460223/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t42=Go.math_p0S5.addr(4);  // _t42 = &p0S5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t42.store(2406.058159229391); // *t42 = 240605815922939109441/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t43=Go.math_p0R3.addr(0);  // _t43 = &p0R3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t43.store((-2.547046017719519e-09)); // *t43 = -12735230088597595781/5000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t44=Go.math_p0R3.addr(1);  // _t44 = &p0R3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t44.store((-0.07031196163814817)); // *t44 = -351559808190740827327/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t45=Go.math_p0R3.addr(2);  // _t45 = &p0R3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t45.store((-2.409032215495296)); // *t45 = -240903221549529611423/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t46=Go.math_p0R3.addr(3);  // _t46 = &p0R3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t46.store((-21.96597747348831)); // *t46 = -219659774734883086467/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t47=Go.math_p0R3.addr(4);  // _t47 = &p0R3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t47.store((-58.07917047017376)); // *t47 = -145197926175434393059/2500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t48=Go.math_p0R3.addr(5);  // _t48 = &p0R3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t48.store((-31.44794705948885)); // *t48 = -157239735297444251927/5000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t49=Go.math_p0S3.addr(0);  // _t49 = &p0S3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t49.store(35.85603380552097); // *t49 = 358560338055209726349/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t50=Go.math_p0S3.addr(1);  // _t50 = &p0S3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t50.store(361.51398305030386); // *t50 = 18075699152515193191/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t51=Go.math_p0S3.addr(2);  // _t51 = &p0S3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t51.store(1193.6078379211153); // *t51 = 11936078379211153333/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t52=Go.math_p0S3.addr(3);  // _t52 = &p0S3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t52.store(1127.9967985690741); // *t52 = 3524989995528356701/3125000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t53=Go.math_p0S3.addr(4);  // _t53 = &p0S3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t53.store(173.58093081333575); // *t53 = 43395232703333938673/250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t54=Go.math_p0R2.addr(0);  // _t54 = &p0R2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t54.store((-8.875343330325264e-08)); // *t54 = -443767166516263205627/5000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t55=Go.math_p0R2.addr(1);  // _t55 = &p0R2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t55.store((-0.07030309954836247)); // *t55 = -703030995483624743247/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t56=Go.math_p0R2.addr(2);  // _t56 = &p0R2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t56.store((-1.4507384678095299)); // *t56 = -145073846780952986357/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t57=Go.math_p0R2.addr(3);  // _t57 = &p0R2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t57.store((-7.635696138235278)); // *t57 = -763569613823527770791/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t58=Go.math_p0R2.addr(4);  // _t58 = &p0R2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t58.store((-11.193166886035675)); // *t58 = -55965834430178373893/5000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t59=Go.math_p0R2.addr(5);  // _t59 = &p0R2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t59.store((-3.2336457935133534)); // *t59 = -323364579351335335033/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t60=Go.math_p0S2.addr(0);  // _t60 = &p0S2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t60.store(22.22029975320888); // *t60 = 222202997532088808441/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t61=Go.math_p0S2.addr(1);  // _t61 = &p0S2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t61.store(136.2067942182152); // *t61 = 8512924638638450503/62500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t62=Go.math_p0S2.addr(2);  // _t62 = &p0S2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t62.store(270.4702786580835); // *t62 = 270470278658083486789/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t63=Go.math_p0S2.addr(3);  // _t63 = &p0S2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t63.store(153.87539420832033); // *t63 = 153875394208320329881/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t64=Go.math_p0S2.addr(4);  // _t64 = &p0S2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t64.store(14.65761769482562); // *t64 = 14657617694825619381/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t65=Go.math_q0R8.addr(0);  // _t65 = &q0R8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t65.store(0); // *t65 = 0:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t66=Go.math_q0R8.addr(1);  // _t66 = &q0R8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t66.store(0.0732421874999935); // *t66 = 732421874999935051953/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t67=Go.math_q0R8.addr(2);  // _t67 = &q0R8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t67.store(11.76820646822527); // *t67 = 117682064682252693899/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t68=Go.math_q0R8.addr(3);  // _t68 = &q0R8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t68.store(557.6733802564019); // *t68 = 557673380256401856059/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t69=Go.math_q0R8.addr(4);  // _t69 = &q0R8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t69.store(8859.197207564686); // *t69 = 885919720756468632317/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t70=Go.math_q0R8.addr(5);  // _t70 = &q0R8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t70.store(37014.62677768878); // *t70 = 370146267776887834771/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t71=Go.math_q0S8.addr(0);  // _t71 = &q0S8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t71.store(163.77602689568982); // *t71 = 81888013447844912207/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t72=Go.math_q0S8.addr(1);  // _t72 = &q0S8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t72.store(8098.344946564498); // *t72 = 202458623664112451479/25000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t73=Go.math_q0S8.addr(2);  // _t73 = &q0S8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t73.store(142538.29141912048); // *t73 = 35634572854780119087/250000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t74=Go.math_q0S8.addr(3);  // _t74 = &q0S8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t74.store(803309.2571195144); // *t74 = 160661851423902879469/200000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t75=Go.math_q0S8.addr(4);  // _t75 = &q0S8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t75.store(840501.5798190605); // *t75 = 420250789909530256409/500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t76=Go.math_q0S8.addr(5);  // _t76 = &q0S8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t76.store((-343899.2935378666)); // *t76 = -13755971741514664609/40000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t77=Go.math_q0R5.addr(0);  // _t77 = &q0R5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t77.store(1.8408596359451553e-11); // *t77 = 184085963594515531381/10000000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t78=Go.math_q0R5.addr(1);  // _t78 = &q0R5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t78.store(0.07324217666126848); // *t78 = 91552720826585595737/1250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t79=Go.math_q0R5.addr(2);  // _t79 = &q0R5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t79.store(5.8356350896205695); // *t79 = 583563508962056953777/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t80=Go.math_q0R5.addr(3);  // _t80 = &q0R5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t80.store(135.11157728644983); // *t80 = 135111577286449829671/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t81=Go.math_q0R5.addr(4);  // _t81 = &q0R5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t81.store(1027.243765961641); // *t81 = 12840547074520512183/12500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t82=Go.math_q0R5.addr(5);  // _t82 = &q0R5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t82.store(1989.9778586460538); // *t82 = 198997785864605384631/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t83=Go.math_q0S5.addr(0);  // _t83 = &q0S5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t83.store(82.77661022365378); // *t83 = 827766102236537761883/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t84=Go.math_q0S5.addr(1);  // _t84 = &q0S5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t84.store(2077.81416421393); // *t84 = 6493169263168530847/3125000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t85=Go.math_q0S5.addr(2);  // _t85 = &q0S5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t85.store(18847.28877857181); // *t85 = 18847288778571808507/1000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t86=Go.math_q0S5.addr(3);  // _t86 = &q0S5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t86.store(56751.11228949473); // *t86 = 567511122894947329769/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t87=Go.math_q0S5.addr(4);  // _t87 = &q0S5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t87.store(35976.75384251145); // *t87 = 71953507685022894293/2000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t88=Go.math_q0S5.addr(5);  // _t88 = &q0S5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t88.store((-5354.342756019448)); // *t88 = -535434275601944773371/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t89=Go.math_q0R3.addr(0);  // _t89 = &q0R3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t89.store(4.377410140897386e-09); // *t89 = 218870507044869310453/50000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t90=Go.math_q0R3.addr(1);  // _t90 = &q0R3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t90.store(0.07324111800429114); // *t90 = 732411180042911447163/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t91=Go.math_q0R3.addr(2);  // _t91 = &q0R3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t91.store(3.344231375161707); // *t91 = 334423137516170720929/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t92=Go.math_q0R3.addr(3);  // _t92 = &q0R3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t92.store(42.621844074541265); // *t92 = 426218440745412650017/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t93=Go.math_q0R3.addr(4);  // _t93 = &q0R3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t93.store(170.8080913405656); // *t93 = 170808091340565596283/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t94=Go.math_q0R3.addr(5);  // _t94 = &q0R3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t94.store(166.73394869665117); // *t94 = 6669357947866046743/40000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t95=Go.math_q0S3.addr(0);  // _t95 = &q0S3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t95.store(48.75887297245872); // *t95 = 487588729724587182091/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t96=Go.math_q0S3.addr(1);  // _t96 = &q0S3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t96.store(709.689221056606); // *t96 = 88711152632075751967/125000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t97=Go.math_q0S3.addr(2);  // _t97 = &q0S3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t97.store(3704.1482262011136); // *t97 = 185207411310055681497/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t98=Go.math_q0S3.addr(3);  // _t98 = &q0S3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t98.store(6460.425167525689); // *t98 = 323021258376284458791/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t99=Go.math_q0S3.addr(4);  // _t99 = &q0S3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t99.store(2516.3336892036896); // *t99 = 251633368920368957333/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t100=Go.math_q0S3.addr(5);  // _t100 = &q0S3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t100.store((-149.2474518361564)); // *t100 = -74623725918078193331/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t101=Go.math_q0R2.addr(0);  // _t101 = &q0R2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t101.store(1.5044444488698327e-07); // *t101 = 150444444886983272379/1000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t102=Go.math_q0R2.addr(1);  // _t102 = &q0R2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t102.store(0.07322342659630793); // *t102 = 11441160405673113723/156250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t103=Go.math_q0R2.addr(2);  // _t103 = &q0R2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t103.store(1.99819174093816); // *t103 = 6244349190431749963/3125000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t104=Go.math_q0R2.addr(3);  // _t104 = &q0R2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t104.store(14.495602934788574); // *t104 = 36239007336971433837/2500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t105=Go.math_q0R2.addr(4);  // _t105 = &q0R2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t105.store(31.666231750478154); // *t105 = 316662317504781540833/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t106=Go.math_q0R2.addr(5);  // _t106 = &q0R2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t106.store(16.252707571092927); // *t106 = 20315884463866158427/1250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t107=Go.math_q0S2.addr(0);  // _t107 = &q0S2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t107.store(30.36558483552192); // *t107 = 151827924177609592249/5000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t108=Go.math_q0S2.addr(1);  // _t108 = &q0S2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t108.store(269.34811860804984); // *t108 = 16834257413003115289/62500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t109=Go.math_q0S2.addr(2);  // _t109 = &q0S2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t109.store(844.7837575953201); // *t109 = 211195939398830034861/250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t110=Go.math_q0S2.addr(3);  // _t110 = &q0S2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t110.store(882.9358451124886); // *t110 = 55183490319530534407/62500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t111=Go.math_q0S2.addr(4);  // _t111 = &q0S2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t111.store(212.66638851179883); // *t111 = 212666388511798828631/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t112=Go.math_q0S2.addr(5);  // _t112 = &q0S2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t112.store((-5.3109549388266695)); // *t112 = -531095493882666946917/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t113=Go.math_p1R8.addr(0);  // _t113 = &p1R8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t113.store(0); // *t113 = 0:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t114=Go.math_p1R8.addr(1);  // _t114 = &p1R8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t114.store(0.11718749999998865); // *t114 = 11718749999998864797/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t115=Go.math_p1R8.addr(2);  // _t115 = &p1R8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t115.store(13.239480659307358); // *t115 = 132394806593073575129/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t116=Go.math_p1R8.addr(3);  // _t116 = &p1R8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t116.store(412.05185430737856); // *t116 = 16482074172295142489/40000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t117=Go.math_p1R8.addr(4);  // _t117 = &p1R8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t117.store(3874.7453891396053); // *t117 = 387474538913960532227/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t118=Go.math_p1R8.addr(5);  // _t118 = &p1R8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t118.store(7914.479540318917); // *t118 = 395723977015945865787/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t119=Go.math_p1S8.addr(0);  // _t119 = &p1S8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t119.store(114.20737037567841); // *t119 = 28551842593919602109/250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t120=Go.math_p1S8.addr(1);  // _t120 = &p1S8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t120.store(3650.9308342085346); // *t120 = 182546541710426731697/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t121=Go.math_p1S8.addr(2);  // _t121 = &p1S8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t121.store(36956.206026903346); // *t121 = 73912412053806692711/2000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t122=Go.math_p1S8.addr(3);  // _t122 = &p1S8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t122.store(97602.79359349508); // *t122 = 976027935934950801311/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t123=Go.math_p1S8.addr(4);  // _t123 = &p1S8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t123.store(30804.27206278888); // *t123 = 154021360313944405789/5000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t124=Go.math_p1R5.addr(0);  // _t124 = &p1R5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t124.store(1.3199051955624352e-11); // *t124 = 131990519556243522749/10000000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t125=Go.math_p1R5.addr(1);  // _t125 = &p1R5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t125.store(0.1171874931906141); // *t125 = 58593746595307048819/500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t126=Go.math_p1R5.addr(2);  // _t126 = &p1R5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t126.store(6.802751278684329); // *t126 = 85034390983554108967/12500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t127=Go.math_p1R5.addr(3);  // _t127 = &p1R5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t127.store(108.30818299018911); // *t127 = 108308182990189109773/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t128=Go.math_p1R5.addr(4);  // _t128 = &p1R5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t128.store(517.6361395331998); // *t128 = 103527227906639950561/200000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
}// end SubFn1
private inline  function SubFn2():Void {
var _t129:Pointer;
var _t130:Pointer;
var _t131:Pointer;
var _t132:Pointer;
var _t133:Pointer;
var _t134:Pointer;
var _t135:Pointer;
var _t136:Pointer;
var _t137:Pointer;
var _t138:Pointer;
var _t139:Pointer;
var _t140:Pointer;
var _t141:Pointer;
var _t142:Pointer;
var _t143:Pointer;
var _t144:Pointer;
var _t145:Pointer;
var _t146:Pointer;
var _t147:Pointer;
var _t148:Pointer;
var _t149:Pointer;
var _t150:Pointer;
var _t151:Pointer;
var _t152:Pointer;
var _t153:Pointer;
var _t154:Pointer;
var _t155:Pointer;
var _t156:Pointer;
var _t157:Pointer;
var _t158:Pointer;
var _t159:Pointer;
var _t160:Pointer;
var _t161:Pointer;
var _t162:Pointer;
var _t163:Pointer;
var _t164:Pointer;
var _t165:Pointer;
var _t166:Pointer;
var _t167:Pointer;
var _t168:Pointer;
var _t169:Pointer;
var _t170:Pointer;
var _t171:Pointer;
var _t172:Pointer;
var _t173:Pointer;
var _t174:Pointer;
var _t175:Pointer;
var _t176:Pointer;
var _t177:Pointer;
var _t178:Pointer;
var _t179:Pointer;
var _t180:Pointer;
var _t181:Pointer;
var _t182:Pointer;
var _t183:Pointer;
var _t184:Pointer;
var _t185:Pointer;
var _t186:Pointer;
var _t187:Pointer;
var _t188:Pointer;
var _t189:Pointer;
var _t190:Pointer;
var _t191:Pointer;
var _t192:Pointer;
var _t193:Pointer;
var _t194:Pointer;
var _t195:Pointer;
var _t196:Pointer;
var _t197:Pointer;
var _t198:Pointer;
var _t199:Pointer;
var _t200:Pointer;
var _t201:Pointer;
var _t202:Pointer;
var _t203:Pointer;
var _t204:Pointer;
var _t205:Pointer;
var _t206:Pointer;
var _t207:Pointer;
var _t208:Pointer;
var _t209:Pointer;
var _t210:Pointer;
var _t211:Pointer;
var _t212:Pointer;
var _t213:Pointer;
var _t214:Pointer;
var _t215:Pointer;
var _t216:Pointer;
var _t217:Pointer;
var _t218:Pointer;
var _t219:Pointer;
var _t220:Pointer;
var _t221:Pointer;
var _t222:Pointer;
var _t223:Pointer;
var _t224:Pointer;
var _t225:Pointer;
var _t226:Pointer;
var _t227:Pointer;
var _t228:Pointer;
var _t229:Pointer;
var _t230:Pointer;
var _t231:Pointer;
var _t232:Pointer;
var _t233:Pointer;
var _t234:Pointer;
var _t235:Pointer;
var _t236:Pointer;
var _t237:Pointer;
var _t238:Pointer;
var _t239:Pointer;
var _t240:Pointer;
var _t241:Pointer;
var _t242:Pointer;
var _t243:Pointer;
var _t244:Pointer;
var _t245:Pointer;
var _t246:Pointer;
var _t247:Pointer;
var _t248:Pointer;
var _t249:Pointer;
var _t250:Pointer;
var _t251:Pointer;
var _t252:Pointer;
var _t253:Pointer;
var _t254:Pointer;
var _t255:Pointer;
var _t256:Pointer;
_t129=Go.math_p1R5.addr(5);  // _t129 = &p1R5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t129.store(528.7152013633375); // *t129 = 528715201363337541807/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t130=Go.math_p1S5.addr(0);  // _t130 = &p1S5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t130.store(59.28059872211313); // *t130 = 592805987221131331921/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t131=Go.math_p1S5.addr(1);  // _t131 = &p1S5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t131.store(991.4014187336144); // *t131 = 991401418733614377743/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t132=Go.math_p1S5.addr(2);  // _t132 = &p1S5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t132.store(5353.26695291488); // *t132 = 535326695291487976647/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t133=Go.math_p1S5.addr(3);  // _t133 = &p1S5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t133.store(7844.690317495512); // *t133 = 784469031749551231769/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t134=Go.math_p1S5.addr(4);  // _t134 = &p1S5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t134.store(1504.0468881036106); // *t134 = 150404688810361062679/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t135=Go.math_p1R3.addr(0);  // _t135 = &p1R3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t135.store(3.025039161373736e-09); // *t135 = 37812989517171702253/12500000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t136=Go.math_p1R3.addr(1);  // _t136 = &p1R3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t136.store(0.11718686556725359); // *t136 = 117186865567253592491/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t137=Go.math_p1R3.addr(2);  // _t137 = &p1R3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t137.store(3.9329775003331564); // *t137 = 7865955000666312813/2000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t138=Go.math_p1R3.addr(3);  // _t138 = &p1R3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t138.store(35.11940355916369); // *t138 = 2743703403059663537/78125000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t139=Go.math_p1R3.addr(4);  // _t139 = &p1R3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t139.store(91.05501107507813); // *t139 = 455275055375390635959/5000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t140=Go.math_p1R3.addr(5);  // _t140 = &p1R3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t140.store(48.55906851973649); // *t140 = 97118137039472983929/2000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t141=Go.math_p1S3.addr(0);  // _t141 = &p1S3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t141.store(34.79130950012515); // *t141 = 347913095001251519989/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t142=Go.math_p1S3.addr(1);  // _t142 = &p1S3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t142.store(336.76245874782575); // *t142 = 336762458747825746741/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t143=Go.math_p1S3.addr(2);  // _t143 = &p1S3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t143.store(1046.8713997577513); // *t143 = 104687139975775130551/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t144=Go.math_p1S3.addr(3);  // _t144 = &p1S3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t144.store(890.8113463982564); // *t144 = 445405673199128216311/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t145=Go.math_p1S3.addr(4);  // _t145 = &p1S3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t145.store(103.78793243963928); // *t145 = 1621686444369363711/15625000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t146=Go.math_p1R2.addr(0);  // _t146 = &p1R2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t146.store(1.0771083010687374e-07); // *t146 = 53855415053436871541/500000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t147=Go.math_p1R2.addr(1);  // _t147 = &p1R2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t147.store(0.11717621946268335); // *t147 = 58588109731341674047/500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t148=Go.math_p1R2.addr(2);  // _t148 = &p1R2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t148.store(2.368514966676088); // *t148 = 118425748333804392587/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t149=Go.math_p1R2.addr(3);  // _t149 = &p1R2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t149.store(12.242610914826123); // *t149 = 122426109148261232917/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t150=Go.math_p1R2.addr(4);  // _t150 = &p1R2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t150.store(17.693971127168773); // *t150 = 17693971127168772739/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t151=Go.math_p1R2.addr(5);  // _t151 = &p1R2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t151.store(5.073523125888185); // *t151 = 2029409250355273997/400000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t152=Go.math_p1S2.addr(0);  // _t152 = &p1S2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t152.store(21.43648593638214); // *t152 = 13397803710238838093/625000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t153=Go.math_p1S2.addr(1);  // _t153 = &p1S2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t153.store(125.29022716840275); // *t153 = 12529022716840275109/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t154=Go.math_p1S2.addr(2);  // _t154 = &p1S2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t154.store(232.2764690571628); // *t154 = 232276469057162813669/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t155=Go.math_p1S2.addr(3);  // _t155 = &p1S2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t155.store(117.6793732871471); // *t155 = 3677480415223346899/31250000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t156=Go.math_p1S2.addr(4);  // _t156 = &p1S2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t156.store(8.364638933716183); // *t156 = 104557986671452285421/12500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t157=Go.math_q1R8.addr(0);  // _t157 = &q1R8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t157.store(0); // *t157 = 0:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t158=Go.math_q1R8.addr(1);  // _t158 = &q1R8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t158.store((-0.10253906249999271)); // *t158 = -102539062499992714161/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t159=Go.math_q1R8.addr(2);  // _t159 = &q1R8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t159.store((-16.271753454459)); // *t159 = -10169845909036874243/625000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t160=Go.math_q1R8.addr(3);  // _t160 = &q1R8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t160.store((-759.6017225139501)); // *t160 = -94950215314243763487/125000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t161=Go.math_q1R8.addr(4);  // _t161 = &q1R8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t161.store((-11849.806670242959)); // *t161 = -118498066702429587167/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t162=Go.math_q1R8.addr(5);  // _t162 = &q1R8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t162.store((-48438.512428575035)); // *t162 = -48438512428575035301/1000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t163=Go.math_q1S8.addr(0);  // _t163 = &q1S8[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t163.store(161.3953697007229); // *t163 = 40348842425180727389/250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t164=Go.math_q1S8.addr(1);  // _t164 = &q1S8[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t164.store(7825.385999233485); // *t164 = 782538599923348465381/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t165=Go.math_q1S8.addr(2);  // _t165 = &q1S8[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t165.store(133875.33628724958); // *t165 = 133875336287249578163/1000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t166=Go.math_q1S8.addr(3);  // _t166 = &q1S8[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t166.store(719657.7236832409); // *t166 = 719657723683240939863/1000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t167=Go.math_q1S8.addr(4);  // _t167 = &q1S8[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t167.store(666601.2326177764); // *t167 = 20831288519305511727/31250000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t168=Go.math_q1S8.addr(5);  // _t168 = &q1S8[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t168.store((-294490.26430383464)); // *t168 = -58898052860766928643/200000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t169=Go.math_q1R5.addr(0);  // _t169 = &q1R5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t169.store((-2.089799311417641e-11)); // *t169 = -208979931141764104297/10000000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t170=Go.math_q1R5.addr(1);  // _t170 = &q1R5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t170.store((-0.10253905024137543)); // *t170 = -102539050241375426231/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t171=Go.math_q1R5.addr(2);  // _t171 = &q1R5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t171.store((-8.05644828123936)); // *t171 = -10070560351549200373/1250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t172=Go.math_q1R5.addr(3);  // _t172 = &q1R5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t172.store((-183.66960747488838)); // *t172 = -183669607474888380239/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t173=Go.math_q1R5.addr(4);  // _t173 = &q1R5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t173.store((-1373.1937606550816)); // *t173 = -27463875213101632653/20000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t174=Go.math_q1R5.addr(5);  // _t174 = &q1R5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t174.store((-2612.4444045321566)); // *t174 = -261244440453215656817/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t175=Go.math_q1S5.addr(0);  // _t175 = &q1S5[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t175.store(81.27655013843358); // *t175 = 812765501384335777857/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t176=Go.math_q1S5.addr(1);  // _t176 = &q1S5[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t176.store(1991.7987346048596); // *t176 = 99589936730242982321/50000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t177=Go.math_q1S5.addr(2);  // _t177 = &q1S5[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t177.store(17468.48519249089); // *t177 = 174684851924908907677/10000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t178=Go.math_q1S5.addr(3);  // _t178 = &q1S5[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t178.store(49851.42709103523); // *t178 = 124628567727588069829/2500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t179=Go.math_q1S5.addr(4);  // _t179 = &q1S5[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t179.store(27948.075163891812); // *t179 = 13974037581945905913/500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t180=Go.math_q1S5.addr(5);  // _t180 = &q1S5[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t180.store((-4719.183547951285)); // *t180 = -471918354795128470869/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t181=Go.math_q1R3.addr(0);  // _t181 = &q1R3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t181.store((-5.078312264617666e-09)); // *t181 = -507831226461766561369/100000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t182=Go.math_q1R3.addr(1);  // _t182 = &q1R3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t182.store((-0.10253782982083709)); // *t182 = -20507565964167417949/200000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t183=Go.math_q1R3.addr(2);  // _t183 = &q1R3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t183.store((-4.610115811394734)); // *t183 = -461011581139473403113/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t184=Go.math_q1R3.addr(3);  // _t184 = &q1R3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t184.store((-57.847221656278364)); // *t184 = -144618054140695910803/2500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t185=Go.math_q1R3.addr(4);  // _t185 = &q1R3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t185.store((-228.2445407376317)); // *t185 = -114122270368815847519/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t186=Go.math_q1R3.addr(5);  // _t186 = &q1R3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t186.store((-219.21012847890933)); // *t186 = -109605064239454662811/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t187=Go.math_q1S3.addr(0);  // _t187 = &q1S3[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t187.store(47.66515503237295); // *t187 = 476651550323729509273/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t188=Go.math_q1S3.addr(1);  // _t188 = &q1S3[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t188.store(673.8651126766997); // *t188 = 336932556338349854741/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t189=Go.math_q1S3.addr(2);  // _t189 = &q1S3[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t189.store(3380.1528667952634); // *t189 = 67603057335905268701/20000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t190=Go.math_q1S3.addr(3);  // _t190 = &q1S3[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t190.store(5547.729097207228); // *t190 = 554772909720722782367/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t191=Go.math_q1S3.addr(4);  // _t191 = &q1S3[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t191.store(1903.119193388108); // *t191 = 190311919338810798763/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t192=Go.math_q1S3.addr(5);  // _t192 = &q1S3[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t192.store((-135.20119144430734)); // *t192 = -135201191444307340817/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t193=Go.math_q1R2.addr(0);  // _t193 = &q1R2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t193.store((-1.7838172751095887e-07)); // *t193 = -44595431877739716393/250000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t194=Go.math_q1R2.addr(1);  // _t194 = &q1R2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t194.store((-0.10251704260798555)); // *t194 = -5125852130399277673/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t195=Go.math_q1R2.addr(2);  // _t195 = &q1R2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t195.store((-2.7522056827818746)); // *t195 = -3440257103477343259/1250000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t196=Go.math_q1R2.addr(3);  // _t196 = &q1R2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t196.store((-19.663616264370372)); // *t196 = -196636162643703720221/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t197=Go.math_q1R2.addr(4);  // _t197 = &q1R2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t197.store((-42.32531333728305)); // *t197 = -423253133372830490089/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t198=Go.math_q1R2.addr(5);  // _t198 = &q1R2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t198.store((-21.371921170370406)); // *t198 = -213719211703704061733/10000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t199=Go.math_q1S2.addr(0);  // _t199 = &q1S2[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t199.store(29.533362906052385); // *t199 = 73833407265130963637/2500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t200=Go.math_q1S2.addr(1);  // _t200 = &q1S2[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t200.store(252.98154998219053); // *t200 = 15811346873886908071/62500000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t201=Go.math_q1S2.addr(2);  // _t201 = &q1S2[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t201.store(757.5028348686454); // *t201 = 94687854358580679559/125000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t202=Go.math_q1S2.addr(3);  // _t202 = &q1S2[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t202.store(739.3932053204672); // *t202 = 92424150665058405707/125000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t203=Go.math_q1S2.addr(4);  // _t203 = &q1S2[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t203.store(155.94900333666612); // *t203 = 155949003336666123687/1000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t204=Go.math_q1S2.addr(5);  // _t204 = &q1S2[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t204.store((-4.959498988226282)); // *t204 = -495949898822628210127/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t205=Go.math__lgamA.addr(0);  // _t205 = &_lgamA[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t205.store(0.07721566490153287); // *t205 = 386078324507664327747/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t206=Go.math__lgamA.addr(1);  // _t206 = &_lgamA[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t206.store(0.3224670334241136); // *t206 = 322467033424113591611/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t207=Go.math__lgamA.addr(2);  // _t207 = &_lgamA[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t207.store(0.06735230105312927); // *t207 = 21047594079102896307/312500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t208=Go.math__lgamA.addr(3);  // _t208 = &_lgamA[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t208.store(0.020580808432516733); // *t208 = 102904042162583666403/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t209=Go.math__lgamA.addr(4);  // _t209 = &_lgamA[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t209.store(0.007385550860814029); // *t209 = 738555086081402883957/100000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t210=Go.math__lgamA.addr(5);  // _t210 = &_lgamA[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t210.store(0.0028905138367341563); // *t210 = 289051383673415629091/100000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t211=Go.math__lgamA.addr(6);  // _t211 = &_lgamA[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t211.store(0.0011927076318336207); // *t211 = 23854152636672413569/20000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t212=Go.math__lgamA.addr(7);  // _t212 = &_lgamA[7:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t212.store(0.0005100697921535113); // *t212 = 15939681004797229269/31250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t213=Go.math__lgamA.addr(8);  // _t213 = &_lgamA[8:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t213.store(0.00022086279071390839); // *t213 = 220862790713908385557/1000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t214=Go.math__lgamA.addr(9);  // _t214 = &_lgamA[9:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t214.store(0.00010801156724758394); // *t214 = 54005783623791969977/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t215=Go.math__lgamA.addr(10);  // _t215 = &_lgamA[10:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t215.store(2.5214456545125733e-05); // *t215 = 252144565451257326939/10000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t216=Go.math__lgamA.addr(11);  // _t216 = &_lgamA[11:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t216.store(4.4864094961891516e-05); // *t216 = 8972818992378303203/200000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t217=Go.math__lgamR.addr(0);  // _t217 = &_lgamR[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t217.store(1); // *t217 = 1:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t218=Go.math__lgamR.addr(1);  // _t218 = &_lgamR[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t218.store(1.3920053346762105); // *t218 = 69600266733810522979/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t219=Go.math__lgamR.addr(2);  // _t219 = &_lgamR[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t219.store(0.7219355475671381); // *t219 = 28877421902685522781/40000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t220=Go.math__lgamR.addr(3);  // _t220 = &_lgamR[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t220.store(0.17193386563280308); // *t220 = 171933865632803078993/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t221=Go.math__lgamR.addr(4);  // _t221 = &_lgamR[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t221.store(0.01864591917156529); // *t221 = 5826849741114153167/312500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t222=Go.math__lgamR.addr(5);  // _t222 = &_lgamR[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t222.store(0.0007779424963818936); // *t222 = 388971248190946798217/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t223=Go.math__lgamR.addr(6);  // _t223 = &_lgamR[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t223.store(7.326684307446256e-06); // *t223 = 732668430744625636189/100000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t224=Go.math__lgamS.addr(0);  // _t224 = &_lgamS[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t224.store((-0.07721566490153287)); // *t224 = -386078324507664327747/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t225=Go.math__lgamS.addr(1);  // _t225 = &_lgamS[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t225.store(0.21498241596060885); // *t225 = 214982415960608852501/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t226=Go.math__lgamS.addr(2);  // _t226 = &_lgamS[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t226.store(0.325778796408931); // *t226 = 325778796408930981787/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t227=Go.math__lgamS.addr(3);  // _t227 = &_lgamS[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t227.store(0.14635047265246445); // *t227 = 29270094530492890561/200000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t228=Go.math__lgamS.addr(4);  // _t228 = &_lgamS[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t228.store(0.02664227030336386); // *t228 = 6660567575840965239/250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t229=Go.math__lgamS.addr(5);  // _t229 = &_lgamS[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t229.store(0.0018402845140733772); // *t229 = 46007112851834428913/25000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t230=Go.math__lgamS.addr(6);  // _t230 = &_lgamS[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t230.store(3.194753265841009e-05); // *t230 = 319475326584100867617/10000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t231=Go.math__lgamT.addr(0);  // _t231 = &_lgamT[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t231.store(0.48383612272381005); // *t231 = 241918061361905023521/500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t232=Go.math__lgamT.addr(1);  // _t232 = &_lgamT[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t232.store((-0.1475877229945939)); // *t232 = -18448465374324238969/125000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t233=Go.math__lgamT.addr(2);  // _t233 = &_lgamT[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t233.store(0.06462494023913339); // *t233 = 323124701195666927389/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t234=Go.math__lgamT.addr(3);  // _t234 = &_lgamT[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t234.store((-0.032788541075985965)); // *t234 = -65577082151971929913/2000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t235=Go.math__lgamT.addr(4);  // _t235 = &_lgamT[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t235.store(0.01797067508118204); // *t235 = 89853375405910193563/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t236=Go.math__lgamT.addr(5);  // _t236 = &_lgamT[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t236.store((-0.010314224129834144)); // *t236 = -2062844825966828749/200000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t237=Go.math__lgamT.addr(6);  // _t237 = &_lgamT[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t237.store(0.006100538702462913); // *t237 = 122010774049258266527/20000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t238=Go.math__lgamT.addr(7);  // _t238 = &_lgamT[7:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t238.store((-0.0036845201678113826)); // *t238 = -9211300419528456419/2500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t239=Go.math__lgamT.addr(8);  // _t239 = &_lgamT[8:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t239.store(0.0022596478090061247); // *t239 = 903859123602449889/400000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t240=Go.math__lgamT.addr(9);  // _t240 = &_lgamT[9:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t240.store((-0.0014034646998923284)); // *t240 = -140346469989232843813/100000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t241=Go.math__lgamT.addr(10);  // _t241 = &_lgamT[10:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t241.store(0.000881081882437654); // *t241 = 440540941218827005691/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t242=Go.math__lgamT.addr(11);  // _t242 = &_lgamT[11:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t242.store((-0.0005385953053567405)); // *t242 = -107719061071348109343/200000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t243=Go.math__lgamT.addr(12);  // _t243 = &_lgamT[12:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t243.store(0.00031563207090362595); // *t243 = 315632070903625950361/1000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t244=Go.math__lgamT.addr(13);  // _t244 = &_lgamT[13:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t244.store((-0.00031275416837512086)); // *t244 = -156377084187560430259/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t245=Go.math__lgamT.addr(14);  // _t245 = &_lgamT[14:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t245.store(0.0003355291926355191); // *t245 = 335529192635519073543/1000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t246=Go.math__lgamU.addr(0);  // _t246 = &_lgamU[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t246.store((-0.07721566490153287)); // *t246 = -386078324507664327747/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t247=Go.math__lgamU.addr(1);  // _t247 = &_lgamU[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t247.store(0.6328270640250934); // *t247 = 632827064025093366517/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t248=Go.math__lgamU.addr(2);  // _t248 = &_lgamU[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t248.store(1.4549225013723477); // *t248 = 145492250137234768737/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t249=Go.math__lgamU.addr(3);  // _t249 = &_lgamU[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t249.store(0.9777175279633727); // *t249 = 977717527963372745603/1000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t250=Go.math__lgamU.addr(4);  // _t250 = &_lgamU[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t250.store(0.22896372806469245); // *t250 = 57240932016173112773/250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t251=Go.math__lgamU.addr(5);  // _t251 = &_lgamU[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t251.store(0.013381091853678766); // *t251 = 133810918536787660377/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t252=Go.math__lgamV.addr(0);  // _t252 = &_lgamV[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t252.store(1); // *t252 = 1:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t253=Go.math__lgamV.addr(1);  // _t253 = &_lgamV[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t253.store(2.4559779371304113); // *t253 = 122798896856520567411/50000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t254=Go.math__lgamV.addr(2);  // _t254 = &_lgamV[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t254.store(2.128489763798934); // *t254 = 212848976379893395361/100000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t255=Go.math__lgamV.addr(3);  // _t255 = &_lgamV[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t255.store(0.7692851504566728); // *t255 = 30771406018266911353/40000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t256=Go.math__lgamV.addr(4);  // _t256 = &_lgamV[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t256.store(0.10422264559336913); // *t256 = 52111322796684567127/500000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t257=Go.math__lgamV.addr(5);  // _t257 = &_lgamV[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
}// end SubFn2
private inline  function SubFn3():Void {
var _t258:Pointer;
var _t259:Pointer;
var _t260:Pointer;
var _t261:Pointer;
var _t262:Pointer;
var _t263:Pointer;
var _t264:Pointer;
var _t265:Pointer;
var _t266:Pointer;
var _t267:Pointer;
var _t268:Pointer;
var _t269:Pointer;
var _t270:Pointer;
var _t271:Pointer;
var _t272:Pointer;
var _t273:Pointer;
var _t274:Pointer;
var _t275:Pointer;
var _t276:Pointer;
var _t277:Pointer;
var _t278:Pointer;
var _t279:Pointer;
var _t280:Pointer;
var _t281:Pointer;
var _t282:Pointer;
var _t283:Pointer;
var _t284:Pointer;
var _t285:Pointer;
var _t286:Pointer;
var _t287:Pointer;
var _t288:Pointer;
var _t289:Pointer;
var _t290:Pointer;
_t257.store(0.003217092422824239); // *t257 = 32170924228242391181/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t258=Go.math__lgamW.addr(0);  // _t258 = &_lgamW[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t258.store(0.4189385332046727); // *t258 = 104734633301168181263/250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t259=Go.math__lgamW.addr(1);  // _t259 = &_lgamW[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t259.store(0.08333333333333297); // *t259 = 833333333333329678849/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t260=Go.math__lgamW.addr(2);  // _t260 = &_lgamW[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t260.store((-0.0027777777772877554)); // *t260 = -27777777772877553647/10000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t261=Go.math__lgamW.addr(3);  // _t261 = &_lgamW[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t261.store(0.0007936505586430196); // *t261 = 1587301117286039117/2000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t262=Go.math__lgamW.addr(4);  // _t262 = &_lgamW[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t262.store((-0.00059518755745034)); // *t262 = -119037511490067992627/200000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t263=Go.math__lgamW.addr(5);  // _t263 = &_lgamW[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t263.store(0.0008363399189962821); // *t263 = 418169959498141069563/500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t264=Go.math__lgamW.addr(6);  // _t264 = &_lgamW[6:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t264.store((-0.0016309293409657527)); // *t264 = -163092934096575273989/100000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t265=Go.math__sin.addr(0);  // _t265 = &_sin[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t265.store(1.5896230157654656e-10); // *t265 = 7948115078827328403/50000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t266=Go.math__sin.addr(1);  // _t266 = &_sin[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t266.store((-2.5050747762857807e-08)); // *t266 = -125253738814289036433/5000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t267=Go.math__sin.addr(2);  // _t267 = &_sin[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t267.store(2.7557313621385722e-06); // *t267 = 275573136213857245213/100000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t268=Go.math__sin.addr(3);  // _t268 = &_sin[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t268.store((-0.0001984126982958954)); // *t268 = -49603174573973846499/250000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t269=Go.math__sin.addr(4);  // _t269 = &_sin[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t269.store(0.008333333333322118); // *t269 = 416666666666105929439/50000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t270=Go.math__sin.addr(5);  // _t270 = &_sin[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t270.store((-0.1666666666666663)); // *t270 = -33333333333333261459/200000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t271=Go.math__cos.addr(0);  // _t271 = &_cos[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t271.store((-1.1358536521387682e-11)); // *t271 = -1135853652138768173/100000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t272=Go.math__cos.addr(1);  // _t272 = &_cos[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t272.store(2.087570084197473e-09); // *t272 = 104378504209873658389/50000000000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t273=Go.math__cos.addr(2);  // _t273 = &_cos[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t273.store((-2.755731417929674e-07)); // *t273 = -17223321362060461757/62500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t274=Go.math__cos.addr(3);  // _t274 = &_cos[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t274.store(2.4801587288851704e-05); // *t274 = 62003968222129261337/2500000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t275=Go.math__cos.addr(4);  // _t275 = &_cos[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t275.store((-0.0013888888888873056)); // *t275 = -34722222222182641029/25000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t276=Go.math__cos.addr(5);  // _t276 = &_cos[5:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t276.store(0.041666666666666595); // *t276 = 208333333333332964609/5000000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t277=Go.math__tanP.addr(0);  // _t277 = &_tanP[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t277.store((-13093.693918138379)); // *t277 = -65468469590691888823/5000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t278=Go.math__tanP.addr(1);  // _t278 = &_tanP[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t278.store(1.1535166483858742e+06); // *t278 = 5767583241929370807/5000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t279=Go.math__tanP.addr(2);  // _t279 = &_tanP[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t279.store((-1.7956525197648488e+07)); // *t279 = -44891312994121219497/2500000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t280=Go.math__tanQ.addr(0);  // _t280 = &_tanQ[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t280.store(1); // *t280 = 1:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t281=Go.math__tanQ.addr(1);  // _t281 = &_tanQ[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t281.store(13681.296347069296); // *t281 = 68406481735346477339/5000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t282=Go.math__tanQ.addr(2);  // _t282 = &_tanQ[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t282.store((-1.3208923444021097e+06)); // *t282 = -132089234440210967447/100000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t283=Go.math__tanQ.addr(3);  // _t283 = &_tanQ[3:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t283.store(2.500838018233579e+07); // *t283 = 250083801823357915839/10000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t284=Go.math__tanQ.addr(4);  // _t284 = &_tanQ[4:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t284.store((-5.3869575592945464e+07)); // *t284 = -538695755929454629881/10000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t285=Go.math_tanhP.addr(0);  // _t285 = &tanhP[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t285.store((-0.9643991794250523)); // *t285 = -241099794856263059657/250000000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t286=Go.math_tanhP.addr(1);  // _t286 = &tanhP[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t286.store((-99.28772310019185)); // *t286 = -248219307750479646641/2500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t287=Go.math_tanhP.addr(2);  // _t287 = &tanhP[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t287.store((-1614.6876844170845)); // *t287 = -10091798027606777997/6250000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t288=Go.math_tanhQ.addr(0);  // _t288 = &tanhQ[0:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t288.store(112.81167849163293); // *t288 = 56405839245816465701/500000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t289=Go.math_tanhQ.addr(1);  // _t289 = &tanhQ[1:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t289.store(2235.4883906010045); // *t289 = 223548839060100448583/100000000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
_t290=Go.math_tanhQ.addr(2);  // _t290 = &tanhQ[2:int] *ssa.IndexAddr near /usr/local/go/src/pkg/math/j0.go:227:13 [POINTER]
_t290.store(4844.063053251255); // *t290 = 15137697041410171439/3125000000000000:float64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13
}// end SubFn3
private inline  function SubFn4():Void {
_Next=2; // jump 2.init.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:227:13
}// end SubFn4
}
#if js @:expose("Go_haxegoruntime_Rune2Raw") #end class Go_haxegoruntime_Rune2Raw extends StackFrameBasis implements StackFrame {  // langgoruntime.go:113:6
var p_oneRune:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_oneRune : Int) {
super(gr,5108,"Go_haxegoruntime_Rune2Raw");
this._bds=_bds;
this.p_oneRune=p_oneRune;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Slice=null;
var _t1:Pointer=null;
var _SF1:StackFrame;
var _t2:Slice=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_oneRune : Int) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_Rune2Raw(0,[], p_oneRune).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_oneRune : Int) : Slice {
var _sf=new Go_haxegoruntime_Rune2Raw(_gr,[], p_oneRune).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_oneRune : Int) : Go_haxegoruntime_Rune2Raw
{return new Go_haxegoruntime_Rune2Raw(gr,_bds, p_oneRune);
}
public function run():Go_haxegoruntime_Rune2Raw {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5108,0);
this.SubFn0();
this.setPH(5111);
_SF1=Go_haxegoruntime_Runes2Raw.call(this._goroutine,[],_t0);
_Next = -1;
return this;
case -1:
this.setLatest(5111,-1);
_t2=_SF1.res();
 // _t2 = Runes2Raw(t0) *ssa.Call @ langgoruntime.go:116:18
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ langgoruntime.go:116:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Pointer;
this.setPH(5109);
_t0=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0...1) _v[_i]=0; _v;}),0,1); // _t0 = make []rune 1:int 1:int *ssa.MakeSlice @ langgoruntime.go:114:11
this.setPH(5110);
if((0<0)||(0>=_t0.len())) Scheduler.ioor(); // _t1 = &t0[0:int] *ssa.IndexAddr @ langgoruntime.go:115:3 [POINTER]
_t1=_t0.addr(0);  // _t1 = &t0[0:int] *ssa.IndexAddr @ langgoruntime.go:115:3 [POINTER]
_t1.store(p_oneRune); // *t1 = oneRune *ssa.Store near langgoruntime.go:115:3
}// end SubFn0
}
#if js @:expose("Go_math_Float32frombits") #end class Go_math_Float32frombits extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/unsafe.go:14:6
var p_b:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_b : Int) {
super(gr,4988,"Go_math_Float32frombits");
this._bds=_bds;
this.p_b=p_b;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:UnsafePointer=null;
var _t2:Pointer=null;
var _t3:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_b : Int) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Float32frombits(0,[], p_b).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_b : Int) : Float {
var _sf=new Go_math_Float32frombits(_gr,[], p_b).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_b : Int) : Go_math_Float32frombits
{return new Go_math_Float32frombits(gr,_bds, p_b);
}
public function run():Go_math_Float32frombits {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4988,0);
this.SubFn0();
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/unsafe.go:14:42

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:UnsafePointer;
var _t2:Pointer;
_t0=new Pointer(0); // _t0 = new uint32 (b) *ssa.Alloc @ /usr/local/go/src/pkg/math/unsafe.go:14:22
_t0.store(p_b); // *t0 = b *ssa.Store near /usr/local/go/src/pkg/math/unsafe.go:14:22
_t1=new UnsafePointer(_t0); // _t1 = convert unsafe.Pointer <- *uint32 (t0) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:14:75
_t2=cast(_t1,Pointer); // _t2 = convert *float32 <- unsafe.Pointer (t1) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:14:60
_t3=_t2.load(); // _t3 = *t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/unsafe.go:14:49
}// end SubFn0
}
#if js @:expose("Go_utf8_DecodeLastRuneInString") #end class Go_utf8_DecodeLastRuneInString extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:276:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5520,"Go_utf8_DecodeLastRuneInString");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int};
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Int=0;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Int=0;
var _t7:Bool=false;
var _t8:Int=0;
var _t9:Int=0;
var _t10:Int=0;
var _SF1:StackFrame;
var _t11:Bool=false;
var _t12:Bool=false;
var _t13:Int=0;
var _t14:Bool=false;
var _t15:Int=0;
var _t16:Int=0;
var _t17:String="";
var _SF2:StackFrame;
var _t18:{r0:Int,r1:Int}=null;
var _t19:Int=0;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : {r0:Int, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_DecodeLastRuneInString(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : {r0:Int, r1:Int} {
var _sf=new Go_utf8_DecodeLastRuneInString(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_DecodeLastRuneInString
{return new Go_utf8_DecodeLastRuneInString(gr,_bds, p_s);
}
public function run():Go_utf8_DecodeLastRuneInString {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5520,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(5520,1);
this.setPH(5523);
_res= {r0:65533,r1:0};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 0:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:279:3

case 2: // if.done
this.setLatest(5523,2);
this.SubFn1();
_Phi=2;
case 3: // if.then
this.setLatest(5523,3);
this.setPH(5528);
_res= {r0:_t4,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4, 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:284:3

case 4: // if.done
this.setLatest(5528,4);
this.SubFn2();
_Phi=4;
case 5: // if.then
this.setLatest(5528,5);
this.SubFn3();
_Phi=5;
case 6: // if.done
this.setLatest(5528,6);
this.setPH(5533);
_t8=((_Phi==4)?_t6:(_Phi==5)?0:0); // _t8 = phi [4.if.done: t6, 5.if.then: 0:int] #lim *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:289:2
this.SubFn4();
_Phi=6;
case 7: // for.body
this.setLatest(5533,7);
this.SubFn5();
this.setPH(5538);
_SF1=Go_utf8_RuneStart.call(this._goroutine,[],_t10);
_Next = -1;
return this;
case -1:
this.setLatest(5538,-1);
_t11=_SF1.res();
 // _t11 = RuneStart(t10) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:294:15
this.SubFn6();
_Phi=7;
case 8: // for.done
this.setLatest(5538,8);
this.SubFn7();
_Phi=8;
case 9: // for.loop
this.setLatest(5538,9);
this.setPH(5525);
_t13=((_Phi==6)?_t9:(_Phi==10)?_t15:0); // _t13 = phi [6.if.done: t9, 10.if.done: t15] #start *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:281:2
this.SubFn8();
_Phi=9;
case 10: // if.done
this.setLatest(5525,10);
this.SubFn9();
_Phi=10;
case 11: // if.then
this.setLatest(5525,11);
this.SubFn10();
_Phi=11;
case 12: // if.done
this.setLatest(5525,12);
_t16=((_Phi==8)?_t13:(_Phi==11)?0:0); // _t16 = phi [8.for.done: t13, 11.if.then: 0:int] #start *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:281:2
this.SubFn11();
this.setPH(5545);
_SF2=Go_utf8_DecodeRuneInString.call(this._goroutine,[],_t17);
_Next = -2;
return this;
case -2:
this.setLatest(5545,-2);
_t18=_SF2.res();
 // _t18 = DecodeRuneInString(t17) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:301:30
this.SubFn12();
_Phi=12;
case 13: // if.then
this.setLatest(5545,13);
this.setPH(5547);
_res= {r0:65533,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:303:3

case 14: // if.done
this.setLatest(5547,14);
this.setPH(5549);
_res= {r0:_t19,r1:_t20};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19, t20 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:305:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(5521);
_t0=Force.toUTF8length(this._goroutine,p_s); // _t0 = len(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:277:12
this.setPH(5522);
_t1=(_t0==0); // _t1 = t0 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:278:9
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:278:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Int;
var _t5:Bool;
this.setPH(5525);
_t2=(_t0-1); // _t2 = t0 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:281:15
this.setPH(5526);
_t3=Force.toUTF8slice(this._goroutine,p_s).getAt(_t2); // _t3 = s[t2] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:282:12
_t4=_t3; // _t4 = convert rune <- uint8 (t3) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:282:10
this.setPH(5527);
_t5=(_t4<128); // _t5 = t4 < 128:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:283:7
_Next=_t5 ? 3 : 4; // if t5 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:283:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t7:Bool;
this.setPH(5533);
_t6=(_t0-4); // _t6 = t0 - 4:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:289:13
this.setPH(5534);
_t7=(_t6<0); // _t7 = t6 < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:290:9
_Next=_t7 ? 5 : 6; // if t7 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:290:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=6; // jump 6.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:290:9
}// end SubFn3
private inline  function SubFn4():Void {
_t9=(_t2-1); // _t9 = t2 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:290:9
_Next=9; // jump 9.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:290:9
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(5538);
_t10=Force.toUTF8slice(this._goroutine,p_s).getAt(_t13); // _t10 = s[t13] *ssa.Lookup @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:294:17
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t11 ? 8 : 10; // if t11 goto 8.for.done else 10.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:294:17
}// end SubFn6
private inline  function SubFn7():Void {
var _t12:Bool;
this.setPH(5542);
_t12=(_t13<0); // _t12 = t13 < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:298:11
_Next=_t12 ? 11 : 12; // if t12 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:298:11
}// end SubFn7
private inline  function SubFn8():Void {
var _t14:Bool;
this.setPH(5537);
_t14=(_t13>=_t8); // _t14 = t13 >= t8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:293:21
_Next=_t14 ? 7 : 8; // if t14 goto 7.for.body else 8.for.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:293:21
}// end SubFn8
private inline  function SubFn9():Void {
_t15=(_t13-1); // _t15 = t13 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:293:21
_Next=9; // jump 9.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:293:21
}// end SubFn9
private inline  function SubFn10():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:293:21
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(5545);
_t17=Force.toRawString(this._goroutine,Force.toUTF8slice(this._goroutine,p_s).subSlice(_t16,_t0)); // _t17 = slice s[t16:t0] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:301:32
}// end SubFn11
private inline  function SubFn12():Void {
var _t21:Int;
var _t22:Bool;
_t19=_t18.r0; // _t19 = extract t18 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:301:32
_t20=_t18.r1; // _t20 = extract t18 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:301:32
this.setPH(5546);
_t21=(_t16+_t20); // _t21 = t16 + t20 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:302:10
_t22=(_t21!=_t0); // _t22 = t21 != t0 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:302:16
_Next=_t22 ? 13 : 14; // if t22 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:302:16
}// end SubFn12
}
#if js @:expose("Go_math_Erf") #end class Go_math_Erf extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/erf.go:188:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,832,"Go_math_Erf");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Bool=false;
var _SF4:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Bool=false;
var _t68:Float=0.0;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Float=0.0;
var _t74:Bool=false;
var _t75:Float=0.0;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Float=0.0;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _t89:Float=0.0;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Float=0.0;
var _t93:Float=0.0;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _t96:Float=0.0;
var _t97:Float=0.0;
var _t98:Float=0.0;
var _t99:Float=0.0;
var _t100:Float=0.0;
var _t101:Float=0.0;
var _t102:Float=0.0;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Float=0.0;
var _t106:Float=0.0;
var _SF5:StackFrame;
var _t107:GOint64=null;
var _t108:GOint64=null;
var _SF6:StackFrame;
var _t109:Float=0.0;
var _t110:Float=0.0;
var _t111:Float=0.0;
var _t112:Float=0.0;
var _SF7:StackFrame;
var _t113:Float=0.0;
var _t114:Float=0.0;
var _t115:Float=0.0;
var _t116:Float=0.0;
var _t117:Float=0.0;
var _t118:Float=0.0;
var _SF8:StackFrame;
var _t119:Float=0.0;
var _t120:Float=0.0;
var _t121:Float=0.0;
var _t122:Float=0.0;
var _t123:Float=0.0;
var _t124:Float=0.0;
var _t125:Float=0.0;
var _t126:Float=0.0;
var _t127:Float=0.0;
var _t128:Float=0.0;
var _t129:Float=0.0;
var _t130:Float=0.0;
var _t131:Float=0.0;
var _t132:Float=0.0;
var _t133:Float=0.0;
var _t134:Float=0.0;
var _t135:Float=0.0;
var _t136:Float=0.0;
var _t137:Float=0.0;
var _t138:Float=0.0;
var _t139:Float=0.0;
var _t140:Float=0.0;
var _t141:Float=0.0;
var _t142:Float=0.0;
var _t143:Float=0.0;
var _t144:Float=0.0;
var _t145:Float=0.0;
var _t146:Float=0.0;
var _t147:Float=0.0;
var _t148:Float=0.0;
var _t149:Float=0.0;
var _t150:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Erf(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Erf(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Erf
{return new Go_math_Erf(gr,_bds, p_x);
}
public function run():Go_math_Erf {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(832,0);
this.setPH(839);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(839,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:195:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(839,1);
this.setPH(840);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:196:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:196:3

case 2: // switch.body
this.setLatest(840,2);
this.setPH(842);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:198:3

case 3: // switch.next
this.setLatest(842,3);
this.setPH(841);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -3;
return this;
case -3:
this.setLatest(841,-3);
_t2=_SF3.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:197:12
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(841,4);
this.setPH(844);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:200:3

case 5: // switch.next
this.setLatest(844,5);
this.setPH(843);
_SF4=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -4;
return this;
case -4:
this.setLatest(843,-4);
_t3=_SF4.res();
 // _t3 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:199:12
this.SubFn2();
_Phi=5;
case 6: // switch.next
this.setLatest(843,6);
this.SubFn3();
_Phi=6;
case 7: // if.then
this.setLatest(843,7);
this.SubFn4();
_Phi=7;
case 8: // if.done
this.setLatest(843,8);
this.setPH(832);
_t6=((_Phi==6)?p_x:(_Phi==7)?_t5:0.0); // _t6 = phi [6.switch.next: x, 7.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:188:10
this.setPH(846);
_t7=((_Phi==6)?false:(_Phi==7)?true:false); // _t7 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:202:2
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(846,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(846,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(846,11);
this.SubFn8();
_Phi=11;
case 12: // if.done
this.setLatest(846,12);
this.setPH(852);
_t12=((_Phi==14)?_t38:(_Phi==13)?_t34:(_Phi==15)?_t40:0.0); // _t12 = phi [14.if.then: t38, 13.if.else: t34, 15.if.else: t40] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:208:7
this.SubFn9();
_Phi=12;
case 13: // if.else
this.setLatest(852,13);
this.SubFn10();
_Phi=13;
case 14: // if.then
this.setLatest(852,14);
this.SubFn11();
_Phi=14;
case 15: // if.else
this.setLatest(852,15);
this.SubFn12();
_Phi=15;
case 16: // if.then
this.setLatest(852,16);
this.SubFn13();
this.setPH(867);
_res= _t41;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t41 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:223:4

case 17: // if.done
this.setLatest(867,17);
this.setPH(869);
_res= _t12;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t12 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:225:3

case 18: // if.then
this.setLatest(869,18);
this.SubFn14();
_Phi=18;
case 19: // if.done
this.setLatest(869,19);
this.SubFn15();
_Phi=19;
case 20: // if.then
this.setLatest(869,20);
this.SubFn16();
this.setPH(876);
_res= _t69;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t69 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:232:4

case 21: // if.done
this.setLatest(876,21);
this.SubFn17();
this.setPH(878);
_res= _t71;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t71 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:234:3

case 22: // if.then
this.setLatest(878,22);
this.SubFn18();
_Phi=22;
case 23: // if.done
this.setLatest(878,23);
this.SubFn19();
_Phi=23;
case 24: // if.then
this.setLatest(878,24);
this.setPH(882);
_res= (-1);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:238:4

case 25: // if.done
this.setLatest(882,25);
this.setPH(884);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:240:3

case 26: // if.then
this.setLatest(884,26);
this.SubFn20();
_Phi=26;
case 27: // if.done
this.setLatest(884,27);
this.setPH(887);
_t105=((_Phi==26)?_t88:(_Phi==28)?_t132:0.0); // _t105 = phi [26.if.then: t88, 28.if.else: t132] #R *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:243:6
_t106=((_Phi==26)?_t104:(_Phi==28)?_t146:0.0); // _t106 = phi [26.if.then: t104, 28.if.else: t146] #S *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:243:9
this.setPH(895);
_SF5=Go_math_Float64bits.call(this._goroutine,[],_t6);
_Next = -5;
return this;
case -5:
this.setLatest(895,-5);
_t107=_SF5.res();
 // _t107 = Float64bits(t6) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:251:34
this.SubFn21();
_SF6=Go_math_Float64frombits.call(this._goroutine,[],_t108);
_Next = -6;
return this;
case -6:
this.setLatest(895,-6);
_t109=_SF6.res();
 // _t109 = Float64frombits(t108) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:251:22
this.SubFn22();
this.setPH(896);
_t113=Math.exp(_t112); // _t113 = Exp(t112) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:252:10
this.SubFn23();
_t119=Math.exp(_t118); // _t119 = Exp(t118) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:252:29
this.SubFn24();
_Phi=27;
case 28: // if.else
this.setLatest(896,28);
this.SubFn25();
_Phi=28;
case 29: // if.then
this.setLatest(896,29);
this.SubFn26();
this.setPH(898);
_res= _t148;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t148 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:254:3

case 30: // if.done
this.setLatest(898,30);
this.SubFn27();
this.setPH(900);
_res= _t150;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t150 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:256:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:256:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 5; // if t2 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:256:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t3 ? 4 : 6; // if t3 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:256:2
}// end SubFn2
private inline  function SubFn3():Void {
var _t4:Bool;
this.setPH(847);
_t4=(Force.toFloat(p_x)<Force.toFloat(0)); // _t4 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:203:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:203:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(848);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/erf.go:204:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:204:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(851);
_t8=(Force.toFloat(_t6)<Force.toFloat(0.84375)); // _t8 = t6 < 27/32:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:207:7
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:207:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Bool;
this.setPH(853);
_t9=(Force.toFloat(_t6)<Force.toFloat(3.725290298461914e-09)); // _t9 = t6 < 1/268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:209:8
_Next=_t9 ? 11 : 13; // if t9 goto 11.if.then else 13.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:209:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t10:Bool;
this.setPH(871);
_t10=(Force.toFloat(_t6)<Force.toFloat(1.25)); // _t10 = t6 < 5/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:227:7
_Next=_t10 ? 18 : 19; // if t10 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:227:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t11:Bool;
this.setPH(854);
_t11=(Force.toFloat(_t6)<Force.toFloat(2.848094538889218e-306)); // _t11 = t6 < 1424047269444609/500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:210:9
_Next=_t11 ? 14 : 15; // if t11 goto 14.if.then else 15.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:210:9
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t7 ? 16 : 17; // if t7 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:210:9
}// end SubFn9
private inline  function SubFn10():Void {
var _t14:Float;
var _t15:Float;
var _t16:Float;
var _t17:Float;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t28:Float;
var _t29:Float;
var _t30:Float;
var _t33:Float;
this.setPH(860);
_t13=(Force.toFloat(_t6)*Force.toFloat(_t6)); // _t13 = t6 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:216:11
this.setPH(861);
_t14=(Force.toFloat(_t13)*Force.toFloat((-2.3763016656650163e-05))); // _t14 = t13 * -59407541641625406521/2500000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:37
_t15=(Force.toFloat((-0.005770270296489442))+Force.toFloat(_t14)); // _t15 = -577027029648944159157/100000000000000000000000:float64 + t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:35
_t16=(Force.toFloat(_t13)*Force.toFloat(_t15)); // _t16 = t13 * t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:30
_t17=(Force.toFloat((-0.02848174957559851))+Force.toFloat(_t16)); // _t17 = -142408747877992552383/5000000000000000000000:float64 + t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:28
_t18=(Force.toFloat(_t13)*Force.toFloat(_t17)); // _t18 = t13 * t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:23
_t19=(Force.toFloat((-0.3250421072470015))+Force.toFloat(_t18)); // _t19 = -32504210724700149937/100000000000000000000:float64 + t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:21
_t20=(Force.toFloat(_t13)*Force.toFloat(_t19)); // _t20 = t13 * t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:16
_t21=(Force.toFloat(0.12837916709551256)+Force.toFloat(_t20)); // _t21 = 128379167095512558561/1000000000000000000000:float64 + t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:13
this.setPH(862);
_t22=(Force.toFloat(_t13)*Force.toFloat((-3.960228278775368e-06))); // _t22 = t13 * -2475142674234605077/625000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:42
_t23=(Force.toFloat(0.00013249473800432164)+Force.toFloat(_t22)); // _t23 = 66247369002160822263/500000000000000000000000:float64 + t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:40
_t24=(Force.toFloat(_t13)*Force.toFloat(_t23)); // _t24 = t13 * t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:35
_t25=(Force.toFloat(0.005081306281875766)+Force.toFloat(_t24)); // _t25 = 63516328523447070347/12500000000000000000000:float64 + t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:33
_t26=(Force.toFloat(_t13)*Force.toFloat(_t25)); // _t26 = t13 * t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:28
_t27=(Force.toFloat(0.0650222499887673)+Force.toFloat(_t26)); // _t27 = 130044499977534588897/2000000000000000000000:float64 + t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:26
_t28=(Force.toFloat(_t13)*Force.toFloat(_t27)); // _t28 = t13 * t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:21
_t29=(Force.toFloat(0.39791722395915535)+Force.toFloat(_t28)); // _t29 = 397917223959155352819/1000000000000000000000:float64 + t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:19
_t30=(Force.toFloat(_t13)*Force.toFloat(_t29)); // _t30 = t13 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:14
_t31=(Force.toFloat(1)+Force.toFloat(_t30)); // _t31 = 1:float64 + t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:11
this.setPH(863);
_t32=Force.floatDiv(Force.toFloat(_t21),Force.toFloat(_t31)); // _t32 = t21 / t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:219:11
this.setPH(864);
_t33=(Force.toFloat(_t6)*Force.toFloat(_t32)); // _t33 = t6 * t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:220:16
_t34=(Force.toFloat(_t6)+Force.toFloat(_t33)); // _t34 = t6 + t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:220:13
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:220:13
}// end SubFn10
private inline  function SubFn11():Void {
var _t35:Float;
var _t36:Float;
var _t37:Float;
this.setPH(855);
_t35=(Force.toFloat(8)*Force.toFloat(_t6)); // _t35 = 8:float64 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:211:24
_t36=(Force.toFloat(1.0270333367641007)*Force.toFloat(_t6)); // _t36 = 102703333676410069053/100000000000000000000:float64 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:211:33
_t37=(Force.toFloat(_t35)+Force.toFloat(_t36)); // _t37 = t35 + t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:211:27
_t38=(Force.toFloat(0.125)*Force.toFloat(_t37)); // _t38 = 1/8:float64 * t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:211:18
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:211:18
}// end SubFn11
private inline  function SubFn12():Void {
var _t39:Float;
this.setPH(857);
_t39=(Force.toFloat(0.1283791670955126)*Force.toFloat(_t6)); // _t39 = 32094791773878146579/250000000000000000000:float64 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:213:19
_t40=(Force.toFloat(_t6)+Force.toFloat(_t39)); // _t40 = t6 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:213:14
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:213:14
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(867);
_t41=(-Force.toFloat(_t12)); // _t41 = -t12 *ssa.UnOp @ /usr/local/go/src/pkg/math/erf.go:223:11
}// end SubFn13
private inline  function SubFn14():Void {
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Float;
var _t55:Float;
var _t56:Float;
var _t57:Float;
var _t58:Float;
var _t59:Float;
var _t60:Float;
var _t61:Float;
var _t62:Float;
var _t63:Float;
var _t64:Float;
var _t65:Float;
this.setPH(872);
_t42=(Force.toFloat(_t6)-Force.toFloat(1)); // _t42 = t6 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:228:10
this.setPH(873);
_t43=(Force.toFloat(_t42)*Force.toFloat((-0.002166375594868791))); // _t43 = t42 * -2166375594868790843/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:50
_t44=(Force.toFloat(0.035478304325618236)+Force.toFloat(_t43)); // _t44 = 354783043256182359371/10000000000000000000000:float64 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:48
_t45=(Force.toFloat(_t42)*Force.toFloat(_t44)); // _t45 = t42 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:43
_t46=(Force.toFloat((-0.11089469428239668))+Force.toFloat(_t45)); // _t46 = -27723673570599169369/250000000000000000000:float64 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:41
_t47=(Force.toFloat(_t42)*Force.toFloat(_t46)); // _t47 = t42 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:36
_t48=(Force.toFloat(0.31834661990116175)+Force.toFloat(_t47)); // _t48 = 159173309950580876837/500000000000000000000:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:34
_t49=(Force.toFloat(_t42)*Force.toFloat(_t48)); // _t49 = t42 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:29
_t50=(Force.toFloat((-0.3722078760357013))+Force.toFloat(_t49)); // _t50 = -372207876035701323847/1000000000000000000000:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:27
_t51=(Force.toFloat(_t42)*Force.toFloat(_t50)); // _t51 = t42 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:22
_t52=(Force.toFloat(0.41485611868374833)+Force.toFloat(_t51)); // _t52 = 207428059341874165833/500000000000000000000:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:20
_t53=(Force.toFloat(_t42)*Force.toFloat(_t52)); // _t53 = t42 * t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:15
_t54=(Force.toFloat((-0.0023621185607526594))+Force.toFloat(_t53)); // _t54 = -236211856075265944077/100000000000000000000000:float64 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:12
this.setPH(874);
_t55=(Force.toFloat(_t42)*Force.toFloat(0.011984499846799107)); // _t55 = t42 * 11984499846799107417/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:48
_t56=(Force.toFloat(0.01363708391202905)+Force.toFloat(_t55)); // _t56 = 68185419560145253681/5000000000000000000000:float64 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:46
_t57=(Force.toFloat(_t42)*Force.toFloat(_t56)); // _t57 = t42 * t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:41
_t58=(Force.toFloat(0.12617121980876164)+Force.toFloat(_t57)); // _t58 = 985712654755950329/7812500000000000000:float64 + t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:39
_t59=(Force.toFloat(_t42)*Force.toFloat(_t58)); // _t59 = t42 * t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:34
_t60=(Force.toFloat(0.07182865441419627)+Force.toFloat(_t59)); // _t60 = 179571636035490665717/2500000000000000000000:float64 + t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:32
_t61=(Force.toFloat(_t42)*Force.toFloat(_t60)); // _t61 = t42 * t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:27
_t62=(Force.toFloat(0.540397917702171)+Force.toFloat(_t61)); // _t62 = 540397917702171048937/1000000000000000000000:float64 + t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:25
_t63=(Force.toFloat(_t42)*Force.toFloat(_t62)); // _t63 = t42 * t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:20
_t64=(Force.toFloat(0.10642088040084423)+Force.toFloat(_t63)); // _t64 = 53210440200422114143/500000000000000000000:float64 + t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:18
_t65=(Force.toFloat(_t42)*Force.toFloat(_t64)); // _t65 = t42 * t64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:13
_t66=(Force.toFloat(1)+Force.toFloat(_t65)); // _t66 = 1:float64 + t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:10
_Next=_t7 ? 20 : 21; // if t7 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:230:10
}// end SubFn14
private inline  function SubFn15():Void {
var _t67:Bool;
this.setPH(880);
_t67=(Force.toFloat(_t6)>=Force.toFloat(6)); // _t67 = t6 >= 6:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:236:7
_Next=_t67 ? 22 : 23; // if t67 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:236:7
}// end SubFn15
private inline  function SubFn16():Void {
var _t68:Float;
this.setPH(876);
_t68=Force.floatDiv(Force.toFloat(_t54),Force.toFloat(_t66)); // _t68 = t54 / t66 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:232:19
_t69=(Force.toFloat((-0.8450629115104675))-Force.toFloat(_t68)); // _t69 = -845062911510467529297/1000000000000000000000:float64 - t68 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:232:16
}// end SubFn16
private inline  function SubFn17():Void {
var _t70:Float;
this.setPH(878);
_t70=Force.floatDiv(Force.toFloat(_t54),Force.toFloat(_t66)); // _t70 = t54 / t66 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:234:17
_t71=(Force.toFloat(0.8450629115104675)+Force.toFloat(_t70)); // _t71 = 845062911510467529297/1000000000000000000000:float64 + t70 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:234:14
}// end SubFn17
private inline  function SubFn18():Void {
_Next=_t7 ? 24 : 25; // if t7 goto 24.if.then else 25.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:234:14
}// end SubFn18
private inline  function SubFn19():Void {
var _t72:Float;
var _t74:Bool;
this.setPH(886);
_t72=(Force.toFloat(_t6)*Force.toFloat(_t6)); // _t72 = t6 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:242:14
_t73=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t72)); // _t73 = 1:float64 / t72 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:242:9
this.setPH(888);
_t74=(Force.toFloat(_t6)<Force.toFloat(2.857142857142857)); // _t74 = t6 < 20/7:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:244:7
_Next=_t74 ? 26 : 28; // if t74 goto 26.if.then else 28.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:244:7
}// end SubFn19
private inline  function SubFn20():Void {
var _t75:Float;
var _t76:Float;
var _t77:Float;
var _t78:Float;
var _t79:Float;
var _t80:Float;
var _t81:Float;
var _t82:Float;
var _t83:Float;
var _t84:Float;
var _t85:Float;
var _t86:Float;
var _t87:Float;
var _t89:Float;
var _t90:Float;
var _t91:Float;
var _t92:Float;
var _t93:Float;
var _t94:Float;
var _t95:Float;
var _t96:Float;
var _t97:Float;
var _t98:Float;
var _t99:Float;
var _t100:Float;
var _t101:Float;
var _t102:Float;
var _t103:Float;
this.setPH(889);
_t75=(Force.toFloat(_t73)*Force.toFloat((-9.814329344169145))); // _t75 = t73 * -61339558401057159287/6250000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:56
_t76=(Force.toFloat((-81.2874355063066))+Force.toFloat(_t75)); // _t76 = -406437177531532967123/5000000000000000000:float64 + t75 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:54
_t77=(Force.toFloat(_t73)*Force.toFloat(_t76)); // _t77 = t73 * t76 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:49
_t78=(Force.toFloat((-184.60509290671104))+Force.toFloat(_t77)); // _t78 = -92302546453355517997/500000000000000000:float64 + t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:47
_t79=(Force.toFloat(_t73)*Force.toFloat(_t78)); // _t79 = t73 * t78 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:42
_t80=(Force.toFloat((-162.39666946257347))+Force.toFloat(_t79)); // _t80 = -32479333892514694071/200000000000000000:float64 + t79 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:40
_t81=(Force.toFloat(_t73)*Force.toFloat(_t80)); // _t81 = t73 * t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:35
_t82=(Force.toFloat((-62.375332450326006))+Force.toFloat(_t81)); // _t82 = -155938331125815015099/2500000000000000000:float64 + t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:33
_t83=(Force.toFloat(_t73)*Force.toFloat(_t82)); // _t83 = t73 * t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:28
_t84=(Force.toFloat((-10.558626225323291))+Force.toFloat(_t83)); // _t84 = -52793131126616454907/5000000000000000000:float64 + t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:26
_t85=(Force.toFloat(_t73)*Force.toFloat(_t84)); // _t85 = t73 * t84 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:21
_t86=(Force.toFloat((-0.6938585727071818))+Force.toFloat(_t85)); // _t86 = -173464643176795441093/250000000000000000000:float64 + t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:19
_t87=(Force.toFloat(_t73)*Force.toFloat(_t86)); // _t87 = t73 * t86 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:14
_t88=(Force.toFloat((-0.009864944034847148))+Force.toFloat(_t87)); // _t88 = -197298880696942964541/20000000000000000000000:float64 + t87 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:11
this.setPH(890);
_t89=(Force.toFloat(_t73)*Force.toFloat((-0.0604244152148581))); // _t89 = t73 * -302122076074290493719/5000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:61
_t90=(Force.toFloat(6.570249770319282)+Force.toFloat(_t89)); // _t90 = 131404995406385634027/20000000000000000000:float64 + t89 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:59
_t91=(Force.toFloat(_t73)*Force.toFloat(_t90)); // _t91 = t73 * t90 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:54
_t92=(Force.toFloat(108.63500554177944)+Force.toFloat(_t91)); // _t92 = 54317502770889717567/500000000000000000:float64 + t91 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:52
_t93=(Force.toFloat(_t73)*Force.toFloat(_t92)); // _t93 = t73 * t92 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:47
_t94=(Force.toFloat(429.00814002756783)+Force.toFloat(_t93)); // _t94 = 214504070013783916693/500000000000000000:float64 + t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:45
_t95=(Force.toFloat(_t73)*Force.toFloat(_t94)); // _t95 = t73 * t94 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:40
_t96=(Force.toFloat(645.3872717332679)+Force.toFloat(_t95)); // _t96 = 40336704483329242521/62500000000000000:float64 + t95 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:38
_t97=(Force.toFloat(_t73)*Force.toFloat(_t96)); // _t97 = t73 * t96 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:33
_t98=(Force.toFloat(434.56587747522923)+Force.toFloat(_t97)); // _t98 = 434565877475229228821/1000000000000000000:float64 + t97 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:31
_t99=(Force.toFloat(_t73)*Force.toFloat(_t98)); // _t99 = t73 * t98 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:26
_t100=(Force.toFloat(137.65775414351904)+Force.toFloat(_t99)); // _t100 = 688288770717595213/5000000000000000:float64 + t99 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:24
_t101=(Force.toFloat(_t73)*Force.toFloat(_t100)); // _t101 = t73 * t100 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:19
_t102=(Force.toFloat(19.651271667439257)+Force.toFloat(_t101)); // _t102 = 49128179168598142823/2500000000000000000:float64 + t101 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:17
_t103=(Force.toFloat(_t73)*Force.toFloat(_t102)); // _t103 = t73 * t102 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:12
_t104=(Force.toFloat(1)+Force.toFloat(_t103)); // _t104 = 1:float64 + t103 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:9
_Next=27; // jump 27.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:246:9
}// end SubFn20
private inline  function SubFn21():Void {
this.setPH(895);
_t108=Force.toUint64(GOint64.and(_t107,GOint64.make(0xffffffff,0x0))); // _t108 = t107 & 18446744069414584320:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:251:38
}// end SubFn21
private inline  function SubFn22():Void {
var _t110:Float;
var _t111:Float;
this.setPH(896);
_t110=(-Force.toFloat(_t109)); // _t110 = -t109 *ssa.UnOp @ /usr/local/go/src/pkg/math/erf.go:252:11
_t111=(Force.toFloat(_t110)*Force.toFloat(_t109)); // _t111 = t110 * t109 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:13
_t112=(Force.toFloat(_t111)-Force.toFloat(0.5625)); // _t112 = t111 - 9/16:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:15
}// end SubFn22
private inline  function SubFn23():Void {
var _t114:Float;
var _t115:Float;
var _t116:Float;
var _t117:Float;
_t114=(Force.toFloat(_t109)-Force.toFloat(_t6)); // _t114 = t109 - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:32
_t115=(Force.toFloat(_t109)+Force.toFloat(_t6)); // _t115 = t109 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:38
_t116=(Force.toFloat(_t114)*Force.toFloat(_t115)); // _t116 = t114 * t115 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:35
_t117=Force.floatDiv(Force.toFloat(_t105),Force.toFloat(_t106)); // _t117 = t105 / t106 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:43
_t118=(Force.toFloat(_t116)+Force.toFloat(_t117)); // _t118 = t116 + t117 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:41
}// end SubFn23
private inline  function SubFn24():Void {
_t120=(Force.toFloat(_t113)*Force.toFloat(_t119)); // _t120 = t113 * t119 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:252:24
_Next=_t7 ? 29 : 30; // if t7 goto 29.if.then else 30.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:252:24
}// end SubFn24
private inline  function SubFn25():Void {
var _t121:Float;
var _t122:Float;
var _t123:Float;
var _t124:Float;
var _t125:Float;
var _t126:Float;
var _t127:Float;
var _t128:Float;
var _t129:Float;
var _t130:Float;
var _t131:Float;
var _t133:Float;
var _t134:Float;
var _t135:Float;
var _t136:Float;
var _t137:Float;
var _t138:Float;
var _t139:Float;
var _t140:Float;
var _t141:Float;
var _t142:Float;
var _t143:Float;
var _t144:Float;
var _t145:Float;
this.setPH(892);
_t121=(Force.toFloat(_t73)*Force.toFloat((-483.5191916086514))); // _t121 = t73 * -483519191608651397019/1000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:49
_t122=(Force.toFloat((-1025.0951316110772))+Force.toFloat(_t121)); // _t122 = -51254756580553862477/50000000000000000:float64 + t121 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:47
_t123=(Force.toFloat(_t73)*Force.toFloat(_t122)); // _t123 = t73 * t122 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:42
_t124=(Force.toFloat((-637.5664433683896))+Force.toFloat(_t123)); // _t124 = -318783221684194813861/500000000000000000:float64 + t123 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:40
_t125=(Force.toFloat(_t73)*Force.toFloat(_t124)); // _t125 = t73 * t124 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:35
_t126=(Force.toFloat((-160.63638485582192))+Force.toFloat(_t125)); // _t126 = -80318192427910958031/500000000000000000:float64 + t125 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:33
_t127=(Force.toFloat(_t73)*Force.toFloat(_t126)); // _t127 = t73 * t126 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:28
_t128=(Force.toFloat((-17.757954917754752))+Force.toFloat(_t127)); // _t128 = -177579549177547519889/10000000000000000000:float64 + t127 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:26
_t129=(Force.toFloat(_t73)*Force.toFloat(_t128)); // _t129 = t73 * t128 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:21
_t130=(Force.toFloat((-0.799283237680523))+Force.toFloat(_t129)); // _t130 = -399641618840261503287/500000000000000000000:float64 + t129 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:19
_t131=(Force.toFloat(_t73)*Force.toFloat(_t130)); // _t131 = t73 * t130 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:14
_t132=(Force.toFloat((-0.0098649429247001))+Force.toFloat(_t131)); // _t132 = -986494292470009928597/100000000000000000000000:float64 + t131 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:11
this.setPH(893);
_t133=(Force.toFloat(_t73)*Force.toFloat((-22.44095244658582))); // _t133 = t73 * -112204762232929091681/5000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:54
_t134=(Force.toFloat(474.52854120695537)+Force.toFloat(_t133)); // _t134 = 94905708241391073443/200000000000000000:float64 + t133 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:52
_t135=(Force.toFloat(_t73)*Force.toFloat(_t134)); // _t135 = t73 * t134 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:47
_t136=(Force.toFloat(2553.0504064331644)+Force.toFloat(_t135)); // _t136 = 255305040643316442583/100000000000000000:float64 + t135 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:45
_t137=(Force.toFloat(_t73)*Force.toFloat(_t136)); // _t137 = t73 * t136 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:40
_t138=(Force.toFloat(3199.8582195085955)+Force.toFloat(_t137)); // _t138 = 79996455487714888477/25000000000000000:float64 + t137 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:38
_t139=(Force.toFloat(_t73)*Force.toFloat(_t138)); // _t139 = t73 * t138 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:33
_t140=(Force.toFloat(1536.729586084437)+Force.toFloat(_t139)); // _t140 = 76836479304221847997/50000000000000000:float64 + t139 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:31
_t141=(Force.toFloat(_t73)*Force.toFloat(_t140)); // _t141 = t73 * t140 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:26
_t142=(Force.toFloat(325.7925129965739)+Force.toFloat(_t141)); // _t142 = 162896256498286959413/500000000000000000:float64 + t141 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:24
_t143=(Force.toFloat(_t73)*Force.toFloat(_t142)); // _t143 = t73 * t142 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:19
_t144=(Force.toFloat(30.33806074348246)+Force.toFloat(_t143)); // _t144 = 75845151858706145731/2500000000000000000:float64 + t143 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:17
_t145=(Force.toFloat(_t73)*Force.toFloat(_t144)); // _t145 = t73 * t144 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:12
_t146=(Force.toFloat(1)+Force.toFloat(_t145)); // _t146 = 1:float64 + t145 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:9
_Next=27; // jump 27.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:249:9
}// end SubFn25
private inline  function SubFn26():Void {
var _t147:Float;
this.setPH(898);
_t147=Force.floatDiv(Force.toFloat(_t120),Force.toFloat(_t6)); // _t147 = t120 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:254:11
_t148=(Force.toFloat(_t147)-Force.toFloat(1)); // _t148 = t147 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:254:14
}// end SubFn26
private inline  function SubFn27():Void {
var _t149:Float;
this.setPH(900);
_t149=Force.floatDiv(Force.toFloat(_t120),Force.toFloat(_t6)); // _t149 = t120 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:256:14
_t150=(Force.toFloat(1)-Force.toFloat(_t149)); // _t150 = 1:float64 - t149 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:256:11
}// end SubFn27
}
#if js @:expose("Go_math_NaN") #end class Go_math_NaN extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/bits.go:28:6
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,244,"Go_math_NaN");
this._bds=_bds;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_NaN(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr) : Float {
var _sf=new Go_math_NaN(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_math_NaN
{return new Go_math_NaN(gr,_bds);
}
public function run():Go_math_NaN {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(244,0);
_SF1=Go_math_Float64frombits.call(this._goroutine,[],GOint64.make(0x7ff80000,0x1));
_Next = -1;
return this;
case -1:
this.setLatest(244,-1);
_t0=_SF1.res();
 // _t0 = Float64frombits(9221120237041090561:uint64) *ssa.Call @ /usr/local/go/src/pkg/math/bits.go:28:44
_res= _t0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t0 *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:28:22

default: Scheduler.bbi();}}}
}
#if (!php) private #end class Go_math_qzero extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j0.go:410:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3331,"Go_math_qzero");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Bool=false;
var _t3:Array<Float>=null;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Array<Float>=null;
var _t8:Float=0.0;
var _t9:Array<Float>=null;
var _t10:Float=0.0;
var _t11:Array<Float>=null;
var _t12:Float=0.0;
var _t13:Array<Float>=null;
var _t14:Float=0.0;
var _t15:Array<Float>=null;
var _t16:Float=0.0;
var _t17:Array<Float>=null;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Array<Float>=null;
var _t30:Float=0.0;
var _t31:Array<Float>=null;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Array<Float>=null;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Bool=false;
var _t57:Array<Float>=null;
var _t58:Array<Float>=null;
var _t59:Bool=false;
var _t60:Array<Float>=null;
var _t61:Array<Float>=null;
var _t62:Bool=false;
var _t63:Array<Float>=null;
var _t64:Array<Float>=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_qzero(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_qzero(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_qzero
{return new Go_math_qzero(gr,_bds, p_x);
}
public function run():Go_math_qzero {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3331,0);
this.SubFn0();

case 1: // if.then
this.setLatest(3331,1);
this.SubFn1();

case 2: // if.done
this.setLatest(3331,2);
this.SubFn2();
this.setPH(3349);
_res= _t55;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t55 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:428:2

case 3: // if.else
this.setLatest(3349,3);
this.SubFn3();

case 4: // if.then
this.setLatest(3349,4);
this.SubFn4();

case 5: // if.else
this.setLatest(3349,5);
this.SubFn5();

case 6: // if.then
this.setLatest(3349,6);
this.SubFn6();

case 7: // if.else
this.setLatest(3349,7);
this.SubFn7();

case 8: // if.then
this.setLatest(3349,8);
this.SubFn8();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t2:Bool;
this.setPH(3332);
_t0=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t0 = local [6]float64 (p) *ssa.Alloc @ /usr/local/go/src/pkg/math/j0.go:411:6
_t1=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t1 = local [6]float64 (q) *ssa.Alloc @ /usr/local/go/src/pkg/math/j0.go:411:9
this.setPH(3333);
_t2=(Force.toFloat(p_x)>=Force.toFloat(8)); // _t2 = x >= 8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:412:7
_Next=_t2 ? 1 : 3; // if t2 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:412:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Array<Float>;
var _t4:Array<Float>;
_t3=Go.math_q0R8.load(); // _t3 = *q0R8 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:412:7
_t0.store(_t3); // *t0 = t3 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:412:7
_t4=Go.math_q0S8.load(); // _t4 = *q0S8 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:412:7
_t1.store(_t4); // *t1 = t4 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:412:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:412:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Float;
var _t7:Array<Float>;
var _t8:Float;
var _t9:Array<Float>;
var _t10:Float;
var _t11:Array<Float>;
var _t12:Float;
var _t13:Array<Float>;
var _t14:Float;
var _t15:Array<Float>;
var _t16:Float;
var _t17:Array<Float>;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t29:Array<Float>;
var _t30:Float;
var _t31:Array<Float>;
var _t32:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Array<Float>;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t53:Float;
var _t54:Float;
this.setPH(3346);
_t5=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t5 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:425:14
_t6=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t5)); // _t6 = 1:float64 / t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:425:9
_t7=_t0.load(); // _t7 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:425:9
this.setPH(3347);
_t8=_t7[0]; // _t8 = t7[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:8
_t9=_t0.load(); // _t9 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:8
_t10=_t9[1]; // _t10 = t9[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:18
_t11=_t0.load(); // _t11 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:18
_t12=_t11[2]; // _t12 = t11[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:26
_t13=_t0.load(); // _t13 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:26
_t14=_t13[3]; // _t14 = t13[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:34
_t15=_t0.load(); // _t15 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:34
_t16=_t15[4]; // _t16 = t15[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:42
_t17=_t0.load(); // _t17 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:42
_t18=_t17[5]; // _t18 = t17[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:426:49
_t19=(Force.toFloat(_t6)*Force.toFloat(_t18)); // _t19 = t6 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:47
_t20=(Force.toFloat(_t16)+Force.toFloat(_t19)); // _t20 = t16 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:45
_t21=(Force.toFloat(_t6)*Force.toFloat(_t20)); // _t21 = t6 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:39
_t22=(Force.toFloat(_t14)+Force.toFloat(_t21)); // _t22 = t14 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:37
_t23=(Force.toFloat(_t6)*Force.toFloat(_t22)); // _t23 = t6 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:31
_t24=(Force.toFloat(_t12)+Force.toFloat(_t23)); // _t24 = t12 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:29
_t25=(Force.toFloat(_t6)*Force.toFloat(_t24)); // _t25 = t6 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:23
_t26=(Force.toFloat(_t10)+Force.toFloat(_t25)); // _t26 = t10 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:21
_t27=(Force.toFloat(_t6)*Force.toFloat(_t26)); // _t27 = t6 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:15
_t28=(Force.toFloat(_t8)+Force.toFloat(_t27)); // _t28 = t8 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:426:12
_t29=_t1.load(); // _t29 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:426:12
this.setPH(3348);
_t30=_t29[0]; // _t30 = t29[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:15
_t31=_t1.load(); // _t31 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:427:15
_t32=_t31[1]; // _t32 = t31[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:23
_t33=_t1.load(); // _t33 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:427:23
_t34=_t33[2]; // _t34 = t33[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:31
_t35=_t1.load(); // _t35 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:427:31
_t36=_t35[3]; // _t36 = t35[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:39
_t37=_t1.load(); // _t37 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:427:39
_t38=_t37[4]; // _t38 = t37[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:47
_t39=_t1.load(); // _t39 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:427:47
_t40=_t39[5]; // _t40 = t39[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:427:54
_t41=(Force.toFloat(_t6)*Force.toFloat(_t40)); // _t41 = t6 * t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:52
_t42=(Force.toFloat(_t38)+Force.toFloat(_t41)); // _t42 = t38 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:50
_t43=(Force.toFloat(_t6)*Force.toFloat(_t42)); // _t43 = t6 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:44
_t44=(Force.toFloat(_t36)+Force.toFloat(_t43)); // _t44 = t36 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:42
_t45=(Force.toFloat(_t6)*Force.toFloat(_t44)); // _t45 = t6 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:36
_t46=(Force.toFloat(_t34)+Force.toFloat(_t45)); // _t46 = t34 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:34
_t47=(Force.toFloat(_t6)*Force.toFloat(_t46)); // _t47 = t6 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:28
_t48=(Force.toFloat(_t32)+Force.toFloat(_t47)); // _t48 = t32 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:26
_t49=(Force.toFloat(_t6)*Force.toFloat(_t48)); // _t49 = t6 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:20
_t50=(Force.toFloat(_t30)+Force.toFloat(_t49)); // _t50 = t30 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:18
_t51=(Force.toFloat(_t6)*Force.toFloat(_t50)); // _t51 = t6 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:12
_t52=(Force.toFloat(1)+Force.toFloat(_t51)); // _t52 = 1:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:427:9
this.setPH(3349);
_t53=Force.floatDiv(Force.toFloat(_t28),Force.toFloat(_t52)); // _t53 = t28 / t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:428:20
_t54=(Force.toFloat((-0.125))+Force.toFloat(_t53)); // _t54 = -1/8:float64 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:428:17
_t55=Force.floatDiv(Force.toFloat(_t54),Force.toFloat(p_x)); // _t55 = t54 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:428:24
}// end SubFn2
private inline  function SubFn3():Void {
var _t56:Bool;
this.setPH(3336);
_t56=(Force.toFloat(p_x)>=Force.toFloat(4.5454)); // _t56 = x >= 22727/5000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:415:14
_Next=_t56 ? 4 : 5; // if t56 goto 4.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:415:14
}// end SubFn3
private inline  function SubFn4():Void {
var _t57:Array<Float>;
var _t58:Array<Float>;
_t57=Go.math_q0R5.load(); // _t57 = *q0R5 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:415:14
_t0.store(_t57); // *t0 = t57 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:415:14
_t58=Go.math_q0S5.load(); // _t58 = *q0S5 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:415:14
_t1.store(_t58); // *t1 = t58 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:415:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:415:14
}// end SubFn4
private inline  function SubFn5():Void {
var _t59:Bool;
this.setPH(3339);
_t59=(Force.toFloat(p_x)>=Force.toFloat(2.8571)); // _t59 = x >= 28571/10000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:418:14
_Next=_t59 ? 6 : 7; // if t59 goto 6.if.then else 7.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:418:14
}// end SubFn5
private inline  function SubFn6():Void {
var _t60:Array<Float>;
var _t61:Array<Float>;
_t60=Go.math_q0R3.load(); // _t60 = *q0R3 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:418:14
_t0.store(_t60); // *t0 = t60 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:418:14
_t61=Go.math_q0S3.load(); // _t61 = *q0S3 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:418:14
_t1.store(_t61); // *t1 = t61 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:418:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:418:14
}// end SubFn6
private inline  function SubFn7():Void {
var _t62:Bool;
this.setPH(3342);
_t62=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t62 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:421:14
_Next=_t62 ? 8 : 2; // if t62 goto 8.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:421:14
}// end SubFn7
private inline  function SubFn8():Void {
var _t63:Array<Float>;
var _t64:Array<Float>;
_t63=Go.math_q0R2.load(); // _t63 = *q0R2 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:421:14
_t0.store(_t63); // *t0 = t63 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:421:14
_t64=Go.math_q0S2.load(); // _t64 = *q0S2 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:421:14
_t1.store(_t64); // *t1 = t64 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:421:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:421:14
}// end SubFn8
}
#if js @:expose("Go_haxegoruntime_RunesToUTF8") #end class Go_haxegoruntime_RunesToUTF8 extends StackFrameBasis implements StackFrame {  // langgoruntime.go:79:6
var p_r:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Slice) {
super(gr,5074,"Go_haxegoruntime_RunesToUTF8");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Slice=null;
var _t1:Int=0;
var _t2:Slice=null;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Pointer=null;
var _t7:Int=0;
var _SF1:StackFrame;
var _t8:Int=0;
var _t9:Slice=null;
var _t10:Pointer=null;
var _t11:Int=0;
var _SF2:StackFrame;
var _t13:Slice=null;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_RunesToUTF8(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Slice) : Slice {
var _sf=new Go_haxegoruntime_RunesToUTF8(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Slice) : Go_haxegoruntime_RunesToUTF8
{return new Go_haxegoruntime_RunesToUTF8(gr,_bds, p_r);
}
public function run():Go_haxegoruntime_RunesToUTF8 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5074,0);
this.SubFn0();
_Phi=0;
case 1: // rangeindex.loop
this.setLatest(5074,1);
this.setPH(5075);
_t2=((_Phi==0)?_t0:(_Phi==2)?_t13:new Slice(new Pointer(new Array<Int>()),0,0)); // _t2 = phi [0.entry: t0, 2.rangeindex.body: t13] #ret *ssa.Phi @ langgoruntime.go:80:6
_t3=((_Phi==0)?(-1):(_Phi==2)?_t4:0); // _t3 = phi [0.entry: -1:int, 2.rangeindex.body: t4] *ssa.Phi near langgoruntime.go:80:6
this.SubFn1();
_Phi=1;
case 2: // rangeindex.body
this.setLatest(5075,2);
this.SubFn2();
this.setPH(5078);
_SF1=Go_utf8_RuneLen.call(this._goroutine,[],_t7);
_Next = -1;
return this;
case -1:
this.setLatest(5078,-1);
_t8=_SF1.res();
 // _t8 = unicode/utf8.RuneLen(t7) *ssa.Call @ langgoruntime.go:83:35
this.SubFn3();
this.setPH(5079);
Go_utf8_EncodeRune.call(this._goroutine,[],_t9,_t11);
_Next = -2;
return this;
case -2:
this.setLatest(5079,-2);
 // _t12 = unicode/utf8.EncodeRune(t9, t11) *ssa.Call @ langgoruntime.go:84:18 [REGISTER VALUE UN-USED]
this.SubFn4();
_Phi=2;
case 3: // rangeindex.done
this.setLatest(5079,3);
this.setPH(5082);
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ langgoruntime.go:87:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5076);
_t0=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0...0) _v[_i]=0; _v;}),0,0); // _t0 = make []byte 0:int 0:int *ssa.MakeSlice @ langgoruntime.go:81:12
_t1=({var _v=p_r;_v==null?0:_v.len();}); // _t1 = len(r) *ssa.Call near langgoruntime.go:81:12
_Next=1; // jump 1.rangeindex.loop *ssa.Jump near langgoruntime.go:81:12
}// end SubFn0
private inline  function SubFn1():Void {
var _t5:Bool;
_t4=(_t3+1); // _t4 = t3 + 1:int *ssa.BinOp near langgoruntime.go:81:12
_t5=(_t4<_t1); // _t5 = t4 < t1 *ssa.BinOp near langgoruntime.go:81:12
_Next=_t5 ? 2 : 3; // if t5 goto 2.rangeindex.body else 3.rangeindex.done *ssa.If near langgoruntime.go:81:12
}// end SubFn1
private inline  function SubFn2():Void {
var _t6:Pointer;
this.setPH(5078);
if((_t4<0)||(_t4>=p_r.len())) Scheduler.ioor(); // _t6 = &r[t4] *ssa.IndexAddr @ langgoruntime.go:83:37 [POINTER]
_t6=p_r.addr(_t4);  // _t6 = &r[t4] *ssa.IndexAddr @ langgoruntime.go:83:37 [POINTER]
_t7=(_t6.load()|0); // _t7 = *t6 *ssa.UnOp near langgoruntime.go:83:37
}// end SubFn2
private inline  function SubFn3():Void {
var _t10:Pointer;
_t9=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t8) _v[_i]=0; _v;}),0,_t8); // _t9 = make []byte t8 t8 *ssa.MakeSlice @ langgoruntime.go:83:14
this.setPH(5079);
if((_t4<0)||(_t4>=p_r.len())) Scheduler.ioor(); // _t10 = &r[t4] *ssa.IndexAddr @ langgoruntime.go:84:25 [POINTER]
_t10=p_r.addr(_t4);  // _t10 = &r[t4] *ssa.IndexAddr @ langgoruntime.go:84:25 [POINTER]
_t11=(_t10.load()|0); // _t11 = *t10 *ssa.UnOp near langgoruntime.go:84:25
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(5080);
_t13={var _v:Slice;if(_t2==null) _v=_t9;else if(_t2.len()==0) _v=_t9;else if(_t9==null) _v=_t2;else if(_t9.len()==0) _v=_t2;else {var l0:Int=_t2.len();_v=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t2.len()+_t9.len()) _v[_i]=0; _v;}),0,_t2.len()+_t9.len());for(_i in 0...l0) _v.setAt(_i,Deep.copy(_t2.getAt(_i)));for(_i in 0..._t9.len()) _v.setAt(_i+l0,Deep.copy(_t9.getAt(_i)));};_v;}; // _t13 = append(t2, t9...) *ssa.Call @ langgoruntime.go:85:15
_Next=1; // jump 1.rangeindex.loop *ssa.Jump near langgoruntime.go:85:15
}// end SubFn4
}
#if js @:expose("Go_math_Ilogb") #end class Go_math_Ilogb extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/logb.go:32:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4328,"Go_math_Ilogb");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Bool=false;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Ilogb(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Int {
var _sf=new Go_math_Ilogb(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Ilogb
{return new Go_math_Ilogb(gr,_bds, p_x);
}
public function run():Go_math_Ilogb {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4328,0);
this.SubFn0();

case 1: // switch.body
this.setLatest(4328,1);
this.setPH(4332);
_res= (-2147483648);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return -2147483648:int *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:36:3

case 2: // switch.body
this.setLatest(4332,2);
this.setPH(4334);
_res= 2147483647;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2147483647:int *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:38:3

case 3: // switch.next
this.setLatest(4334,3);
this.setPH(4333);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(4333,-1);
_t1=_SF1.res();
 // _t1 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:37:12
this.SubFn1();

case 4: // switch.body
this.setLatest(4333,4);
this.setPH(4336);
_res= 2147483647;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2147483647:int *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:40:3

case 5: // switch.next
this.setLatest(4336,5);
this.setPH(4335);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(4335,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:39:12
this.SubFn2();

case 6: // switch.next
this.setLatest(4335,6);
this.setPH(4338);
_SF3=Go_math_ilogb.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(4338,-3);
_t3=_SF3.res();
 // _t3 = ilogb(x) *ssa.Call @ /usr/local/go/src/pkg/math/logb.go:42:14
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/logb.go:42:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4331);
_t0=(Force.toFloat(p_x)==Force.toFloat(0)); // _t0 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/logb.go:35:9
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:35:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 5; // if t1 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:35:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t2 ? 4 : 6; // if t2 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/logb.go:35:9
}// end SubFn2
}
#if (!php) private #end class Go_math_hypot extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/hypot.go:21:6
var p_p:Float;
var p_q:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Float, p_q : Float) {
super(gr,2063,"Go_math_hypot");
this._bds=_bds;
this.p_p=p_p;
this.p_q=p_q;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Float=0.0;
var _SF4:StackFrame;
var _t3:Bool=false;
var _SF5:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Bool=false;
var _SF6:StackFrame;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Bool=false;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Bool=false;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Bool=false;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _SF7:StackFrame;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Float, p_q : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_hypot(0,[], p_p, p_q).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Float, p_q : Float) : Float {
var _sf=new Go_math_hypot(_gr,[], p_p, p_q).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Float, p_q : Float) : Go_math_hypot
{return new Go_math_hypot(gr,_bds, p_p, p_q);
}
public function run():Go_math_hypot {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2063,0);
this.setPH(2066);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_p,0);
_Next = -1;
return this;
case -1:
this.setLatest(2066,-1);
_t0=_SF1.res();
 // _t0 = IsInf(p, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:24:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2066,1);
this.setPH(2067);
_t1=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t1 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:25:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/hypot.go:25:3

case 2: // switch.body
this.setLatest(2067,2);
this.setPH(2069);
_t2=Math.NaN; // _t2 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:27:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/hypot.go:27:3

case 3: // switch.next
this.setLatest(2069,3);
this.setPH(2068);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_p);
_Next = -4;
return this;
case -4:
this.setLatest(2068,-4);
_t3=_SF4.res();
 // _t3 = IsNaN(p) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:26:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(2068,4);
this.setPH(2066);
_SF5=Go_math_IsInf.call(this._goroutine,[],p_q,0);
_Next = -5;
return this;
case -5:
this.setLatest(2066,-5);
_t4=_SF5.res();
 // _t4 = IsInf(q, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:24:27
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(2066,5);
_t5=((_Phi==0)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:24:19
this.SubFn3();
_Phi=5;
case 6: // switch.next
this.setLatest(2066,6);
this.SubFn4();
_Phi=6;
case 7: // binop.rhs
this.setLatest(2066,7);
this.setPH(2068);
_SF6=Go_math_IsNaN.call(this._goroutine,[],p_q);
_Next = -6;
return this;
case -6:
this.setLatest(2068,-6);
_t7=_SF6.res();
 // _t7 = IsNaN(q) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:26:24
this.SubFn5();
_Phi=7;
case 8: // binop.done
this.setLatest(2068,8);
_t8=((_Phi==3)?true:(_Phi==7)?_t7:false); // _t8 = phi [3.switch.next: true:bool, 7.binop.rhs: t7] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:26:16
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(2068,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(2068,10);
this.setPH(2063);
_t10=((_Phi==6)?p_p:(_Phi==9)?_t9:0.0); // _t10 = phi [6.switch.next: p, 9.if.then: t9] #p *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:21:12
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(2063,11);
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(2063,12);
_t13=((_Phi==10)?p_q:(_Phi==11)?_t12:0.0); // _t13 = phi [10.if.done: q, 11.if.then: t12] #q *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:21:15
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(2063,13);
this.SubFn11();
_Phi=13;
case 14: // if.done
this.setLatest(2063,14);
_t15=((_Phi==12)?_t10:(_Phi==13)?_t13:0.0); // _t15 = phi [12.if.done: t10, 13.if.then: t13] #p *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:21:12
_t16=((_Phi==12)?_t13:(_Phi==13)?_t10:0.0); // _t16 = phi [12.if.done: t13, 13.if.then: t10] #q *ssa.Phi @ /usr/local/go/src/pkg/math/hypot.go:21:15
this.SubFn12();
_Phi=14;
case 15: // if.then
this.setLatest(2063,15);
this.setPH(2081);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/hypot.go:39:3

case 16: // if.done
this.setLatest(2081,16);
this.SubFn13();
this.setPH(2084);
_t21=Math.sqrt(_t20); // _t21 = Sqrt(t20) *ssa.Call @ /usr/local/go/src/pkg/math/hypot.go:42:17
this.SubFn14();
_res= _t22;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t22 *ssa.Return @ /usr/local/go/src/pkg/math/hypot.go:42:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/hypot.go:42:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t3 ? 8 : 7; // if t3 goto 8.binop.done else 7.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/hypot.go:42:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/hypot.go:42:2
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/hypot.go:42:2
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(2071);
_t6=(Force.toFloat(p_p)<Force.toFloat(0)); // _t6 = p < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:29:7
_Next=_t6 ? 9 : 10; // if t6 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/hypot.go:29:7
}// end SubFn4
private inline  function SubFn5():Void {
_Next=8; // jump 8.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/hypot.go:29:7
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t8 ? 2 : 6; // if t8 goto 2.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/hypot.go:29:7
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(2072);
_t9=(-Force.toFloat(p_p)); // _t9 = -p *ssa.UnOp @ /usr/local/go/src/pkg/math/hypot.go:30:7
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/hypot.go:30:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t11:Bool;
this.setPH(2074);
_t11=(Force.toFloat(p_q)<Force.toFloat(0)); // _t11 = q < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:32:7
_Next=_t11 ? 11 : 12; // if t11 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/hypot.go:32:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(2075);
_t12=(-Force.toFloat(p_q)); // _t12 = -q *ssa.UnOp @ /usr/local/go/src/pkg/math/hypot.go:33:7
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/hypot.go:33:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t14:Bool;
this.setPH(2077);
_t14=(Force.toFloat(_t10)<Force.toFloat(_t13)); // _t14 = t10 < t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:35:7
_Next=_t14 ? 13 : 14; // if t14 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/hypot.go:35:7
}// end SubFn10
private inline  function SubFn11():Void {
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/hypot.go:35:7
}// end SubFn11
private inline  function SubFn12():Void {
var _t17:Bool;
this.setPH(2080);
_t17=(Force.toFloat(_t15)==Force.toFloat(0)); // _t17 = t15 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:38:7
_Next=_t17 ? 15 : 16; // if t17 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/hypot.go:38:7
}// end SubFn12
private inline  function SubFn13():Void {
var _t19:Float;
this.setPH(2083);
_t18=Force.floatDiv(Force.toFloat(_t16),Force.toFloat(_t15)); // _t18 = t16 / t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:41:8
this.setPH(2084);
_t19=(Force.toFloat(_t18)*Force.toFloat(_t18)); // _t19 = t18 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:42:21
_t20=(Force.toFloat(1)+Force.toFloat(_t19)); // _t20 = 1:float64 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:42:19
}// end SubFn13
private inline  function SubFn14():Void {
_t22=(Force.toFloat(_t15)*Force.toFloat(_t21)); // _t22 = t15 * t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/hypot.go:42:11
}// end SubFn14
}
#if js @:expose("Go_haxegoruntime_Runes2Raw") #end class Go_haxegoruntime_Runes2Raw extends StackFrameBasis implements StackFrame {  // langgoruntime.go:91:6
var p_r:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_r : Slice) {
super(gr,5086,"Go_haxegoruntime_Runes2Raw");
this._bds=_bds;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:Slice=null;
var _t3:Int=0;
var _t4:Slice=null;
var _t5:Int=0;
var _SF2:StackFrame;
var _t6:Slice=null;
var _t7:Int=0;
var _t8:Slice=null;
var _t9:Int=0;
var _t10:Bool=false;
var _t11:Int=0;
var _t12:Int=0;
var _t13:Bool=false;
var _t14:Pointer=null;
var _t15:Pointer=null;
var _t16:Int=0;
var _t17:Int=0;
var _t18:Pointer=null;
var _t19:Slice=null;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Bool=false;
var _t23:Pointer=null;
var _t24:Pointer=null;
var _t25:Int=0;
var _t26:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_r : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_Runes2Raw(0,[], p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_r : Slice) : Slice {
var _sf=new Go_haxegoruntime_Runes2Raw(_gr,[], p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_r : Slice) : Go_haxegoruntime_Runes2Raw
{return new Go_haxegoruntime_Runes2Raw(gr,_bds, p_r);
}
public function run():Go_haxegoruntime_Runes2Raw {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5086,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(5086,1);
this.setPH(5089);
_SF1=Go_haxegoruntime_RunesToUTF16.call(this._goroutine,[],p_r);
_Next = -1;
return this;
case -1:
this.setLatest(5089,-1);
_t2=_SF1.res();
 // _t2 = RunesToUTF16(r) *ssa.Call @ langgoruntime.go:94:29
this.SubFn1();
_Phi=1;
case 2: // switch.body
this.setLatest(5089,2);
this.setPH(5096);
_SF2=Go_haxegoruntime_RunesToUTF8.call(this._goroutine,[],p_r);
_Next = -2;
return this;
case -2:
this.setLatest(5096,-2);
_t6=_SF2.res();
 // _t6 = RunesToUTF8(r) *ssa.Call @ langgoruntime.go:101:27
this.SubFn2();
_Phi=2;
case 3: // switch.next
this.setLatest(5096,3);
this.SubFn3();
_Phi=3;
case 4: // rangeindex.loop
this.setLatest(5096,4);
_t11=((_Phi==1)?(-1):(_Phi==5)?_t12:0); // _t11 = phi [1.switch.body: -1:int, 5.rangeindex.body: t12] *ssa.Phi near langgoruntime.go:101:27
this.SubFn4();
_Phi=4;
case 5: // rangeindex.body
this.setLatest(5096,5);
this.SubFn5();
_Phi=5;
case 6: // rangeindex.done
this.setLatest(5096,6);
this.setPH(5094);
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ langgoruntime.go:99:3

case 7: // switch.next
this.setLatest(5094,7);
this.SubFn6();
this.setPH(5105);
_res= _t19;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19 *ssa.Return @ langgoruntime.go:110:2

case 8: // rangeindex.loop
this.setLatest(5105,8);
_t20=((_Phi==2)?(-1):(_Phi==9)?_t21:0); // _t20 = phi [2.switch.body: -1:int, 9.rangeindex.body: t21] *ssa.Phi near langgoruntime.go:110:2
this.SubFn7();
_Phi=8;
case 9: // rangeindex.body
this.setLatest(5105,9);
this.SubFn8();
_Phi=9;
case 10: // rangeindex.done
this.setLatest(5105,10);
this.setPH(5101);
_res= _t8;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t8 *ssa.Return @ langgoruntime.go:106:3

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
_t0=(Go.haxegoruntime_ZiLen.load()|0); // _t0 = *ZiLen *ssa.UnOp near langgoruntime.go:106:3
_t1=(Force.uintCompare(_t0,1)==0); // _t1 = t0 == 1:uint *ssa.BinOp near langgoruntime.go:106:3
_Next=_t1 ? 1 : 3; // if t1 goto 1.switch.body else 3.switch.next *ssa.If near langgoruntime.go:106:3
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Int;
this.setPH(5090);
_t3=({var _v=_t2;_v==null?0:_v.len();}); // _t3 = len(t2) *ssa.Call @ langgoruntime.go:95:39
_t4=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t3) _v[_i]=0; _v;}),0,_t3); // _t4 = make []int t3 t3 *ssa.MakeSlice @ langgoruntime.go:95:28
_t5=({var _v=_t2;_v==null?0:_v.len();}); // _t5 = len(t2) *ssa.Call near langgoruntime.go:95:28
_Next=4; // jump 4.rangeindex.loop *ssa.Jump near langgoruntime.go:95:28
}// end SubFn1
private inline  function SubFn2():Void {
var _t7:Int;
this.setPH(5097);
_t7=({var _v=_t6;_v==null?0:_v.len();}); // _t7 = len(t6) *ssa.Call @ langgoruntime.go:102:39
_t8=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t7) _v[_i]=0; _v;}),0,_t7); // _t8 = make []int t7 t7 *ssa.MakeSlice @ langgoruntime.go:102:28
_t9=({var _v=_t6;_v==null?0:_v.len();}); // _t9 = len(t6) *ssa.Call near langgoruntime.go:102:28
_Next=8; // jump 8.rangeindex.loop *ssa.Jump near langgoruntime.go:102:28
}// end SubFn2
private inline  function SubFn3():Void {
var _t10:Bool;
_t10=(Force.uintCompare(_t0,3)==0); // _t10 = t0 == 3:uint *ssa.BinOp near langgoruntime.go:102:28
_Next=_t10 ? 2 : 7; // if t10 goto 2.switch.body else 7.switch.next *ssa.If near langgoruntime.go:102:28
}// end SubFn3
private inline  function SubFn4():Void {
var _t13:Bool;
_t12=(_t11+1); // _t12 = t11 + 1:int *ssa.BinOp near langgoruntime.go:102:28
_t13=(_t12<_t5); // _t13 = t12 < t5 *ssa.BinOp near langgoruntime.go:102:28
_Next=_t13 ? 5 : 6; // if t13 goto 5.rangeindex.body else 6.rangeindex.done *ssa.If near langgoruntime.go:102:28
}// end SubFn4
private inline  function SubFn5():Void {
var _t14:Pointer;
var _t15:Pointer;
var _t16:Int;
var _t17:Int;
this.setPH(5092);
if((_t12<0)||(_t12>=_t4.len())) Scheduler.ioor(); // _t14 = &t4[t12] *ssa.IndexAddr @ langgoruntime.go:97:12 [POINTER]
_t14=_t4.addr(_t12);  // _t14 = &t4[t12] *ssa.IndexAddr @ langgoruntime.go:97:12 [POINTER]
if((_t12<0)||(_t12>=_t2.len())) Scheduler.ioor(); // _t15 = &t2[t12] *ssa.IndexAddr @ langgoruntime.go:97:36 [POINTER]
_t15=_t2.addr(_t12);  // _t15 = &t2[t12] *ssa.IndexAddr @ langgoruntime.go:97:36 [POINTER]
_t16=(_t15.load()|0); // _t16 = *t15 *ssa.UnOp near langgoruntime.go:97:36
_t17=_t16; // _t17 = convert int <- uint16 (t16) *ssa.Convert @ langgoruntime.go:97:25
_t14.store(_t17); // *t14 = t17 *ssa.Store near langgoruntime.go:97:25
_Next=4; // jump 4.rangeindex.loop *ssa.Jump near langgoruntime.go:97:25
}// end SubFn5
private inline  function SubFn6():Void {
var _t18:Pointer;
this.setPH(5105);
_t18=new Pointer({var _v=new Array<Int>();for(_vi in 0...0){_v[_vi]=0;}; _v;}); // _t18 = new [0]int (slicelit) *ssa.Alloc @ langgoruntime.go:110:14
_t19=new Slice(_t18,0,-1); // _t19 = slice t18[:] *ssa.Slice @ langgoruntime.go:110:14
}// end SubFn6
private inline  function SubFn7():Void {
var _t22:Bool;
_t21=(_t20+1); // _t21 = t20 + 1:int *ssa.BinOp near langgoruntime.go:110:14
_t22=(_t21<_t9); // _t22 = t21 < t9 *ssa.BinOp near langgoruntime.go:110:14
_Next=_t22 ? 9 : 10; // if t22 goto 9.rangeindex.body else 10.rangeindex.done *ssa.If near langgoruntime.go:110:14
}// end SubFn7
private inline  function SubFn8():Void {
var _t23:Pointer;
var _t24:Pointer;
var _t25:Int;
var _t26:Int;
this.setPH(5099);
if((_t21<0)||(_t21>=_t8.len())) Scheduler.ioor(); // _t23 = &t8[t21] *ssa.IndexAddr @ langgoruntime.go:104:12 [POINTER]
_t23=_t8.addr(_t21);  // _t23 = &t8[t21] *ssa.IndexAddr @ langgoruntime.go:104:12 [POINTER]
if((_t21<0)||(_t21>=_t6.len())) Scheduler.ioor(); // _t24 = &t6[t21] *ssa.IndexAddr @ langgoruntime.go:104:35 [POINTER]
_t24=_t6.addr(_t21);  // _t24 = &t6[t21] *ssa.IndexAddr @ langgoruntime.go:104:35 [POINTER]
_t25=(_t24.load()|0); // _t25 = *t24 *ssa.UnOp near langgoruntime.go:104:35
_t26=_t25; // _t26 = convert int <- byte (t25) *ssa.Convert @ langgoruntime.go:104:25
_t23.store(_t26); // *t23 = t26 *ssa.Store near langgoruntime.go:104:25
_Next=8; // jump 8.rangeindex.loop *ssa.Jump near langgoruntime.go:104:25
}// end SubFn8
}
#if js @:expose("Go_utf8_FullRuneInString") #end class Go_utf8_FullRuneInString extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:209:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5453,"Go_utf8_FullRuneInString");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Int,r1:Int,r2:Bool}=null;
var _t3:Bool=false;
var _t4:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_FullRuneInString(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : Bool {
var _sf=new Go_utf8_FullRuneInString(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_FullRuneInString
{return new Go_utf8_FullRuneInString(gr,_bds, p_s);
}
public function run():Go_utf8_FullRuneInString {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5453,0);
this.setPH(5454);
_SF1=Go_utf8_decodeRuneInStringInternal.call(this._goroutine,[],p_s);
_Next = -1;
return this;
case -1:
this.setLatest(5454,-1);
_t0=_SF1.res();
 // _t0 = decodeRuneInStringInternal(s) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:210:43
this.SubFn0();
this.setPH(5455);
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:211:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
 // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:211:2 [REGISTER VALUE UN-USED]
 // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:211:2 [REGISTER VALUE UN-USED]
_t3=_t0.r2; // _t3 = extract t0 #2 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:211:2
_t4=(!_t3); // _t4 = !t3 *ssa.UnOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:211:9
}// end SubFn0
}
#if js @:expose("Go_utf8_EncodeRune") #end class Go_utf8_EncodeRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:330:6
var p_p:Slice;
var p_r:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice, p_r : Int) {
super(gr,5574,"Go_utf8_EncodeRune");
this._bds=_bds;
this.p_p=p_p;
this.p_r=p_r;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Pointer=null;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Pointer=null;
var _t7:Int=0;
var _t8:Int=0;
var _t9:Int=0;
var _t10:Pointer=null;
var _t11:Int=0;
var _t12:Int=0;
var _t13:Int=0;
var _t14:Int=0;
var _t15:Bool=false;
var _t16:Int=0;
var _t17:Bool=false;
var _t18:Int=0;
var _t19:Int=0;
var _t20:Bool=false;
var _t21:Bool=false;
var _t22:Pointer=null;
var _t23:Int=0;
var _t24:Int=0;
var _t25:Int=0;
var _t26:Pointer=null;
var _t27:Int=0;
var _t28:Int=0;
var _t29:Int=0;
var _t30:Int=0;
var _t31:Pointer=null;
var _t32:Int=0;
var _t33:Int=0;
var _t34:Int=0;
var _t35:Pointer=null;
var _t36:Int=0;
var _t37:Int=0;
var _t38:Int=0;
var _t39:Pointer=null;
var _t40:Int=0;
var _t41:Int=0;
var _t42:Int=0;
var _t43:Int=0;
var _t44:Pointer=null;
var _t45:Int=0;
var _t46:Int=0;
var _t47:Int=0;
var _t48:Int=0;
var _t49:Pointer=null;
var _t50:Int=0;
var _t51:Int=0;
var _t52:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice, p_r : Int) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_EncodeRune(0,[], p_p, p_r).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice, p_r : Int) : Int {
var _sf=new Go_utf8_EncodeRune(_gr,[], p_p, p_r).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice, p_r : Int) : Go_utf8_EncodeRune
{return new Go_utf8_EncodeRune(gr,_bds, p_p, p_r);
}
public function run():Go_utf8_EncodeRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5574,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(5574,1);
this.SubFn1();
this.setPH(5578);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:334:3

case 2: // if.done
this.setLatest(5578,2);
this.SubFn2();
_Phi=2;
case 3: // if.then
this.setLatest(5578,3);
this.SubFn3();
this.setPH(5584);
_res= 2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:340:3

case 4: // if.done
this.setLatest(5584,4);
this.SubFn4();
_Phi=4;
case 5: // if.then
this.setLatest(5584,5);
this.SubFn5();
_Phi=5;
case 6: // if.done
this.setLatest(5584,6);
this.setPH(5574);
_t16=((_Phi==4)?p_r:(_Phi==5)?65533:0); // _t16 = phi [4.if.done: r, 5.if.then: 65533:rune] #r *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:330:27
this.SubFn6();
_Phi=6;
case 7: // if.then
this.setLatest(5574,7);
this.SubFn7();
_Phi=7;
case 8: // if.done
this.setLatest(5574,8);
_t18=((_Phi==6)?_t16:(_Phi==9)?_t16:(_Phi==7)?65533:0); // _t18 = phi [6.if.done: t16, 9.cond.true: t16, 7.if.then: 65533:rune] #r *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:330:27
this.SubFn8();
_Phi=8;
case 9: // cond.true
this.setLatest(5574,9);
this.SubFn9();
_Phi=9;
case 10: // if.then
this.setLatest(5574,10);
this.SubFn10();
this.setPH(5599);
_res= 3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 3:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:355:3

case 11: // if.done
this.setLatest(5599,11);
this.SubFn11();
this.setPH(5606);
_res= 4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 4:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:362:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Int;
var _t1:Bool;
this.setPH(5576);
_t0=p_r; // _t0 = convert uint32 <- rune (r) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:332:11
_t1=(Force.uintCompare(_t0,127)<=0); // _t1 = t0 <= 127:uint32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:332:15
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:332:15
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Pointer;
var _t3:Int;
this.setPH(5577);
if((0<0)||(0>=p_p.len())) Scheduler.ioor(); // _t2 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:333:4 [POINTER]
_t2=p_p.addr(0);  // _t2 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:333:4 [POINTER]
_t3=p_r; // _t3 = convert byte <- rune (r) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:333:14
_t2.store(_t3); // *t2 = t3 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:333:14
}// end SubFn1
private inline  function SubFn2():Void {
var _t4:Int;
var _t5:Bool;
this.setPH(5581);
_t4=p_r; // _t4 = convert uint32 <- rune (r) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:337:11
_t5=(Force.uintCompare(_t4,2047)<=0); // _t5 = t4 <= 2047:uint32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:337:15
_Next=_t5 ? 3 : 4; // if t5 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:337:15
}// end SubFn2
private inline  function SubFn3():Void {
var _t6:Pointer;
var _t7:Int;
var _t8:Int;
var _t9:Int;
var _t10:Pointer;
var _t11:Int;
var _t12:Int;
var _t13:Int;
this.setPH(5582);
if((0<0)||(0>=p_p.len())) Scheduler.ioor(); // _t6 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:4 [POINTER]
_t6=p_p.addr(0);  // _t6 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:4 [POINTER]
_t7=(p_r>>GOint64.toInt(GOint64.make(0x0,0x6))); // _t7 = r >> 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:21
_t8=_t7; // _t8 = convert byte <- rune (t7) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:19
_t9=Force.toUint8((192|_t8)); // _t9 = 192:byte | t8 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:13
_t6.store(_t9); // *t6 = t9 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:338:13
this.setPH(5583);
if((1<0)||(1>=p_p.len())) Scheduler.ioor(); // _t10 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:4 [POINTER]
_t10=p_p.addr(1);  // _t10 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:4 [POINTER]
_t11=p_r; // _t11 = convert byte <- rune (r) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:19
_t12=Force.toUint8((_t11&63)); // _t12 = t11 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:22
_t13=Force.toUint8((128|_t12)); // _t13 = 128:byte | t12 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:13
_t10.store(_t13); // *t10 = t13 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:339:13
}// end SubFn3
private inline  function SubFn4():Void {
var _t14:Int;
var _t15:Bool;
this.setPH(5587);
_t14=p_r; // _t14 = convert uint32 <- rune (r) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:343:11
_t15=(Force.uintCompare(_t14,1114111)>0); // _t15 = t14 > 1114111:uint32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:343:15
_Next=_t15 ? 5 : 6; // if t15 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:343:15
}// end SubFn4
private inline  function SubFn5():Void {
_Next=6; // jump 6.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:343:15
}// end SubFn5
private inline  function SubFn6():Void {
var _t17:Bool;
this.setPH(5591);
_t17=(55296<=_t16); // _t17 = 55296:rune <= t16 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:347:18
_Next=_t17 ? 9 : 8; // if t17 goto 9.cond.true else 8.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:347:18
}// end SubFn6
private inline  function SubFn7():Void {
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:347:18
}// end SubFn7
private inline  function SubFn8():Void {
var _t19:Int;
var _t20:Bool;
this.setPH(5595);
_t19=_t18; // _t19 = convert uint32 <- rune (t18) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:351:11
_t20=(Force.uintCompare(_t19,65535)<=0); // _t20 = t19 <= 65535:uint32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:351:15
_Next=_t20 ? 10 : 11; // if t20 goto 10.if.then else 11.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:351:15
}// end SubFn8
private inline  function SubFn9():Void {
var _t21:Bool;
this.setPH(5591);
_t21=(_t16<=57343); // _t21 = t16 <= 57343:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:347:28
_Next=_t21 ? 7 : 8; // if t21 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:347:28
}// end SubFn9
private inline  function SubFn10():Void {
var _t22:Pointer;
var _t23:Int;
var _t24:Int;
var _t25:Int;
var _t26:Pointer;
var _t27:Int;
var _t28:Int;
var _t29:Int;
var _t30:Int;
var _t31:Pointer;
var _t32:Int;
var _t33:Int;
var _t34:Int;
this.setPH(5596);
if((0<0)||(0>=p_p.len())) Scheduler.ioor(); // _t22 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:4 [POINTER]
_t22=p_p.addr(0);  // _t22 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:4 [POINTER]
_t23=(_t18>>GOint64.toInt(GOint64.make(0x0,0xc))); // _t23 = t18 >> 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:21
_t24=_t23; // _t24 = convert byte <- rune (t23) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:19
_t25=Force.toUint8((224|_t24)); // _t25 = 224:byte | t24 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:13
_t22.store(_t25); // *t22 = t25 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:352:13
this.setPH(5597);
if((1<0)||(1>=p_p.len())) Scheduler.ioor(); // _t26 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:4 [POINTER]
_t26=p_p.addr(1);  // _t26 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:4 [POINTER]
_t27=(_t18>>GOint64.toInt(GOint64.make(0x0,0x6))); // _t27 = t18 >> 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:21
_t28=_t27; // _t28 = convert byte <- rune (t27) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:19
_t29=Force.toUint8((_t28&63)); // _t29 = t28 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:25
_t30=Force.toUint8((128|_t29)); // _t30 = 128:byte | t29 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:13
_t26.store(_t30); // *t26 = t30 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:353:13
this.setPH(5598);
if((2<0)||(2>=p_p.len())) Scheduler.ioor(); // _t31 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:4 [POINTER]
_t31=p_p.addr(2);  // _t31 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:4 [POINTER]
_t32=_t18; // _t32 = convert byte <- rune (t18) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:19
_t33=Force.toUint8((_t32&63)); // _t33 = t32 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:22
_t34=Force.toUint8((128|_t33)); // _t34 = 128:byte | t33 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:13
_t31.store(_t34); // *t31 = t34 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:354:13
}// end SubFn10
private inline  function SubFn11():Void {
var _t35:Pointer;
var _t36:Int;
var _t37:Int;
var _t38:Int;
var _t39:Pointer;
var _t40:Int;
var _t41:Int;
var _t42:Int;
var _t43:Int;
var _t44:Pointer;
var _t45:Int;
var _t46:Int;
var _t47:Int;
var _t48:Int;
var _t49:Pointer;
var _t50:Int;
var _t51:Int;
var _t52:Int;
this.setPH(5602);
if((0<0)||(0>=p_p.len())) Scheduler.ioor(); // _t35 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:3 [POINTER]
_t35=p_p.addr(0);  // _t35 = &p[0:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:3 [POINTER]
_t36=(_t18>>GOint64.toInt(GOint64.make(0x0,0x12))); // _t36 = t18 >> 18:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:20
_t37=_t36; // _t37 = convert byte <- rune (t36) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:18
_t38=Force.toUint8((240|_t37)); // _t38 = 240:byte | t37 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:12
_t35.store(_t38); // *t35 = t38 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:358:12
this.setPH(5603);
if((1<0)||(1>=p_p.len())) Scheduler.ioor(); // _t39 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:3 [POINTER]
_t39=p_p.addr(1);  // _t39 = &p[1:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:3 [POINTER]
_t40=(_t18>>GOint64.toInt(GOint64.make(0x0,0xc))); // _t40 = t18 >> 12:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:20
_t41=_t40; // _t41 = convert byte <- rune (t40) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:18
_t42=Force.toUint8((_t41&63)); // _t42 = t41 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:25
_t43=Force.toUint8((128|_t42)); // _t43 = 128:byte | t42 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:12
_t39.store(_t43); // *t39 = t43 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:359:12
this.setPH(5604);
if((2<0)||(2>=p_p.len())) Scheduler.ioor(); // _t44 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:3 [POINTER]
_t44=p_p.addr(2);  // _t44 = &p[2:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:3 [POINTER]
_t45=(_t18>>GOint64.toInt(GOint64.make(0x0,0x6))); // _t45 = t18 >> 6:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:20
_t46=_t45; // _t46 = convert byte <- rune (t45) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:18
_t47=Force.toUint8((_t46&63)); // _t47 = t46 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:24
_t48=Force.toUint8((128|_t47)); // _t48 = 128:byte | t47 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:12
_t44.store(_t48); // *t44 = t48 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:360:12
this.setPH(5605);
if((3<0)||(3>=p_p.len())) Scheduler.ioor(); // _t49 = &p[3:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:3 [POINTER]
_t49=p_p.addr(3);  // _t49 = &p[3:int] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:3 [POINTER]
_t50=_t18; // _t50 = convert byte <- rune (t18) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:18
_t51=Force.toUint8((_t50&63)); // _t51 = t50 & 63:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:21
_t52=Force.toUint8((128|_t51)); // _t52 = 128:byte | t51 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:12
_t49.store(_t52); // *t49 = t52 *ssa.Store near /usr/local/go/src/pkg/unicode/utf8/utf8.go:361:12
}// end SubFn11
}
#if js @:expose("Go_math_Float64frombits") #end class Go_math_Float64frombits extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/unsafe.go:21:6
var p_b:GOint64;
public function new(gr:Int,_bds:Array<Dynamic>, p_b : GOint64) {
super(gr,4995,"Go_math_Float64frombits");
this._bds=_bds;
this.p_b=p_b;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:UnsafePointer=null;
var _t2:Pointer=null;
var _t3:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_b : GOint64) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Float64frombits(0,[], p_b).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_b : GOint64) : Float {
var _sf=new Go_math_Float64frombits(_gr,[], p_b).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_b : GOint64) : Go_math_Float64frombits
{return new Go_math_Float64frombits(gr,_bds, p_b);
}
public function run():Go_math_Float64frombits {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4995,0);
this.SubFn0();
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/unsafe.go:21:42

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:UnsafePointer;
var _t2:Pointer;
_t0=new Pointer(GOint64.make(0,0)); // _t0 = new uint64 (b) *ssa.Alloc @ /usr/local/go/src/pkg/math/unsafe.go:21:22
_t0.store(p_b); // *t0 = b *ssa.Store near /usr/local/go/src/pkg/math/unsafe.go:21:22
_t1=new UnsafePointer(_t0); // _t1 = convert unsafe.Pointer <- *uint64 (t0) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:21:75
_t2=cast(_t1,Pointer); // _t2 = convert *float64 <- unsafe.Pointer (t1) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:21:60
_t3=_t2.load(); // _t3 = *t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/unsafe.go:21:49
}// end SubFn0
}
#if (!php) private #end class Go_math_pone extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j1.go:300:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4722,"Go_math_pone");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Bool=false;
var _t3:Array<Float>=null;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Array<Float>=null;
var _t8:Float=0.0;
var _t9:Array<Float>=null;
var _t10:Float=0.0;
var _t11:Array<Float>=null;
var _t12:Float=0.0;
var _t13:Array<Float>=null;
var _t14:Float=0.0;
var _t15:Array<Float>=null;
var _t16:Float=0.0;
var _t17:Array<Float>=null;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Array<Float>=null;
var _t30:Float=0.0;
var _t31:Array<Float>=null;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Bool=false;
var _t52:Array<Float>=null;
var _t53:Array<Float>=null;
var _t54:Bool=false;
var _t55:Array<Float>=null;
var _t56:Array<Float>=null;
var _t57:Bool=false;
var _t58:Array<Float>=null;
var _t59:Array<Float>=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_pone(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_pone(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_pone
{return new Go_math_pone(gr,_bds, p_x);
}
public function run():Go_math_pone {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4722,0);
this.SubFn0();

case 1: // if.then
this.setLatest(4722,1);
this.SubFn1();

case 2: // if.done
this.setLatest(4722,2);
this.SubFn2();
this.setPH(4741);
_res= _t50;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t50 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:319:2

case 3: // if.else
this.setLatest(4741,3);
this.SubFn3();

case 4: // if.then
this.setLatest(4741,4);
this.SubFn4();

case 5: // if.else
this.setLatest(4741,5);
this.SubFn5();

case 6: // if.then
this.setLatest(4741,6);
this.SubFn6();

case 7: // if.else
this.setLatest(4741,7);
this.SubFn7();

case 8: // if.then
this.setLatest(4741,8);
this.SubFn8();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t2:Bool;
this.setPH(4723);
_t0=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t0 = local [6]float64 (p) *ssa.Alloc @ /usr/local/go/src/pkg/math/j1.go:301:6
this.setPH(4724);
_t1=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;}); // _t1 = local [5]float64 (q) *ssa.Alloc @ /usr/local/go/src/pkg/math/j1.go:302:6
this.setPH(4725);
_t2=(Force.toFloat(p_x)>=Force.toFloat(8)); // _t2 = x >= 8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:303:7
_Next=_t2 ? 1 : 3; // if t2 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:303:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Array<Float>;
var _t4:Array<Float>;
_t3=Go.math_p1R8.load(); // _t3 = *p1R8 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:303:7
_t0.store(_t3); // *t0 = t3 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:303:7
_t4=Go.math_p1S8.load(); // _t4 = *p1S8 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:303:7
_t1.store(_t4); // *t1 = t4 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:303:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:303:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Float;
var _t7:Array<Float>;
var _t8:Float;
var _t9:Array<Float>;
var _t10:Float;
var _t11:Array<Float>;
var _t12:Float;
var _t13:Array<Float>;
var _t14:Float;
var _t15:Array<Float>;
var _t16:Float;
var _t17:Array<Float>;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t29:Array<Float>;
var _t30:Float;
var _t31:Array<Float>;
var _t32:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t49:Float;
this.setPH(4738);
_t5=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t5 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:316:14
_t6=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t5)); // _t6 = 1:float64 / t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:316:9
_t7=_t0.load(); // _t7 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:316:9
this.setPH(4739);
_t8=_t7[0]; // _t8 = t7[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:8
_t9=_t0.load(); // _t9 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:8
_t10=_t9[1]; // _t10 = t9[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:18
_t11=_t0.load(); // _t11 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:18
_t12=_t11[2]; // _t12 = t11[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:26
_t13=_t0.load(); // _t13 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:26
_t14=_t13[3]; // _t14 = t13[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:34
_t15=_t0.load(); // _t15 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:34
_t16=_t15[4]; // _t16 = t15[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:42
_t17=_t0.load(); // _t17 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:42
_t18=_t17[5]; // _t18 = t17[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:317:49
_t19=(Force.toFloat(_t6)*Force.toFloat(_t18)); // _t19 = t6 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:47
_t20=(Force.toFloat(_t16)+Force.toFloat(_t19)); // _t20 = t16 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:45
_t21=(Force.toFloat(_t6)*Force.toFloat(_t20)); // _t21 = t6 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:39
_t22=(Force.toFloat(_t14)+Force.toFloat(_t21)); // _t22 = t14 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:37
_t23=(Force.toFloat(_t6)*Force.toFloat(_t22)); // _t23 = t6 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:31
_t24=(Force.toFloat(_t12)+Force.toFloat(_t23)); // _t24 = t12 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:29
_t25=(Force.toFloat(_t6)*Force.toFloat(_t24)); // _t25 = t6 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:23
_t26=(Force.toFloat(_t10)+Force.toFloat(_t25)); // _t26 = t10 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:21
_t27=(Force.toFloat(_t6)*Force.toFloat(_t26)); // _t27 = t6 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:15
_t28=(Force.toFloat(_t8)+Force.toFloat(_t27)); // _t28 = t8 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:317:12
_t29=_t1.load(); // _t29 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:317:12
this.setPH(4740);
_t30=_t29[0]; // _t30 = t29[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:318:17
_t31=_t1.load(); // _t31 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:318:17
_t32=_t31[1]; // _t32 = t31[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:318:25
_t33=_t1.load(); // _t33 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:318:25
_t34=_t33[2]; // _t34 = t33[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:318:33
_t35=_t1.load(); // _t35 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:318:33
_t36=_t35[3]; // _t36 = t35[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:318:41
_t37=_t1.load(); // _t37 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:318:41
_t38=_t37[4]; // _t38 = t37[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:318:48
_t39=(Force.toFloat(_t6)*Force.toFloat(_t38)); // _t39 = t6 * t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:46
_t40=(Force.toFloat(_t36)+Force.toFloat(_t39)); // _t40 = t36 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:44
_t41=(Force.toFloat(_t6)*Force.toFloat(_t40)); // _t41 = t6 * t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:38
_t42=(Force.toFloat(_t34)+Force.toFloat(_t41)); // _t42 = t34 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:36
_t43=(Force.toFloat(_t6)*Force.toFloat(_t42)); // _t43 = t6 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:30
_t44=(Force.toFloat(_t32)+Force.toFloat(_t43)); // _t44 = t32 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:28
_t45=(Force.toFloat(_t6)*Force.toFloat(_t44)); // _t45 = t6 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:22
_t46=(Force.toFloat(_t30)+Force.toFloat(_t45)); // _t46 = t30 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:20
_t47=(Force.toFloat(_t6)*Force.toFloat(_t46)); // _t47 = t6 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:14
_t48=(Force.toFloat(1)+Force.toFloat(_t47)); // _t48 = 1:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:318:11
this.setPH(4741);
_t49=Force.floatDiv(Force.toFloat(_t28),Force.toFloat(_t48)); // _t49 = t28 / t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:319:14
_t50=(Force.toFloat(1)+Force.toFloat(_t49)); // _t50 = 1:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:319:11
}// end SubFn2
private inline  function SubFn3():Void {
var _t51:Bool;
this.setPH(4728);
_t51=(Force.toFloat(p_x)>=Force.toFloat(4.5454)); // _t51 = x >= 22727/5000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:306:14
_Next=_t51 ? 4 : 5; // if t51 goto 4.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:306:14
}// end SubFn3
private inline  function SubFn4():Void {
var _t52:Array<Float>;
var _t53:Array<Float>;
_t52=Go.math_p1R5.load(); // _t52 = *p1R5 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:306:14
_t0.store(_t52); // *t0 = t52 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:306:14
_t53=Go.math_p1S5.load(); // _t53 = *p1S5 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:306:14
_t1.store(_t53); // *t1 = t53 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:306:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:306:14
}// end SubFn4
private inline  function SubFn5():Void {
var _t54:Bool;
this.setPH(4731);
_t54=(Force.toFloat(p_x)>=Force.toFloat(2.8571)); // _t54 = x >= 28571/10000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:309:14
_Next=_t54 ? 6 : 7; // if t54 goto 6.if.then else 7.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:309:14
}// end SubFn5
private inline  function SubFn6():Void {
var _t55:Array<Float>;
var _t56:Array<Float>;
_t55=Go.math_p1R3.load(); // _t55 = *p1R3 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:309:14
_t0.store(_t55); // *t0 = t55 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:309:14
_t56=Go.math_p1S3.load(); // _t56 = *p1S3 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:309:14
_t1.store(_t56); // *t1 = t56 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:309:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:309:14
}// end SubFn6
private inline  function SubFn7():Void {
var _t57:Bool;
this.setPH(4734);
_t57=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t57 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:312:14
_Next=_t57 ? 8 : 2; // if t57 goto 8.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:312:14
}// end SubFn7
private inline  function SubFn8():Void {
var _t58:Array<Float>;
var _t59:Array<Float>;
_t58=Go.math_p1R2.load(); // _t58 = *p1R2 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:312:14
_t0.store(_t58); // *t0 = t58 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:312:14
_t59=Go.math_p1S2.load(); // _t59 = *p1S2 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:312:14
_t1.store(_t59); // *t1 = t59 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:312:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:312:14
}// end SubFn8
}
#if js @:expose("Go_math_Nextafter") #end class Go_math_Nextafter extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/nextafter.go:13:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,2646,"Go_math_Nextafter");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Float=0.0;
var _t3:Bool=false;
var _SF3:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF4:StackFrame;
var _t6:Float=0.0;
var _SF5:StackFrame;
var _t7:Float=0.0;
var _t8:Bool=false;
var _SF6:StackFrame;
var _t9:GOint64=null;
var _t10:GOint64=null;
var _SF7:StackFrame;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Bool=false;
var _t14:Bool=false;
var _SF8:StackFrame;
var _t15:GOint64=null;
var _t16:GOint64=null;
var _SF9:StackFrame;
var _t17:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Nextafter(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_Nextafter(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_Nextafter
{return new Go_math_Nextafter(gr,_bds, p_x, p_y);
}
public function run():Go_math_Nextafter {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2646,0);
this.setPH(2648);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2648,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:15:12
this.SubFn0();
_Phi=0;
case 1: // switch.done
this.setLatest(2648,1);
this.setPH(2646);
_t1=((_Phi==2)?_t2:(_Phi==3)?p_x:(_Phi==7)?_t7:(_Phi==9)?_t11:(_Phi==11)?_t17:0.0); // _t1 = phi [2.switch.body: t2, 3.switch.body: x, 7.switch.body: t7, 9.switch.body: t11, 11.switch.next: t17] #r *ssa.Phi @ /usr/local/go/src/pkg/math/nextafter.go:13:31
this.setPH(2659);
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/nextafter.go:26:2

case 2: // switch.body
this.setLatest(2659,2);
this.setPH(2649);
_t2=Math.NaN; // _t2 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:16:10
this.SubFn1();
_Phi=2;
case 3: // switch.body
this.setLatest(2649,3);
this.SubFn2();
_Phi=3;
case 4: // switch.next
this.setLatest(2649,4);
this.SubFn3();
_Phi=4;
case 5: // binop.rhs
this.setLatest(2649,5);
this.setPH(2648);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -3;
return this;
case -3:
this.setLatest(2648,-3);
_t4=_SF3.res();
 // _t4 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:15:24
this.SubFn4();
_Phi=5;
case 6: // binop.done
this.setLatest(2648,6);
_t5=((_Phi==0)?true:(_Phi==5)?_t4:false); // _t5 = phi [0.entry: true:bool, 5.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/nextafter.go:15:16
this.SubFn5();
_Phi=6;
case 7: // switch.body
this.setLatest(2648,7);
this.setPH(2653);
_SF4=Go_math_Float64frombits.call(this._goroutine,[],GOint64.make(0x0,0x1));
_Next = -4;
return this;
case -4:
this.setLatest(2653,-4);
_t6=_SF4.res();
 // _t6 = Float64frombits(1:uint64) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:20:31
_SF5=Go_math_Copysign.call(this._goroutine,[],_t6,p_y);
_Next = -5;
return this;
case -5:
this.setLatest(2653,-5);
_t7=_SF5.res();
 // _t7 = Copysign(t6, y) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:20:15
this.SubFn6();
_Phi=7;
case 8: // switch.next
this.setLatest(2653,8);
this.SubFn7();
_Phi=8;
case 9: // switch.body
this.setLatest(2653,9);
this.setPH(2655);
_SF6=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -6;
return this;
case -6:
this.setLatest(2655,-6);
_t9=_SF6.res();
 // _t9 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:22:34
this.SubFn8();
_SF7=Go_math_Float64frombits.call(this._goroutine,[],_t10);
_Next = -7;
return this;
case -7:
this.setLatest(2655,-7);
_t11=_SF7.res();
 // _t11 = Float64frombits(t10) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:22:22
this.SubFn9();
_Phi=9;
case 10: // switch.next
this.setLatest(2655,10);
this.SubFn10();
_Phi=10;
case 11: // switch.next
this.setLatest(2655,11);
this.setPH(2657);
_SF8=Go_math_Float64bits.call(this._goroutine,[],p_x);
_Next = -8;
return this;
case -8:
this.setLatest(2657,-8);
_t15=_SF8.res();
 // _t15 = Float64bits(x) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:24:34
this.SubFn11();
_SF9=Go_math_Float64frombits.call(this._goroutine,[],_t16);
_Next = -9;
return this;
case -9:
this.setLatest(2657,-9);
_t17=_SF9.res();
 // _t17 = Float64frombits(t16) *ssa.Call @ /usr/local/go/src/pkg/math/nextafter.go:24:22
this.SubFn12();
_Phi=11;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 6 : 5; // if t0 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/nextafter.go:24:22
}// end SubFn0
private inline  function SubFn1():Void {
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:24:22
}// end SubFn1
private inline  function SubFn2():Void {
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:24:22
}// end SubFn2
private inline  function SubFn3():Void {
var _t3:Bool;
this.setPH(2650);
_t3=(Force.toFloat(p_x)==Force.toFloat(p_y)); // _t3 = x == y *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:17:9
_Next=_t3 ? 3 : 8; // if t3 goto 3.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/nextafter.go:17:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:17:9
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t5 ? 2 : 4; // if t5 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/nextafter.go:17:9
}// end SubFn5
private inline  function SubFn6():Void {
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:17:9
}// end SubFn6
private inline  function SubFn7():Void {
var _t8:Bool;
this.setPH(2652);
_t8=(Force.toFloat(p_x)==Force.toFloat(0)); // _t8 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:19:9
_Next=_t8 ? 7 : 10; // if t8 goto 7.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/nextafter.go:19:9
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(2655);
_t10=Force.toUint64(GOint64.add(_t9,GOint64.make(0x0,0x1))); // _t10 = t9 + 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:22:38
}// end SubFn8
private inline  function SubFn9():Void {
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:22:38
}// end SubFn9
private inline  function SubFn10():Void {
var _t12:Bool;
var _t13:Bool;
var _t14:Bool;
this.setPH(2654);
_t12=(Force.toFloat(p_y)>Force.toFloat(p_x)); // _t12 = y > x *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:21:10
_t13=(Force.toFloat(p_x)>Force.toFloat(0)); // _t13 = x > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:21:21
_t14=(_t12==_t13); // _t14 = t12 == t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:21:15
_Next=_t14 ? 9 : 11; // if t14 goto 9.switch.body else 11.switch.next *ssa.If near /usr/local/go/src/pkg/math/nextafter.go:21:15
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(2657);
_t16=Force.toUint64(GOint64.sub(_t15,GOint64.make(0x0,0x1))); // _t16 = t15 - 1:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/nextafter.go:24:38
}// end SubFn11
private inline  function SubFn12():Void {
_Next=1; // jump 1.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/nextafter.go:24:38
}// end SubFn12
}
#if js @:expose("Go_utf8_RuneCount") #end class Go_utf8_RuneCount extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:367:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5611,"Go_utf8_RuneCount");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Int=0;
var _t2:Bool=false;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Int=0;
var _t7:Bool=false;
var _t8:Int=0;
var _t9:Int=0;
var _t10:Int=0;
var _t11:Int=0;
var _t12:Slice=null;
var _SF1:StackFrame;
var _t13:{r0:Int,r1:Int}=null;
var _t15:Int=0;
var _t16:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_RuneCount(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : Int {
var _sf=new Go_utf8_RuneCount(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_RuneCount
{return new Go_utf8_RuneCount(gr,_bds, p_p);
}
public function run():Go_utf8_RuneCount {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5611,0);
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(5611,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(5611,2);
this.setPH(5622);
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:378:2

case 3: // for.loop
this.setLatest(5622,3);
this.setPH(5612);
_t3=((_Phi==0)?0:(_Phi==5)?_t9:0); // _t3 = phi [0.entry: 0:int, 5.if.done: t9] #i *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:368:2
this.setPH(5613);
_t4=((_Phi==0)?0:(_Phi==5)?_t11:0); // _t4 = phi [0.entry: 0:int, 5.if.done: t11] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:369:6
this.setPH(5618);
_t5=((_Phi==0)?0:(_Phi==5)?_t10:0); // _t5 = phi [0.entry: 0:int, 5.if.done: t10] #size *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:7
this.SubFn2();
_Phi=3;
case 4: // if.then
this.setLatest(5618,4);
this.SubFn3();
_Phi=4;
case 5: // if.done
this.setLatest(5618,5);
this.setPH(5612);
_t9=((_Phi==4)?_t8:(_Phi==6)?_t16:0); // _t9 = phi [4.if.then: t8, 6.if.else: t16] #i *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:368:2
this.setPH(5618);
_t10=((_Phi==4)?_t5:(_Phi==6)?_t15:0); // _t10 = phi [4.if.then: t5, 6.if.else: t15] #size *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:7
this.SubFn4();
_Phi=5;
case 6: // if.else
this.setLatest(5618,6);
this.SubFn5();
_SF1=Go_utf8_DecodeRune.call(this._goroutine,[],_t12);
_Next = -1;
return this;
case -1:
this.setLatest(5618,-1);
_t13=_SF1.res();
 // _t13 = DecodeRune(t12) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:25
this.SubFn6();
_Phi=6;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:25
}// end SubFn0
private inline  function SubFn1():Void {
var _t0:Pointer;
var _t1:Int;
var _t2:Bool;
this.setPH(5615);
if((_t3<0)||(_t3>=p_p.len())) Scheduler.ioor(); // _t0 = &p[t3] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:371:7 [POINTER]
_t0=p_p.addr(_t3);  // _t0 = &p[t3] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:371:7 [POINTER]
_t1=(_t0.load()|0); // _t1 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:371:7
_t2=(Force.uintCompare(_t1,128)<0); // _t2 = t1 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:371:11
_Next=_t2 ? 4 : 6; // if t2 goto 4.if.then else 6.if.else *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:371:11
}// end SubFn1
private inline  function SubFn2():Void {
var _t6:Int;
var _t7:Bool;
this.setPH(5614);
_t6=({var _v=p_p;_v==null?0:_v.len();}); // _t6 = len(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:20
_t7=(_t3<_t6); // _t7 = t3 < t6 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
_Next=_t7 ? 1 : 2; // if t7 goto 1.for.body else 2.for.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
}// end SubFn2
private inline  function SubFn3():Void {
_t8=(_t3+1); // _t8 = t3 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
_Next=5; // jump 5.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
}// end SubFn3
private inline  function SubFn4():Void {
_t11=(_t4+1); // _t11 = t4 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:370:15
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(5618);
_t12=p_p.subSlice(_t3,-1); // _t12 = slice p[t3:] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:27
}// end SubFn5
private inline  function SubFn6():Void {
 // _t14 = extract t13 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:27 [REGISTER VALUE UN-USED]
_t15=_t13.r1; // _t15 = extract t13 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:27
_t16=(_t3+_t15); // _t16 = t3 + t15 *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:27
_Next=5; // jump 5.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:374:27
}// end SubFn6
}
#if (!php) private #end class Go_math_atan2 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/atan2.go:31:6
var p_y:Float;
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_y : Float, p_x : Float) {
super(gr,176,"Go_math_atan2");
this._bds=_bds;
this.p_y=p_y;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _t3:Bool=false;
var _SF3:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF4:StackFrame;
var _t6:Float=0.0;
var _t7:Bool=false;
var _SF5:StackFrame;
var _t8:Float=0.0;
var _SF6:StackFrame;
var _t9:Float=0.0;
var _SF7:StackFrame;
var _t10:Bool=false;
var _SF8:StackFrame;
var _t11:Bool=false;
var _SF9:StackFrame;
var _t12:Bool=false;
var _SF10:StackFrame;
var _t13:Float=0.0;
var _SF11:StackFrame;
var _t14:Bool=false;
var _SF12:StackFrame;
var _t15:Bool=false;
var _SF13:StackFrame;
var _t16:Bool=false;
var _SF14:StackFrame;
var _t17:Float=0.0;
var _SF15:StackFrame;
var _t18:Float=0.0;
var _SF16:StackFrame;
var _t19:Float=0.0;
var _SF17:StackFrame;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _SF18:StackFrame;
var _t22:Float=0.0;
var _t23:Bool=false;
var _t24:Bool=false;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_y : Float, p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_atan2(0,[], p_y, p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_y : Float, p_x : Float) : Float {
var _sf=new Go_math_atan2(_gr,[], p_y, p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_y : Float, p_x : Float) : Go_math_atan2
{return new Go_math_atan2(gr,_bds, p_y, p_x);
}
public function run():Go_math_atan2 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(176,0);
this.setPH(179);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -1;
return this;
case -1:
this.setLatest(179,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:34:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(179,1);
this.setPH(180);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:35:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:35:3

case 2: // switch.body
this.setLatest(180,2);
this.SubFn1();
_Phi=2;
case 3: // switch.next
this.setLatest(180,3);
this.SubFn2();
_Phi=3;
case 4: // binop.rhs
this.setLatest(180,4);
this.setPH(179);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(179,-3);
_t4=_SF3.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:34:24
this.SubFn3();
_Phi=4;
case 5: // binop.done
this.setLatest(179,5);
_t5=((_Phi==0)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/atan2.go:34:16
this.SubFn4();
_Phi=5;
case 6: // switch.body
this.setLatest(179,6);
this.setPH(187);
_SF4=Go_math_Copysign.call(this._goroutine,[],1.5707963267948966,p_y);
_Next = -4;
return this;
case -4:
this.setLatest(187,-4);
_t6=_SF4.res();
 // _t6 = Copysign(314159265358979323846264338327950288419716939937510582097494459/200000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:42:18
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:42:3

case 7: // switch.next
this.setLatest(187,7);
this.SubFn5();
_Phi=7;
case 8: // if.then
this.setLatest(187,8);
this.setPH(183);
_SF5=Go_math_Copysign.call(this._goroutine,[],0,p_y);
_Next = -5;
return this;
case -5:
this.setLatest(183,-5);
_t8=_SF5.res();
 // _t8 = Copysign(0:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:38:19
_res= _t8;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t8 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:38:4

case 9: // if.done
this.setLatest(183,9);
this.setPH(185);
_SF6=Go_math_Copysign.call(this._goroutine,[],3.141592653589793,p_y);
_Next = -6;
return this;
case -6:
this.setLatest(185,-6);
_t9=_SF6.res();
 // _t9 = Copysign(314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:40:18
_res= _t9;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t9 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:40:3

case 10: // cond.true
this.setLatest(185,10);
this.setPH(182);
_SF7=Go_math_Signbit.call(this._goroutine,[],p_x);
_Next = -7;
return this;
case -7:
this.setLatest(182,-7);
_t10=_SF7.res();
 // _t10 = Signbit(x) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:37:24
this.SubFn6();
_Phi=10;
case 11: // switch.body
this.setLatest(182,11);
this.setPH(189);
_SF8=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -8;
return this;
case -8:
this.setLatest(189,-8);
_t11=_SF8.res();
 // _t11 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:44:11
this.SubFn7();
_Phi=11;
case 12: // switch.next
this.setLatest(189,12);
this.setPH(188);
_SF9=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -9;
return this;
case -9:
this.setLatest(188,-9);
_t12=_SF9.res();
 // _t12 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:43:12
this.SubFn8();
_Phi=12;
case 13: // switch.body
this.setLatest(188,13);
this.setPH(204);
_SF10=Go_math_Copysign.call(this._goroutine,[],1.5707963267948966,p_y);
_Next = -10;
return this;
case -10:
this.setLatest(204,-10);
_t13=_SF10.res();
 // _t13 = Copysign(314159265358979323846264338327950288419716939937510582097494459/200000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:59:18
_res= _t13;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t13 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:59:3

case 14: // switch.next
this.setLatest(204,14);
this.setPH(203);
_SF11=Go_math_IsInf.call(this._goroutine,[],p_y,0);
_Next = -11;
return this;
case -11:
this.setLatest(203,-11);
_t14=_SF11.res();
 // _t14 = IsInf(y, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:58:12
this.SubFn9();
_Phi=14;
case 15: // if.then
this.setLatest(203,15);
this.setPH(191);
_SF12=Go_math_IsInf.call(this._goroutine,[],p_y,0);
_Next = -12;
return this;
case -12:
this.setLatest(191,-12);
_t15=_SF12.res();
 // _t15 = IsInf(y, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:46:14
this.SubFn10();
_Phi=15;
case 16: // if.done
this.setLatest(191,16);
this.setPH(198);
_SF13=Go_math_IsInf.call(this._goroutine,[],p_y,0);
_Next = -13;
return this;
case -13:
this.setLatest(198,-13);
_t16=_SF13.res();
 // _t16 = IsInf(y, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:53:13
this.SubFn11();
_Phi=16;
case 17: // switch.body
this.setLatest(198,17);
this.setPH(192);
_SF14=Go_math_Copysign.call(this._goroutine,[],0.7853981633974483,p_y);
_Next = -14;
return this;
case -14:
this.setLatest(192,-14);
_t17=_SF14.res();
 // _t17 = Copysign(314159265358979323846264338327950288419716939937510582097494459/400000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:47:20
_res= _t17;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t17 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:47:5

case 18: // switch.next
this.setLatest(192,18);
this.setPH(194);
_SF15=Go_math_Copysign.call(this._goroutine,[],0,p_y);
_Next = -15;
return this;
case -15:
this.setLatest(194,-15);
_t18=_SF15.res();
 // _t18 = Copysign(0:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:49:20
_res= _t18;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:49:5

case 19: // switch.body
this.setLatest(194,19);
this.setPH(199);
_SF16=Go_math_Copysign.call(this._goroutine,[],2.356194490192345,p_y);
_Next = -16;
return this;
case -16:
this.setLatest(199,-16);
_t19=_SF16.res();
 // _t19 = Copysign(942477796076937971538793014983850865259150819812531746292483377/400000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:54:19
_res= _t19;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t19 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:54:4

case 20: // switch.next
this.setLatest(199,20);
this.setPH(201);
_SF17=Go_math_Copysign.call(this._goroutine,[],3.141592653589793,p_y);
_Next = -17;
return this;
case -17:
this.setLatest(201,-17);
_t20=_SF17.res();
 // _t20 = Copysign(314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64, y) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:56:19
_res= _t20;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t20 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:56:4

case 21: // switch.next
this.setLatest(201,21);
this.SubFn12();
this.setPH(208);
_t22=Math.atan(_t21); // _t22 = Atan(t21) *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:63:11
this.SubFn13();
_Phi=21;
case 22: // if.then
this.setLatest(208,22);
this.SubFn14();
_Phi=22;
case 23: // if.done
this.setLatest(208,23);
this.setPH(215);
_res= _t22;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t22 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:70:2

case 24: // if.then
this.setLatest(215,24);
this.SubFn15();
this.setPH(211);
_res= _t25;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t25 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:66:4

case 25: // if.done
this.setLatest(211,25);
this.SubFn16();
this.setPH(213);
_res= _t26;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t26 *ssa.Return @ /usr/local/go/src/pkg/math/atan2.go:68:3

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/atan2.go:68:3
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(182);
_t2=(Force.toFloat(p_x)>=Force.toFloat(0)); // _t2 = x >= 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:37:8
_Next=_t2 ? 10 : 9; // if t2 goto 10.cond.true else 9.if.done *ssa.If near /usr/local/go/src/pkg/math/atan2.go:37:8
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
this.setPH(181);
_t3=(Force.toFloat(p_y)==Force.toFloat(0)); // _t3 = y == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:36:9
_Next=_t3 ? 2 : 7; // if t3 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:36:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/atan2.go:36:9
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:36:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(186);
_t7=(Force.toFloat(p_x)==Force.toFloat(0)); // _t7 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:41:9
_Next=_t7 ? 6 : 12; // if t7 goto 6.switch.body else 12.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t10 ? 9 : 8; // if t10 goto 9.if.done else 8.if.then *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn6
private inline  function SubFn7():Void {
_Next=_t11 ? 15 : 16; // if t11 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn7
private inline  function SubFn8():Void {
_Next=_t12 ? 11 : 14; // if t12 goto 11.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t14 ? 13 : 21; // if t14 goto 13.switch.body else 21.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn9
private inline  function SubFn10():Void {
_Next=_t15 ? 17 : 18; // if t15 goto 17.switch.body else 18.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn10
private inline  function SubFn11():Void {
_Next=_t16 ? 19 : 20; // if t16 goto 19.switch.body else 20.switch.next *ssa.If near /usr/local/go/src/pkg/math/atan2.go:41:9
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(208);
_t21=Force.floatDiv(Force.toFloat(p_y),Force.toFloat(p_x)); // _t21 = y / x *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:63:14
}// end SubFn12
private inline  function SubFn13():Void {
var _t23:Bool;
this.setPH(209);
_t23=(Force.toFloat(p_x)<Force.toFloat(0)); // _t23 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:64:7
_Next=_t23 ? 22 : 23; // if t23 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/atan2.go:64:7
}// end SubFn13
private inline  function SubFn14():Void {
var _t24:Bool;
this.setPH(210);
_t24=(Force.toFloat(_t22)<=Force.toFloat(0)); // _t24 = t22 <= 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:65:8
_Next=_t24 ? 24 : 25; // if t24 goto 24.if.then else 25.if.done *ssa.If near /usr/local/go/src/pkg/math/atan2.go:65:8
}// end SubFn14
private inline  function SubFn15():Void {
this.setPH(211);
_t25=(Force.toFloat(_t22)+Force.toFloat(3.141592653589793)); // _t25 = t22 + 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:66:13
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(213);
_t26=(Force.toFloat(_t22)-Force.toFloat(3.141592653589793)); // _t26 = t22 - 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:68:12
}// end SubFn16
}
#if js @:expose("Go_math_Y1") #end class Go_math_Y1 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j1.go:154:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4576,"Go_math_Y1");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Float=0.0;
var _t6:Bool=false;
var _t7:Bool=false;
var _SF5:StackFrame;
var _t8:{r0:Float,r1:Float}=null;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Bool=false;
var _t15:Bool=false;
var _t16:Float=0.0;
var _SF6:StackFrame;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Bool=false;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _SF7:StackFrame;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _SF8:StackFrame;
var _t29:Float=0.0;
var _SF9:StackFrame;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _SF10:StackFrame;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _SF11:StackFrame;
var _t59:Float=0.0;
var _SF12:StackFrame;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Y1(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Y1(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Y1
{return new Go_math_Y1(gr,_bds, p_x);
}
public function run():Go_math_Y1 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4576,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(4576,1);
this.setPH(4594);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:172:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:172:3

case 2: // switch.body
this.setLatest(4594,2);
this.setPH(4596);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:174:3

case 3: // switch.next
this.setLatest(4596,3);
this.setPH(4595);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -2;
return this;
case -2:
this.setLatest(4595,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:173:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(4595,4);
this.setPH(4593);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(4593,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:171:21
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(4593,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:171:13
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(4593,6);
this.setPH(4598);
_t5=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t5 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:176:13
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:176:3

case 7: // switch.next
this.setLatest(4598,7);
this.SubFn4();
_Phi=7;
case 8: // switch.next
this.setLatest(4598,8);
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(4598,9);
this.setPH(4602);
_SF5=Go_math_sincos.call(this._goroutine,[],p_x);
_Next = -5;
return this;
case -5:
this.setLatest(4602,-5);
_t8=_SF5.res();
 // _t8 = Sincos(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:180:17
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(4602,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(4602,11);
this.SubFn8();
this.setPH(4608);
_t17=Math.cos(_t16); // _t17 = Cos(t16) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:186:12
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(4608,12);
this.setPH(4603);
_t20=((_Phi==9)?_t12:(_Phi==13)?_t12:(_Phi==14)?_t24:0.0); // _t20 = phi [9.if.then: t12, 13.if.then: t12, 14.if.else: t24] #ss *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:181:3
this.setPH(4604);
_t21=((_Phi==9)?_t13:(_Phi==13)?_t23:(_Phi==14)?_t13:0.0); // _t21 = phi [9.if.then: t13, 13.if.then: t23, 14.if.else: t13] #cc *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:182:3
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(4604,13);
this.SubFn11();
_Phi=13;
case 14: // if.else
this.setLatest(4604,14);
this.SubFn12();
_Phi=14;
case 15: // if.then
this.setLatest(4604,15);
this.SubFn13();
this.setPH(4628);
_t26=Math.sqrt(p_x); // _t26 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:206:32
this.SubFn14();
_Phi=15;
case 16: // if.done
this.setLatest(4628,16);
this.setPH(4626);
_t28=((_Phi==15)?_t27:(_Phi==17)?_t36:0.0); // _t28 = phi [15.if.then: t27, 17.if.else: t36] #z *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:204:7
this.setPH(4634);
_res= _t28;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t28 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:212:3

case 17: // if.else
this.setLatest(4634,17);
this.setPH(4630);
_SF8=Go_math_pone.call(this._goroutine,[],p_x);
_Next = -8;
return this;
case -8:
this.setLatest(4630,-8);
_t29=_SF8.res();
 // _t29 = pone(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:208:13
this.setPH(4631);
_SF9=Go_math_qone.call(this._goroutine,[],p_x);
_Next = -9;
return this;
case -9:
this.setLatest(4631,-9);
_t30=_SF9.res();
 // _t30 = qone(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:209:13
this.SubFn15();
this.setPH(4632);
_t35=Math.sqrt(p_x); // _t35 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:210:43
this.SubFn16();
_Phi=17;
case 18: // if.then
this.setLatest(4632,18);
this.SubFn17();
this.setPH(4637);
_res= _t37;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t37 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:215:3

case 19: // if.done
this.setLatest(4637,19);
this.SubFn18();
this.setPH(4642);
_SF11=Go_math_J1.call(this._goroutine,[],p_x);
_Next = -11;
return this;
case -11:
this.setLatest(4642,-11);
_t59=_SF11.res();
 // _t59 = J1(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:220:29
_t60=Math.log(p_x); // _t60 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:220:36
this.SubFn19();
_res= _t65;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t65 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:220:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(4593);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:171:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/j1.go:171:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 7; // if t2 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/j1.go:171:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:171:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/j1.go:171:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t6:Bool;
this.setPH(4597);
_t6=(Force.toFloat(p_x)==Force.toFloat(0)); // _t6 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:175:9
_Next=_t6 ? 6 : 8; // if t6 goto 6.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/j1.go:175:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(4601);
_t7=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t7 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:179:7
_Next=_t7 ? 9 : 10; // if t7 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:179:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t11:Float;
var _t14:Bool;
_t9=_t8.r0; // _t9 = extract t8 #0 *ssa.Extract near /usr/local/go/src/pkg/math/j1.go:179:7
_t10=_t8.r1; // _t10 = extract t8 #1 *ssa.Extract near /usr/local/go/src/pkg/math/j1.go:179:7
this.setPH(4603);
_t11=(-Force.toFloat(_t9)); // _t11 = -t9 *ssa.UnOp @ /usr/local/go/src/pkg/math/j1.go:181:9
_t12=(Force.toFloat(_t11)-Force.toFloat(_t10)); // _t12 = t11 - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:181:12
this.setPH(4604);
_t13=(Force.toFloat(_t9)-Force.toFloat(_t10)); // _t13 = t9 - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:182:11
this.setPH(4607);
_t14=(Force.toFloat(p_x)<Force.toFloat(8.988465674311579e+307)); // _t14 = x < 89884656743115785407263711865852178399050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:185:8
_Next=_t14 ? 11 : 12; // if t14 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:185:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t15:Bool;
this.setPH(4636);
_t15=(Force.toFloat(p_x)<=Force.toFloat(5.551115123125783e-17)); // _t15 = x <= 1/18014398509481984:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:214:7
_Next=_t15 ? 18 : 19; // if t15 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:214:7
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(4608);
_t16=(Force.toFloat(p_x)+Force.toFloat(p_x)); // _t16 = x + x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:186:15
}// end SubFn8
private inline  function SubFn9():Void {
var _t18:Float;
var _t19:Bool;
this.setPH(4609);
_t18=(Force.toFloat(_t9)*Force.toFloat(_t10)); // _t18 = t9 * t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:187:8
_t19=(Force.toFloat(_t18)>Force.toFloat(0)); // _t19 = t18 > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:187:11
_Next=_t19 ? 13 : 14; // if t19 goto 13.if.then else 14.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:187:11
}// end SubFn9
private inline  function SubFn10():Void {
var _t22:Bool;
this.setPH(4627);
_t22=(Force.toFloat(p_x)>Force.toFloat(6.80564733841877e+38)); // _t22 = x > 680564733841876926926749214863536422912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:205:8
_Next=_t22 ? 15 : 17; // if t22 goto 15.if.then else 17.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:205:8
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(4610);
_t23=Force.floatDiv(Force.toFloat(_t17),Force.toFloat(_t12)); // _t23 = t17 / t12 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:188:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:188:12
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(4612);
_t24=Force.floatDiv(Force.toFloat(_t17),Force.toFloat(_t13)); // _t24 = t17 / t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:190:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:190:12
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(4628);
_t25=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t20)); // _t25 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:206:21
}// end SubFn13
private inline  function SubFn14():Void {
_t27=Force.floatDiv(Force.toFloat(_t25),Force.toFloat(_t26)); // _t27 = t25 / t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:206:26
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:206:26
}// end SubFn14
private inline  function SubFn15():Void {
var _t31:Float;
var _t32:Float;
var _t33:Float;
this.setPH(4632);
_t31=(Force.toFloat(_t29)*Force.toFloat(_t20)); // _t31 = t29 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:25
_t32=(Force.toFloat(_t30)*Force.toFloat(_t21)); // _t32 = t30 * t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:32
_t33=(Force.toFloat(_t31)+Force.toFloat(_t32)); // _t33 = t31 + t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:29
_t34=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t33)); // _t34 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:21
}// end SubFn15
private inline  function SubFn16():Void {
_t36=Force.floatDiv(Force.toFloat(_t34),Force.toFloat(_t35)); // _t36 = t34 / t35 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:37
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:210:37
}// end SubFn16
private inline  function SubFn17():Void {
this.setPH(4637);
_t37=Force.floatDiv(Force.toFloat((-0.6366197723675814)),Force.toFloat(p_x)); // _t37 = -200000000000000000000000000000000000000000000000000000000000000/314159265358979323846264338327950288419716939937510582097494459:float64 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:215:20
}// end SubFn17
private inline  function SubFn18():Void {
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Float;
var _t54:Float;
var _t55:Float;
var _t57:Float;
this.setPH(4639);
_t38=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t38 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:217:9
this.setPH(4640);
_t39=(Force.toFloat(_t38)*Force.toFloat((-9.190991580398789e-08))); // _t39 = t38 * -114887394754984859313/1250000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:35
_t40=(Force.toFloat(2.352526005616105e-05)+Force.toFloat(_t39)); // _t40 = 29406575070201311991/1250000000000000000000000:float64 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:33
_t41=(Force.toFloat(_t38)*Force.toFloat(_t40)); // _t41 = t38 * t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:28
_t42=(Force.toFloat((-0.0019125689587576355))+Force.toFloat(_t41)); // _t42 = -95628447937881773649/50000000000000000000000:float64 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:26
_t43=(Force.toFloat(_t38)*Force.toFloat(_t42)); // _t43 = t38 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:21
_t44=(Force.toFloat(0.05044387166398113)+Force.toFloat(_t43)); // _t44 = 63054839579976410327/1250000000000000000000:float64 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:19
_t45=(Force.toFloat(_t38)*Force.toFloat(_t44)); // _t45 = t38 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:14
_t46=(Force.toFloat((-0.19605709064623894))+Force.toFloat(_t45)); // _t46 = -49014272661559735167/250000000000000000000:float64 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:11
this.setPH(4641);
_t47=(Force.toFloat(_t38)*Force.toFloat(1.6655924620799208e-11)); // _t47 = t38 * 83279623103996039557/5000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:40
_t48=(Force.toFloat(6.227414523646215e-09)+Force.toFloat(_t47)); // _t48 = 124548290472924300259/20000000000000000000000000000:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:38
_t49=(Force.toFloat(_t38)*Force.toFloat(_t48)); // _t49 = t38 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:33
_t50=(Force.toFloat(1.3560880109751623e-06)+Force.toFloat(_t49)); // _t50 = 33902200274379057351/25000000000000000000000000:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:31
_t51=(Force.toFloat(_t38)*Force.toFloat(_t50)); // _t51 = t38 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:26
_t52=(Force.toFloat(0.00020255258102513517)+Force.toFloat(_t51)); // _t52 = 25319072628141896437/125000000000000000000000:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:24
_t53=(Force.toFloat(_t38)*Force.toFloat(_t52)); // _t53 = t38 * t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:19
_t54=(Force.toFloat(0.01991673182366499)+Force.toFloat(_t53)); // _t54 = 199167318236649903973/10000000000000000000000:float64 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:17
_t55=(Force.toFloat(_t38)*Force.toFloat(_t54)); // _t55 = t38 * t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:12
_t56=(Force.toFloat(1)+Force.toFloat(_t55)); // _t56 = 1:float64 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:9
this.setPH(4642);
_t57=Force.floatDiv(Force.toFloat(_t46),Force.toFloat(_t56)); // _t57 = t46 / t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:13
_t58=(Force.toFloat(p_x)*Force.toFloat(_t57)); // _t58 = x * t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:10
}// end SubFn18
private inline  function SubFn19():Void {
var _t61:Float;
var _t62:Float;
var _t63:Float;
var _t64:Float;
_t61=(Force.toFloat(_t59)*Force.toFloat(_t60)); // _t61 = t59 * t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:32
_t62=Force.floatDiv(Force.toFloat(1),Force.toFloat(p_x)); // _t62 = 1:float64 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:41
_t63=(Force.toFloat(_t61)-Force.toFloat(_t62)); // _t63 = t61 - t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:39
_t64=(Force.toFloat(0.6366197723675814)*Force.toFloat(_t63)); // _t64 = 200000000000000000000000000000000000000000000000000000000000000/314159265358979323846264338327950288419716939937510582097494459:float64 * t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:25
_t65=(Force.toFloat(_t58)+Force.toFloat(_t64)); // _t65 = t58 + t64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:17
}// end SubFn19
}
#if (!php) private #end class Go_math_isOddInt extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/pow.go:7:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3577,"Go_math_isOddInt");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:{r0:Float,r1:Float}=null;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _t3:Bool=false;
var _t4:GOint64=null;
var _t5:GOint64=null;
var _t6:Bool=false;
var _t7:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_isOddInt(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Bool {
var _sf=new Go_math_isOddInt(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_isOddInt
{return new Go_math_isOddInt(gr,_bds, p_x);
}
public function run():Go_math_isOddInt {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3577,0);
this.setPH(3578);
_SF1=Go_math_modf.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(3578,-1);
_t0=_SF1.res();
 // _t0 = Modf(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:8:16
this.SubFn0();
_Phi=0;
case 1: // binop.rhs
this.setLatest(3578,1);
this.SubFn1();
_Phi=1;
case 2: // binop.done
this.setLatest(3578,2);
this.setPH(3579);
_t7=((_Phi==0)?false:(_Phi==1)?_t6:false); // _t7 = phi [0.entry: false:bool, 1.binop.rhs: t6] #&& *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:9:17
_res= _t7;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t7 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:9:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t3:Bool;
_t1=_t0.r0; // _t1 = extract t0 #0 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:9:2
_t2=_t0.r1; // _t2 = extract t0 #1 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:9:2
_t3=(Force.toFloat(_t2)==Force.toFloat(0)); // _t3 = t2 == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:9:12
_Next=_t3 ? 1 : 2; // if t3 goto 1.binop.rhs else 2.binop.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:9:12
}// end SubFn0
private inline  function SubFn1():Void {
var _t4:GOint64;
var _t5:GOint64;
_t4=GOint64.ofFloat(_t1); // _t4 = convert int64 <- float64 (t1) *ssa.Convert @ /usr/local/go/src/pkg/math/pow.go:9:25
_t5=Force.toInt64(GOint64.and(_t4,GOint64.make(0x0,0x1))); // _t5 = t4 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:9:29
_t6=(GOint64.compare(_t5,GOint64.make(0x0,0x1))==0); // _t6 = t5 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:9:32
_Next=2; // jump 2.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:9:32
}// end SubFn1
}
#if (!php) private #end class Go_math_max extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/dim.go:28:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,1670,"Go_math_max");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Float=0.0;
var _SF4:StackFrame;
var _t3:Bool=false;
var _SF5:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF6:StackFrame;
var _t6:Bool=false;
var _t7:Bool=false;
var _SF7:StackFrame;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_max(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_max(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_max
{return new Go_math_max(gr,_bds, p_x, p_y);
}
public function run():Go_math_max {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1670,0);
this.setPH(1673);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -1;
return this;
case -1:
this.setLatest(1673,-1);
_t0=_SF1.res();
 // _t0 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:31:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1673,1);
this.setPH(1674);
_t1=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t1 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:32:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:32:3

case 2: // switch.body
this.setLatest(1674,2);
this.setPH(1676);
_t2=Math.NaN; // _t2 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:34:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:34:3

case 3: // switch.next
this.setLatest(1676,3);
this.setPH(1675);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(1675,-4);
_t3=_SF4.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:33:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1675,4);
this.setPH(1673);
_SF5=Go_math_IsInf.call(this._goroutine,[],p_y,1);
_Next = -5;
return this;
case -5:
this.setLatest(1673,-5);
_t4=_SF5.res();
 // _t4 = IsInf(y, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:31:27
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1673,5);
_t5=((_Phi==0)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:31:19
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(1673,6);
this.setPH(1678);
_SF6=Go_math_Signbit.call(this._goroutine,[],p_x);
_Next = -6;
return this;
case -6:
this.setLatest(1678,-6);
_t6=_SF6.res();
 // _t6 = Signbit(x) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:36:13
this.SubFn4();
_Phi=6;
case 7: // switch.next
this.setLatest(1678,7);
this.SubFn5();
_Phi=7;
case 8: // binop.rhs
this.setLatest(1678,8);
this.setPH(1675);
_SF7=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -7;
return this;
case -7:
this.setLatest(1675,-7);
_t8=_SF7.res();
 // _t8 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:33:24
this.SubFn6();
_Phi=8;
case 9: // binop.done
this.setLatest(1675,9);
_t9=((_Phi==3)?true:(_Phi==8)?_t8:false); // _t9 = phi [3.switch.next: true:bool, 8.binop.rhs: t8] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:33:16
this.SubFn7();
_Phi=9;
case 10: // switch.next
this.setLatest(1675,10);
this.SubFn8();
_Phi=10;
case 11: // binop.rhs
this.setLatest(1675,11);
this.SubFn9();
_Phi=11;
case 12: // binop.done
this.setLatest(1675,12);
this.setPH(1677);
_t12=((_Phi==7)?false:(_Phi==11)?_t11:false); // _t12 = phi [7.switch.next: false:bool, 11.binop.rhs: t11] #&& *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:35:14
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(1677,13);
this.setPH(1679);
_res= p_y;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return y *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:37:4

case 14: // if.done
this.setLatest(1679,14);
this.setPH(1681);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:39:3

case 15: // if.then
this.setLatest(1681,15);
this.setPH(1684);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:42:3

case 16: // if.done
this.setLatest(1684,16);
this.setPH(1686);
_res= p_y;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return y *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:44:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/dim.go:44:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t3 ? 9 : 8; // if t3 goto 9.binop.done else 8.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/dim.go:44:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:44:2
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:44:2
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t6 ? 13 : 14; // if t6 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:44:2
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(1677);
_t7=(Force.toFloat(p_x)==Force.toFloat(0)); // _t7 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:35:9
_Next=_t7 ? 11 : 12; // if t7 goto 11.binop.rhs else 12.binop.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:35:9
}// end SubFn5
private inline  function SubFn6():Void {
_Next=9; // jump 9.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:35:9
}// end SubFn6
private inline  function SubFn7():Void {
_Next=_t9 ? 2 : 7; // if t9 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:35:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t10:Bool;
this.setPH(1683);
_t10=(Force.toFloat(p_x)>Force.toFloat(p_y)); // _t10 = x > y *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:41:7
_Next=_t10 ? 15 : 16; // if t10 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:41:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(1677);
_t11=(Force.toFloat(p_x)==Force.toFloat(p_y)); // _t11 = x == y *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:35:19
_Next=12; // jump 12.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:35:19
}// end SubFn9
private inline  function SubFn10():Void {
_Next=_t12 ? 6 : 10; // if t12 goto 6.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:35:19
}// end SubFn10
}
#if (!php) private #end class Go_math_exp extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/exp.go:92:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1071,"Go_math_exp");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _SF3:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _SF4:StackFrame;
var _t4:Float=0.0;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Float=0.0;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Int=0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _SF5:StackFrame;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Int=0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Int=0;
var _t25:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_exp(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_exp(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_exp
{return new Go_math_exp(gr,_bds, p_x);
}
public function run():Go_math_exp {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1071,0);
this.setPH(1084);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(1084,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:105:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1084,1);
this.setPH(1085);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:106:3

case 2: // switch.body
this.setLatest(1085,2);
this.setPH(1087);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:108:3

case 3: // switch.next
this.setLatest(1087,3);
this.setPH(1086);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -2;
return this;
case -2:
this.setLatest(1086,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:107:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1086,4);
this.setPH(1084);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -3;
return this;
case -3:
this.setLatest(1084,-3);
_t2=_SF3.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:105:24
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1084,5);
_t3=((_Phi==0)?true:(_Phi==4)?_t2:false); // _t3 = phi [0.entry: true:bool, 4.binop.rhs: t2] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/exp.go:105:16
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(1084,6);
this.setPH(1089);
_t4=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t4 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:110:13
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:110:3

case 7: // switch.next
this.setLatest(1089,7);
this.SubFn4();
_Phi=7;
case 8: // switch.body
this.setLatest(1089,8);
this.setPH(1091);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:112:3

case 9: // switch.next
this.setLatest(1091,9);
this.SubFn5();
_Phi=9;
case 10: // switch.body
this.setLatest(1091,10);
this.SubFn6();
this.setPH(1093);
_res= _t7;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t7 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:114:3

case 11: // switch.next
this.setLatest(1093,11);
this.SubFn7();
_Phi=11;
case 12: // switch.next
this.setLatest(1093,12);
this.SubFn8();
_Phi=12;
case 13: // binop.rhs
this.setLatest(1093,13);
this.SubFn9();
_Phi=13;
case 14: // binop.done
this.setLatest(1093,14);
this.setPH(1092);
_t11=((_Phi==11)?false:(_Phi==13)?_t10:false); // _t11 = phi [11.switch.next: false:bool, 13.binop.rhs: t10] #&& *ssa.Phi @ /usr/local/go/src/pkg/math/exp.go:113:21
this.SubFn10();
_Phi=14;
case 15: // switch.done
this.setLatest(1092,15);
this.setPH(1097);
_t12=((_Phi==16)?_t21:(_Phi==17)?_t24:(_Phi==18)?0:0); // _t12 = phi [16.switch.body: t21, 17.switch.body: t24, 18.switch.next: 0:int] #k *ssa.Phi @ /usr/local/go/src/pkg/math/exp.go:118:6
this.SubFn11();
this.setPH(1108);
_SF5=Go_math_expmulti.call(this._goroutine,[],_t15,_t17,_t12);
_Next = -5;
return this;
case -5:
this.setLatest(1108,-5);
_t18=_SF5.res();
 // _t18 = expmulti(t15, t17, t12) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:129:17
_res= _t18;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:129:2

case 16: // switch.body
this.setLatest(1108,16);
this.SubFn12();
_Phi=16;
case 17: // switch.body
this.setLatest(1108,17);
this.SubFn13();
_Phi=17;
case 18: // switch.next
this.setLatest(1108,18);
this.SubFn14();
_Phi=18;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/exp.go:129:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 7; // if t1 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:129:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:129:2
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 1 : 3; // if t3 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:129:2
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(1088);
_t5=(Force.toFloat(p_x)>Force.toFloat(709.782712893384)); // _t5 = x > 88722839111672996637/125000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:109:9
_Next=_t5 ? 6 : 9; // if t5 goto 6.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:109:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t6:Bool;
this.setPH(1090);
_t6=(Force.toFloat(p_x)<Force.toFloat((-745.1332191019411))); // _t6 = x < -37256660955097055421/50000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:111:9
_Next=_t6 ? 8 : 11; // if t6 goto 8.switch.body else 11.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:111:9
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(1093);
_t7=(Force.toFloat(1)+Force.toFloat(p_x)); // _t7 = 1:float64 + x *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:114:12
}// end SubFn6
private inline  function SubFn7():Void {
var _t8:Bool;
this.setPH(1092);
_t8=(Force.toFloat((-3.725290298461914e-09))<Force.toFloat(p_x)); // _t8 = -1/268435456:float64 < x *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:113:17
_Next=_t8 ? 13 : 14; // if t8 goto 13.binop.rhs else 14.binop.done *ssa.If near /usr/local/go/src/pkg/math/exp.go:113:17
}// end SubFn7
private inline  function SubFn8():Void {
var _t9:Bool;
this.setPH(1099);
_t9=(Force.toFloat(p_x)<Force.toFloat(0)); // _t9 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:120:9
_Next=_t9 ? 16 : 18; // if t9 goto 16.switch.body else 18.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:120:9
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(1092);
_t10=(Force.toFloat(p_x)<Force.toFloat(3.725290298461914e-09)); // _t10 = x < 1/268435456:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:113:26
_Next=14; // jump 14.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:113:26
}// end SubFn9
private inline  function SubFn10():Void {
_Next=_t11 ? 10 : 12; // if t11 goto 10.switch.body else 12.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:113:26
}// end SubFn10
private inline  function SubFn11():Void {
var _t13:Float;
var _t14:Float;
var _t16:Float;
this.setPH(1104);
_t13=_t12; // _t13 = convert float64 <- int (t12) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:125:19
_t14=(Force.toFloat(_t13)*Force.toFloat(0.6931471803691238)); // _t14 = t13 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:125:22
_t15=(Force.toFloat(p_x)-Force.toFloat(_t14)); // _t15 = x - t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:125:10
this.setPH(1105);
_t16=_t12; // _t16 = convert float64 <- int (t12) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:126:15
_t17=(Force.toFloat(_t16)*Force.toFloat(1.9082149292705877e-10)); // _t17 = t16 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:126:19
}// end SubFn11
private inline  function SubFn12():Void {
var _t19:Float;
var _t20:Float;
this.setPH(1100);
_t19=(Force.toFloat(1.4426950408889634)*Force.toFloat(p_x)); // _t19 = 1442695040888963387/1000000000000000000:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:121:16
_t20=(Force.toFloat(_t19)-Force.toFloat(0.5)); // _t20 = t19 - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:121:19
_t21={var _f:Float=_t20;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t21 = convert int <- float64 (t20) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:121:10
_Next=15; // jump 15.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:121:10
}// end SubFn12
private inline  function SubFn13():Void {
var _t22:Float;
var _t23:Float;
this.setPH(1102);
_t22=(Force.toFloat(1.4426950408889634)*Force.toFloat(p_x)); // _t22 = 1442695040888963387/1000000000000000000:float64 * x *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:123:16
_t23=(Force.toFloat(_t22)+Force.toFloat(0.5)); // _t23 = t22 + 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:123:19
_t24={var _f:Float=_t23;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t24 = convert int <- float64 (t23) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:123:10
_Next=15; // jump 15.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:123:10
}// end SubFn13
private inline  function SubFn14():Void {
var _t25:Bool;
this.setPH(1101);
_t25=(Force.toFloat(p_x)>Force.toFloat(0)); // _t25 = x > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:122:9
_Next=_t25 ? 17 : 15; // if t25 goto 17.switch.body else 15.switch.done *ssa.If near /usr/local/go/src/pkg/math/exp.go:122:9
}// end SubFn14
}
#if (!php) private #end class Go_main_init extends StackFrameBasis implements StackFrame { 
public function new(gr:Int,_bds:Array<Dynamic>) {
super(gr,1101,"Go_main_init");
this._bds=_bds;
Scheduler.push(gr,this);
}
public inline function res():Dynamic {return null;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _Next:Int=0;
public static inline function callFromHaxe( ) : Void {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_init(0,[]).run(); 
while(_sf._incomplete) Scheduler.runAll();
}
public static inline function callFromRT( _gr) : Void {
var _sf=new Go_main_init(_gr,[]).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
}
public static inline function call( gr:Int,_bds:Array<Dynamic>) : Go_main_init
{return new Go_main_init(gr,_bds);
}
public function run():Go_main_init {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1101,0);
this.SubFn0();

case 1: // init.start
this.setLatest(1101,1);
this.SubFn1();
Go_math_init.call(this._goroutine,[]);
_Next = -1;
return this;
case -1:
this.setLatest(1101,-1);
 // _t1 = math.init() *ssa.Call near /usr/local/go/src/pkg/math/exp.go:122:9 [REGISTER VALUE UN-USED]
this.SubFn2();

case 2: // init.done
this.setLatest(1101,2);
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return *ssa.Return near /usr/local/go/src/pkg/math/exp.go:122:9

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
_t0=Go.main_init_36_guard.load(); // _t0 = *init$guard *ssa.UnOp near /usr/local/go/src/pkg/math/exp.go:122:9
_Next=_t0 ? 2 : 1; // if t0 goto 2.init.done else 1.init.start *ssa.If near /usr/local/go/src/pkg/math/exp.go:122:9
}// end SubFn0
private inline  function SubFn1():Void {
Go.main_init_36_guard.store(true); // *init$guard = true:bool *ssa.Store near /usr/local/go/src/pkg/math/exp.go:122:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=2; // jump 2.init.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:122:9
}// end SubFn2
}
#if (!php) private #end class Go__star_main_dot_square_perim extends StackFrameBasis implements StackFrame {  // interfaces.go:31:17
var p_recv:Pointer;
public function new(gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) {
super(gr,31,"Go__star_main_dot_square_perim");
this._bds=_bds;
this.p_recv=p_recv;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Array<Dynamic>=null;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_recv : Pointer) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go__star_main_dot_square_perim(0,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_recv : Pointer) : Float {
var _sf=new Go__star_main_dot_square_perim(_gr,[], p_recv).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_recv : Pointer) : Go__star_main_dot_square_perim
{return new Go__star_main_dot_square_perim(gr,_bds, p_recv);
}
public function run():Go__star_main_dot_square_perim {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(31,0);
this.SubFn0();
_SF1=Go_main_dot_square_perim.call(this._goroutine,[],Deep.copy(_t0));
_Next = -1;
return this;
case -1:
this.setLatest(31,-1);
_t1=_SF1.res();
 // _t1 = (main.square).perim(t0) *ssa.Call near /usr/local/go/src/pkg/math/exp.go:122:9
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return near /usr/local/go/src/pkg/math/exp.go:122:9

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=p_recv.load(); // _t0 = *recv *ssa.UnOp near /usr/local/go/src/pkg/math/exp.go:122:9
}// end SubFn0
}
#if js @:expose("Go_math_IsNaN") #end class Go_math_IsNaN extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/bits.go:31:6
var p_f:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float) {
super(gr,247,"Go_math_IsNaN");
this._bds=_bds;
this.p_f=p_f;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_IsNaN(0,[], p_f).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float) : Bool {
var _sf=new Go_math_IsNaN(_gr,[], p_f).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float) : Go_math_IsNaN
{return new Go_math_IsNaN(gr,_bds, p_f);
}
public function run():Go_math_IsNaN {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(247,0);
this.SubFn0();
this.setPH(252);
_res= _t0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t0 *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:36:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_t0=(Force.toFloat(p_f)!=Force.toFloat(p_f)); // _t0 = f != f *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:36:11
}// end SubFn0
}
#if (!php) private #end class Go_math_pzero extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j0.go:307:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,3228,"Go_math_pzero");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Bool=false;
var _t3:Array<Float>=null;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Array<Float>=null;
var _t8:Float=0.0;
var _t9:Array<Float>=null;
var _t10:Float=0.0;
var _t11:Array<Float>=null;
var _t12:Float=0.0;
var _t13:Array<Float>=null;
var _t14:Float=0.0;
var _t15:Array<Float>=null;
var _t16:Float=0.0;
var _t17:Array<Float>=null;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Array<Float>=null;
var _t30:Float=0.0;
var _t31:Array<Float>=null;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Bool=false;
var _t52:Array<Float>=null;
var _t53:Array<Float>=null;
var _t54:Bool=false;
var _t55:Array<Float>=null;
var _t56:Array<Float>=null;
var _t57:Bool=false;
var _t58:Array<Float>=null;
var _t59:Array<Float>=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_pzero(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_pzero(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_pzero
{return new Go_math_pzero(gr,_bds, p_x);
}
public function run():Go_math_pzero {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3228,0);
this.SubFn0();

case 1: // if.then
this.setLatest(3228,1);
this.SubFn1();

case 2: // if.done
this.setLatest(3228,2);
this.SubFn2();
this.setPH(3247);
_res= _t50;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t50 *ssa.Return @ /usr/local/go/src/pkg/math/j0.go:326:2

case 3: // if.else
this.setLatest(3247,3);
this.SubFn3();

case 4: // if.then
this.setLatest(3247,4);
this.SubFn4();

case 5: // if.else
this.setLatest(3247,5);
this.SubFn5();

case 6: // if.then
this.setLatest(3247,6);
this.SubFn6();

case 7: // if.else
this.setLatest(3247,7);
this.SubFn7();

case 8: // if.then
this.setLatest(3247,8);
this.SubFn8();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t2:Bool;
this.setPH(3229);
_t0=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t0 = local [6]float64 (p) *ssa.Alloc @ /usr/local/go/src/pkg/math/j0.go:308:6
this.setPH(3230);
_t1=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;}); // _t1 = local [5]float64 (q) *ssa.Alloc @ /usr/local/go/src/pkg/math/j0.go:309:6
this.setPH(3231);
_t2=(Force.toFloat(p_x)>=Force.toFloat(8)); // _t2 = x >= 8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:310:7
_Next=_t2 ? 1 : 3; // if t2 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:310:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Array<Float>;
var _t4:Array<Float>;
_t3=Go.math_p0R8.load(); // _t3 = *p0R8 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:310:7
_t0.store(_t3); // *t0 = t3 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:310:7
_t4=Go.math_p0S8.load(); // _t4 = *p0S8 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:310:7
_t1.store(_t4); // *t1 = t4 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:310:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:310:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Float;
var _t7:Array<Float>;
var _t8:Float;
var _t9:Array<Float>;
var _t10:Float;
var _t11:Array<Float>;
var _t12:Float;
var _t13:Array<Float>;
var _t14:Float;
var _t15:Array<Float>;
var _t16:Float;
var _t17:Array<Float>;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t29:Array<Float>;
var _t30:Float;
var _t31:Array<Float>;
var _t32:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Float;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t49:Float;
this.setPH(3244);
_t5=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t5 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:323:14
_t6=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t5)); // _t6 = 1:float64 / t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:323:9
_t7=_t0.load(); // _t7 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:323:9
this.setPH(3245);
_t8=_t7[0]; // _t8 = t7[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:8
_t9=_t0.load(); // _t9 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:8
_t10=_t9[1]; // _t10 = t9[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:18
_t11=_t0.load(); // _t11 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:18
_t12=_t11[2]; // _t12 = t11[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:26
_t13=_t0.load(); // _t13 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:26
_t14=_t13[3]; // _t14 = t13[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:34
_t15=_t0.load(); // _t15 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:34
_t16=_t15[4]; // _t16 = t15[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:42
_t17=_t0.load(); // _t17 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:42
_t18=_t17[5]; // _t18 = t17[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:324:49
_t19=(Force.toFloat(_t6)*Force.toFloat(_t18)); // _t19 = t6 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:47
_t20=(Force.toFloat(_t16)+Force.toFloat(_t19)); // _t20 = t16 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:45
_t21=(Force.toFloat(_t6)*Force.toFloat(_t20)); // _t21 = t6 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:39
_t22=(Force.toFloat(_t14)+Force.toFloat(_t21)); // _t22 = t14 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:37
_t23=(Force.toFloat(_t6)*Force.toFloat(_t22)); // _t23 = t6 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:31
_t24=(Force.toFloat(_t12)+Force.toFloat(_t23)); // _t24 = t12 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:29
_t25=(Force.toFloat(_t6)*Force.toFloat(_t24)); // _t25 = t6 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:23
_t26=(Force.toFloat(_t10)+Force.toFloat(_t25)); // _t26 = t10 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:21
_t27=(Force.toFloat(_t6)*Force.toFloat(_t26)); // _t27 = t6 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:15
_t28=(Force.toFloat(_t8)+Force.toFloat(_t27)); // _t28 = t8 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:324:12
_t29=_t1.load(); // _t29 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:324:12
this.setPH(3246);
_t30=_t29[0]; // _t30 = t29[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:325:15
_t31=_t1.load(); // _t31 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:325:15
_t32=_t31[1]; // _t32 = t31[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:325:23
_t33=_t1.load(); // _t33 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:325:23
_t34=_t33[2]; // _t34 = t33[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:325:31
_t35=_t1.load(); // _t35 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:325:31
_t36=_t35[3]; // _t36 = t35[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:325:39
_t37=_t1.load(); // _t37 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:325:39
_t38=_t37[4]; // _t38 = t37[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j0.go:325:46
_t39=(Force.toFloat(_t6)*Force.toFloat(_t38)); // _t39 = t6 * t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:44
_t40=(Force.toFloat(_t36)+Force.toFloat(_t39)); // _t40 = t36 + t39 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:42
_t41=(Force.toFloat(_t6)*Force.toFloat(_t40)); // _t41 = t6 * t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:36
_t42=(Force.toFloat(_t34)+Force.toFloat(_t41)); // _t42 = t34 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:34
_t43=(Force.toFloat(_t6)*Force.toFloat(_t42)); // _t43 = t6 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:28
_t44=(Force.toFloat(_t32)+Force.toFloat(_t43)); // _t44 = t32 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:26
_t45=(Force.toFloat(_t6)*Force.toFloat(_t44)); // _t45 = t6 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:20
_t46=(Force.toFloat(_t30)+Force.toFloat(_t45)); // _t46 = t30 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:18
_t47=(Force.toFloat(_t6)*Force.toFloat(_t46)); // _t47 = t6 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:12
_t48=(Force.toFloat(1)+Force.toFloat(_t47)); // _t48 = 1:float64 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:325:9
this.setPH(3247);
_t49=Force.floatDiv(Force.toFloat(_t28),Force.toFloat(_t48)); // _t49 = t28 / t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:326:14
_t50=(Force.toFloat(1)+Force.toFloat(_t49)); // _t50 = 1:float64 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:326:11
}// end SubFn2
private inline  function SubFn3():Void {
var _t51:Bool;
this.setPH(3234);
_t51=(Force.toFloat(p_x)>=Force.toFloat(4.5454)); // _t51 = x >= 22727/5000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:313:14
_Next=_t51 ? 4 : 5; // if t51 goto 4.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:313:14
}// end SubFn3
private inline  function SubFn4():Void {
var _t52:Array<Float>;
var _t53:Array<Float>;
_t52=Go.math_p0R5.load(); // _t52 = *p0R5 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:313:14
_t0.store(_t52); // *t0 = t52 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:313:14
_t53=Go.math_p0S5.load(); // _t53 = *p0S5 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:313:14
_t1.store(_t53); // *t1 = t53 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:313:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:313:14
}// end SubFn4
private inline  function SubFn5():Void {
var _t54:Bool;
this.setPH(3237);
_t54=(Force.toFloat(p_x)>=Force.toFloat(2.8571)); // _t54 = x >= 28571/10000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:316:14
_Next=_t54 ? 6 : 7; // if t54 goto 6.if.then else 7.if.else *ssa.If near /usr/local/go/src/pkg/math/j0.go:316:14
}// end SubFn5
private inline  function SubFn6():Void {
var _t55:Array<Float>;
var _t56:Array<Float>;
_t55=Go.math_p0R3.load(); // _t55 = *p0R3 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:316:14
_t0.store(_t55); // *t0 = t55 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:316:14
_t56=Go.math_p0S3.load(); // _t56 = *p0S3 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:316:14
_t1.store(_t56); // *t1 = t56 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:316:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:316:14
}// end SubFn6
private inline  function SubFn7():Void {
var _t57:Bool;
this.setPH(3240);
_t57=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t57 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:319:14
_Next=_t57 ? 8 : 2; // if t57 goto 8.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/j0.go:319:14
}// end SubFn7
private inline  function SubFn8():Void {
var _t58:Array<Float>;
var _t59:Array<Float>;
_t58=Go.math_p0R2.load(); // _t58 = *p0R2 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:319:14
_t0.store(_t58); // *t0 = t58 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:319:14
_t59=Go.math_p0S2.load(); // _t59 = *p0S2 *ssa.UnOp near /usr/local/go/src/pkg/math/j0.go:319:14
_t1.store(_t59); // *t1 = t59 *ssa.Store near /usr/local/go/src/pkg/math/j0.go:319:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j0.go:319:14
}// end SubFn8
}
#if js @:expose("Go_math_Pow") #end class Go_math_Pow extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/pow.go:38:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,3608,"Go_math_Pow");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF1:StackFrame;
var _t5:Float=0.0;
var _t6:Bool=false;
var _SF2:StackFrame;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Bool=false;
var _SF3:StackFrame;
var _t10:Float=0.0;
var _SF4:StackFrame;
var _t11:Bool=false;
var _t12:Bool=false;
var _t13:Bool=false;
var _SF5:StackFrame;
var _t14:Bool=false;
var _t15:Bool=false;
var _t16:Bool=false;
var _SF6:StackFrame;
var _t17:Bool=false;
var _SF7:StackFrame;
var _t18:Bool=false;
var _SF8:StackFrame;
var _t19:Bool=false;
var _t20:Bool=false;
var _SF9:StackFrame;
var _t21:Float=0.0;
var _SF10:StackFrame;
var _t22:Float=0.0;
var _SF11:StackFrame;
var _t23:Float=0.0;
var _SF12:StackFrame;
var _t24:Bool=false;
var _SF13:StackFrame;
var _t25:Bool=false;
var _SF14:StackFrame;
var _t26:Float=0.0;
var _t27:Bool=false;
var _SF15:StackFrame;
var _t28:Bool=false;
var _t29:Bool=false;
var _SF16:StackFrame;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _SF17:StackFrame;
var _t33:Float=0.0;
var _t34:Bool=false;
var _SF18:StackFrame;
var _t35:Float=0.0;
var _t36:Bool=false;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Bool=false;
var _SF19:StackFrame;
var _t40:{r0:Float,r1:Float}=null;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Bool=false;
var _SF20:StackFrame;
var _t44:Float=0.0;
var _t45:Bool=false;
var _t46:Bool=false;
var _SF21:StackFrame;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _SF22:StackFrame;
var _t49:Float=0.0;
var _t50:Bool=false;
var _t51:Bool=false;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _SF23:StackFrame;
var _t54:{r0:Float,r1:Int}=null;
var _t55:Float=0.0;
var _t56:Int=0;
var _t57:GOint64=null;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _SF24:StackFrame;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _SF25:StackFrame;
var _t64:Float=0.0;
var _t65:GOint64=null;
var _t66:Bool=false;
var _t67:Float=0.0;
var _t68:Int=0;
var _t69:Float=0.0;
var _t70:Int=0;
var _t71:GOint64=null;
var _t72:Bool=false;
var _t73:Float=0.0;
var _t74:Int=0;
var _t75:Float=0.0;
var _t76:Int=0;
var _t77:Float=0.0;
var _t78:Int=0;
var _t79:Bool=false;
var _t80:Float=0.0;
var _t81:Int=0;
var _t82:Float=0.0;
var _t83:Int=0;
var _t84:GOint64=null;
var _t85:Float=0.0;
var _t86:Int=0;
var _t87:Float=0.0;
var _t88:Int=0;
var _SF26:StackFrame;
var _t89:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Pow(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_Pow(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_Pow
{return new Go_math_Pow(gr,_bds, p_x, p_y);
}
public function run():Go_math_Pow {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(3608,0);
this.SubFn0();
_Phi=0;
case 1: // switch.done
this.setLatest(3608,1);
this.SubFn1();
_Phi=1;
case 2: // switch.body
this.setLatest(3608,2);
this.setPH(3611);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:41:3

case 3: // switch.body
this.setLatest(3611,3);
this.setPH(3613);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:43:3

case 4: // switch.next
this.setLatest(3613,4);
this.SubFn2();
_Phi=4;
case 5: // binop.rhs
this.setLatest(3613,5);
this.SubFn3();
_Phi=5;
case 6: // binop.done
this.setLatest(3613,6);
this.setPH(3610);
_t4=((_Phi==0)?true:(_Phi==5)?_t3:false); // _t4 = phi [0.entry: true:bool, 5.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:40:14
this.SubFn4();
_Phi=6;
case 7: // switch.body
this.setLatest(3610,7);
this.setPH(3615);
_t5=Math.sqrt(p_x); // _t5 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:45:14
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:45:3

case 8: // switch.next
this.setLatest(3615,8);
this.SubFn5();
_Phi=8;
case 9: // switch.body
this.setLatest(3615,9);
this.setPH(3617);
_t7=Math.sqrt(p_x); // _t7 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:47:18
this.SubFn6();
_res= _t8;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t8 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:47:3

case 10: // switch.next
this.setLatest(3617,10);
this.SubFn7();
_Phi=10;
case 11: // switch.body
this.setLatest(3617,11);
this.setPH(3619);
_t10=Math.NaN; // _t10 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:49:13
_res= _t10;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t10 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:49:3

case 12: // switch.next
this.setLatest(3619,12);
this.setPH(3618);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(3618,-4);
_t11=_SF4.res();
 // _t11 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:48:12
this.SubFn8();
_Phi=12;
case 13: // switch.body
this.setLatest(3618,13);
this.SubFn9();
_Phi=13;
case 14: // switch.next
this.setLatest(3618,14);
this.SubFn10();
_Phi=14;
case 15: // binop.rhs
this.setLatest(3618,15);
_SF5=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -5;
return this;
case -5:
this.setLatest(3618,-5);
_t14=_SF5.res();
 // _t14 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:48:24
this.SubFn11();
_Phi=15;
case 16: // binop.done
this.setLatest(3618,16);
_t15=((_Phi==12)?true:(_Phi==15)?_t14:false); // _t15 = phi [12.switch.next: true:bool, 15.binop.rhs: t14] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:48:16
this.SubFn12();
_Phi=16;
case 17: // switch.body
this.setLatest(3618,17);
this.SubFn13();
_Phi=17;
case 18: // switch.next
this.setLatest(3618,18);
this.setPH(3633);
_SF6=Go_math_IsInf.call(this._goroutine,[],p_y,0);
_Next = -6;
return this;
case -6:
this.setLatest(3633,-6);
_t17=_SF6.res();
 // _t17 = IsInf(y, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:63:12
this.SubFn14();
_Phi=18;
case 19: // switch.body
this.setLatest(3633,19);
this.setPH(3623);
_SF7=Go_math_isOddInt.call(this._goroutine,[],p_y);
_Next = -7;
return this;
case -7:
this.setLatest(3623,-7);
_t18=_SF7.res();
 // _t18 = isOddInt(y) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:53:15
this.SubFn15();
_Phi=19;
case 20: // switch.body
this.setLatest(3623,20);
this.setPH(3628);
_SF8=Go_math_isOddInt.call(this._goroutine,[],p_y);
_Next = -8;
return this;
case -8:
this.setLatest(3628,-8);
_t19=_SF8.res();
 // _t19 = isOddInt(y) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:58:15
this.SubFn16();
_Phi=20;
case 21: // switch.next
this.setLatest(3628,21);
this.SubFn17();
_Phi=21;
case 22: // if.then
this.setLatest(3628,22);
this.setPH(3624);
_t21=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t21 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:54:24
_SF10=Go_math_Copysign.call(this._goroutine,[],_t21,p_x);
_Next = -10;
return this;
case -10:
this.setLatest(3624,-10);
_t22=_SF10.res();
 // _t22 = Copysign(t21, x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:54:20
_res= _t22;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t22 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:54:5

case 23: // if.done
this.setLatest(3624,23);
this.setPH(3626);
_t23=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t23 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:56:14
_res= _t23;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t23 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:56:4

case 24: // if.then
this.setLatest(3626,24);
this.setPH(3629);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:59:5

case 25: // if.done
this.setLatest(3629,25);
this.setPH(3631);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:61:4

case 26: // switch.body
this.setLatest(3631,26);
this.setPH(3643);
_SF12=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -12;
return this;
case -12:
this.setLatest(3643,-12);
_t24=_SF12.res();
 // _t24 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:73:11
this.SubFn18();
_Phi=26;
case 27: // switch.next
this.setLatest(3643,27);
this.setPH(3642);
_SF13=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -13;
return this;
case -13:
this.setLatest(3642,-13);
_t25=_SF13.res();
 // _t25 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:72:12
this.SubFn19();
_Phi=27;
case 28: // switch.body
this.setLatest(3642,28);
this.setPH(3636);
_res= 1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 1:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:66:4

case 29: // switch.body
this.setLatest(3636,29);
this.setPH(3638);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:68:4

case 30: // switch.next
this.setLatest(3638,30);
this.setPH(3637);
_t26=Math.abs(p_x); // _t26 = Abs(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:67:12
this.SubFn20();
_SF15=Go_math_IsInf.call(this._goroutine,[],p_y,1);
_Next = -15;
return this;
case -15:
this.setLatest(3637,-15);
_t28=_SF15.res();
 // _t28 = IsInf(y, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:67:29
this.SubFn21();
_Phi=30;
case 31: // switch.next
this.setLatest(3637,31);
this.setPH(3640);
_t30=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t30 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:70:14
_res= _t30;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t30 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:70:4

case 32: // if.then
this.setLatest(3640,32);
this.SubFn22();
this.setPH(3644);
_SF17=Go_math_Pow.call(this._goroutine,[],_t31,_t32);
_Next = -17;
return this;
case -17:
this.setLatest(3644,-17);
_t33=_SF17.res();
 // _t33 = Pow(t31, t32) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:74:14
_res= _t33;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t33 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:74:4

case 33: // if.done
this.setLatest(3644,33);
this.SubFn23();
_Phi=33;
case 34: // switch.body
this.setLatest(3644,34);
this.setPH(3648);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:78:4

case 35: // switch.body
this.setLatest(3648,35);
this.setPH(3650);
_t35=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t35 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:80:14
_res= _t35;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t35 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:80:4

case 36: // switch.next
this.setLatest(3650,36);
this.SubFn24();
_Phi=36;
case 37: // if.then
this.setLatest(3650,37);
this.SubFn25();
_Phi=37;
case 38: // if.done
this.setLatest(3650,38);
this.setPH(3654);
_t38=((_Phi==1)?p_y:(_Phi==37)?_t37:0.0); // _t38 = phi [1.switch.done: y, 37.if.then: t37] #absy *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:84:2
this.setPH(3655);
_t39=((_Phi==1)?false:(_Phi==37)?true:false); // _t39 = phi [1.switch.done: false:bool, 37.if.then: true:bool] #flip *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:85:2
this.setPH(3660);
_SF19=Go_math_modf.call(this._goroutine,[],_t38);
_Next = -19;
return this;
case -19:
this.setLatest(3660,-19);
_t40=_SF19.res();
 // _t40 = Modf(t38) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:90:16
this.SubFn26();
_Phi=38;
case 39: // if.then
this.setLatest(3660,39);
this.setPH(3662);
_t44=Math.NaN; // _t44 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:92:13
_res= _t44;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t44 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:92:3

case 40: // if.done
this.setLatest(3662,40);
this.SubFn27();
_Phi=40;
case 41: // cond.true
this.setLatest(3662,41);
this.SubFn28();
_Phi=41;
case 42: // if.then
this.setLatest(3662,42);
this.setPH(3665);
_t47=Math.log(p_x); // _t47 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:95:21
this.SubFn29();
_t49=Math.exp(_t48); // _t49 = Exp(t48) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:95:13
_res= _t49;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t49 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:95:3

case 43: // if.done
this.setLatest(3665,43);
this.SubFn30();
_Phi=43;
case 44: // if.then
this.setLatest(3665,44);
this.SubFn31();
_Phi=44;
case 45: // if.done
this.setLatest(3665,45);
this.setPH(3660);
_t52=((_Phi==43)?_t41:(_Phi==47)?_t60:0.0); // _t52 = phi [43.if.done: t41, 47.if.done: t60] #yi *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:90:2
this.setPH(3669);
_t53=((_Phi==43)?1:(_Phi==47)?_t64:0.0); // _t53 = phi [43.if.done: 1:float64, 47.if.done: t64] #a1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:99:2
this.setPH(3685);
_SF23=Go_math_frexp.call(this._goroutine,[],p_x);
_Next = -23;
return this;
case -23:
this.setLatest(3685,-23);
_t54=_SF23.res();
 // _t54 = Frexp(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:115:17
this.SubFn32();
_Phi=45;
case 46: // if.then
this.setLatest(3685,46);
this.SubFn33();
_Phi=46;
case 47: // if.done
this.setLatest(3685,47);
this.setPH(3660);
_t60=((_Phi==44)?_t41:(_Phi==46)?_t59:0.0); // _t60 = phi [44.if.then: t41, 46.if.then: t59] #yi *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:90:2
_t61=((_Phi==44)?_t42:(_Phi==46)?_t58:0.0); // _t61 = phi [44.if.then: t42, 46.if.then: t58] #yf *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:90:6
this.setPH(3678);
_t62=Math.log(p_x); // _t62 = Log(x) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:108:20
this.SubFn34();
_t64=Math.exp(_t63); // _t64 = Exp(t63) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:108:11
this.SubFn35();
_Phi=47;
case 48: // for.body
this.setLatest(3678,48);
this.SubFn36();
_Phi=48;
case 49: // for.done
this.setLatest(3678,49);
this.SubFn37();
_Phi=49;
case 50: // for.loop
this.setLatest(3678,50);
this.setPH(3669);
_t67=((_Phi==45)?_t53:(_Phi==54)?_t75:0.0); // _t67 = phi [45.if.done: t53, 54.if.done: t75] #a1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:99:2
this.setPH(3670);
_t68=((_Phi==45)?0:(_Phi==54)?_t76:0); // _t68 = phi [45.if.done: 0:int, 54.if.done: t76] #ae *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:100:2
this.setPH(3685);
_t69=((_Phi==45)?_t55:(_Phi==54)?_t82:0.0); // _t69 = phi [45.if.done: t55, 54.if.done: t82] #x1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:115:2
_t70=((_Phi==45)?_t56:(_Phi==54)?_t83:0); // _t70 = phi [45.if.done: t56, 54.if.done: t83] #xe *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:115:6
this.setPH(3686);
_t71=((_Phi==45)?_t57:(_Phi==54)?_t84:GOint64.make(0,0)); // _t71 = phi [45.if.done: t57, 54.if.done: t84] #i *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:116:6
this.SubFn38();
_Phi=50;
case 51: // if.then
this.setLatest(3686,51);
this.SubFn39();
_Phi=51;
case 52: // if.done
this.setLatest(3686,52);
this.setPH(3669);
_t75=((_Phi==48)?_t67:(_Phi==51)?_t73:0.0); // _t75 = phi [48.for.body: t67, 51.if.then: t73] #a1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:99:2
this.setPH(3670);
_t76=((_Phi==48)?_t68:(_Phi==51)?_t74:0); // _t76 = phi [48.for.body: t68, 51.if.then: t74] #ae *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:100:2
this.SubFn40();
_Phi=52;
case 53: // if.then
this.setLatest(3670,53);
this.SubFn41();
_Phi=53;
case 54: // if.done
this.setLatest(3670,54);
this.setPH(3685);
_t82=((_Phi==52)?_t77:(_Phi==53)?_t80:0.0); // _t82 = phi [52.if.done: t77, 53.if.then: t80] #x1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:115:2
_t83=((_Phi==52)?_t78:(_Phi==53)?_t81:0); // _t83 = phi [52.if.done: t78, 53.if.then: t81] #xe *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:115:6
this.SubFn42();
_Phi=54;
case 55: // if.then
this.setLatest(3685,55);
this.SubFn43();
_Phi=55;
case 56: // if.done
this.setLatest(3685,56);
this.setPH(3669);
_t87=((_Phi==49)?_t67:(_Phi==55)?_t85:0.0); // _t87 = phi [49.for.done: t67, 55.if.then: t85] #a1 *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:99:2
this.setPH(3670);
_t88=((_Phi==49)?_t68:(_Phi==55)?_t86:0); // _t88 = phi [49.for.done: t68, 55.if.then: t86] #ae *ssa.Phi @ /usr/local/go/src/pkg/math/pow.go:100:2
this.setPH(3706);
_SF26=Go_math_ldexp.call(this._goroutine,[],_t87,_t88);
_Next = -26;
return this;
case -26:
this.setLatest(3706,-26);
_t89=_SF26.res();
 // _t89 = Ldexp(t87, t88) *ssa.Call @ /usr/local/go/src/pkg/math/pow.go:136:14
_res= _t89;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t89 *ssa.Return @ /usr/local/go/src/pkg/math/pow.go:136:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(3610);
_t0=(Force.toFloat(p_y)==Force.toFloat(0)); // _t0 = y == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:40:9
_Next=_t0 ? 6 : 5; // if t0 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/pow.go:40:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(3656);
_t1=(Force.toFloat(p_y)<Force.toFloat(0)); // _t1 = y < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:86:10
_Next=_t1 ? 37 : 38; // if t1 goto 37.if.then else 38.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:86:10
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(3612);
_t2=(Force.toFloat(p_y)==Force.toFloat(1)); // _t2 = y == 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:42:9
_Next=_t2 ? 3 : 8; // if t2 goto 3.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:42:9
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(3610);
_t3=(Force.toFloat(p_x)==Force.toFloat(1)); // _t3 = x == 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:40:19
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:40:19
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t4 ? 2 : 4; // if t4 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:40:19
}// end SubFn4
private inline  function SubFn5():Void {
var _t6:Bool;
this.setPH(3614);
_t6=(Force.toFloat(p_y)==Force.toFloat(0.5)); // _t6 = y == 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:44:9
_Next=_t6 ? 7 : 10; // if t6 goto 7.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:44:9
}// end SubFn5
private inline  function SubFn6():Void {
this.setPH(3617);
_t8=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t7)); // _t8 = 1:float64 / t7 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:47:12
}// end SubFn6
private inline  function SubFn7():Void {
var _t9:Bool;
this.setPH(3616);
_t9=(Force.toFloat(p_y)==Force.toFloat((-0.5))); // _t9 = y == -1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:46:9
_Next=_t9 ? 9 : 12; // if t9 goto 9.switch.body else 12.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:46:9
}// end SubFn7
private inline  function SubFn8():Void {
_Next=_t11 ? 16 : 15; // if t11 goto 16.binop.done else 15.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/pow.go:46:9
}// end SubFn8
private inline  function SubFn9():Void {
var _t12:Bool;
this.setPH(3622);
_t12=(Force.toFloat(p_y)<Force.toFloat(0)); // _t12 = y < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:52:10
_Next=_t12 ? 19 : 21; // if t12 goto 19.switch.body else 21.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:52:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t13:Bool;
this.setPH(3620);
_t13=(Force.toFloat(p_x)==Force.toFloat(0)); // _t13 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:50:9
_Next=_t13 ? 13 : 18; // if t13 goto 13.switch.body else 18.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:50:9
}// end SubFn10
private inline  function SubFn11():Void {
_Next=16; // jump 16.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:50:9
}// end SubFn11
private inline  function SubFn12():Void {
_Next=_t15 ? 11 : 14; // if t15 goto 11.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:50:9
}// end SubFn12
private inline  function SubFn13():Void {
var _t16:Bool;
this.setPH(3635);
_t16=(Force.toFloat(p_x)==Force.toFloat((-1))); // _t16 = x == -1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:65:10
_Next=_t16 ? 28 : 30; // if t16 goto 28.switch.body else 30.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:65:10
}// end SubFn13
private inline  function SubFn14():Void {
_Next=_t17 ? 17 : 27; // if t17 goto 17.switch.body else 27.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:65:10
}// end SubFn14
private inline  function SubFn15():Void {
_Next=_t18 ? 22 : 23; // if t18 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:65:10
}// end SubFn15
private inline  function SubFn16():Void {
_Next=_t19 ? 24 : 25; // if t19 goto 24.if.then else 25.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:65:10
}// end SubFn16
private inline  function SubFn17():Void {
var _t20:Bool;
this.setPH(3627);
_t20=(Force.toFloat(p_y)>Force.toFloat(0)); // _t20 = y > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:57:10
_Next=_t20 ? 20 : 1; // if t20 goto 20.switch.body else 1.switch.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:57:10
}// end SubFn17
private inline  function SubFn18():Void {
_Next=_t24 ? 32 : 33; // if t24 goto 32.if.then else 33.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:57:10
}// end SubFn18
private inline  function SubFn19():Void {
_Next=_t25 ? 26 : 1; // if t25 goto 26.switch.body else 1.switch.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:57:10
}// end SubFn19
private inline  function SubFn20():Void {
this.setPH(3637);
_t27=(Force.toFloat(_t26)<Force.toFloat(1)); // _t27 = t26 < 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:67:16
}// end SubFn20
private inline  function SubFn21():Void {
var _t29:Bool;
_t29=(_t27==_t28); // _t29 = t27 == t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:67:21
_Next=_t29 ? 29 : 31; // if t29 goto 29.switch.body else 31.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:67:21
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(3644);
_t31=Force.floatDiv(Force.toFloat(1),Force.toFloat(p_x)); // _t31 = 1:float64 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:74:16
_t32=(-Force.toFloat(p_y)); // _t32 = -y *ssa.UnOp @ /usr/local/go/src/pkg/math/pow.go:74:20
}// end SubFn22
private inline  function SubFn23():Void {
var _t34:Bool;
this.setPH(3647);
_t34=(Force.toFloat(p_y)<Force.toFloat(0)); // _t34 = y < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:77:10
_Next=_t34 ? 34 : 36; // if t34 goto 34.switch.body else 36.switch.next *ssa.If near /usr/local/go/src/pkg/math/pow.go:77:10
}// end SubFn23
private inline  function SubFn24():Void {
var _t36:Bool;
this.setPH(3649);
_t36=(Force.toFloat(p_y)>Force.toFloat(0)); // _t36 = y > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:79:10
_Next=_t36 ? 35 : 1; // if t36 goto 35.switch.body else 1.switch.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:79:10
}// end SubFn24
private inline  function SubFn25():Void {
this.setPH(3657);
_t37=(-Force.toFloat(p_y)); // _t37 = -y *ssa.UnOp @ /usr/local/go/src/pkg/math/pow.go:87:10
_Next=38; // jump 38.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:87:10
}// end SubFn25
private inline  function SubFn26():Void {
var _t43:Bool;
_t41=_t40.r0; // _t41 = extract t40 #0 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:87:10
_t42=_t40.r1; // _t42 = extract t40 #1 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:87:10
this.setPH(3661);
_t43=(Force.toFloat(_t42)!=Force.toFloat(0)); // _t43 = t42 != 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:91:8
_Next=_t43 ? 41 : 40; // if t43 goto 41.cond.true else 40.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:91:8
}// end SubFn26
private inline  function SubFn27():Void {
var _t45:Bool;
this.setPH(3664);
_t45=(Force.toFloat(_t41)>=Force.toFloat(9.223372036854776e+18)); // _t45 = t41 >= 9223372036854775808:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:94:8
_Next=_t45 ? 42 : 43; // if t45 goto 42.if.then else 43.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:94:8
}// end SubFn27
private inline  function SubFn28():Void {
var _t46:Bool;
this.setPH(3661);
_t46=(Force.toFloat(p_x)<Force.toFloat(0)); // _t46 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:91:18
_Next=_t46 ? 39 : 40; // if t46 goto 39.if.then else 40.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:91:18
}// end SubFn28
private inline  function SubFn29():Void {
this.setPH(3665);
_t48=(Force.toFloat(p_y)*Force.toFloat(_t47)); // _t48 = y * t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:95:16
}// end SubFn29
private inline  function SubFn30():Void {
var _t50:Bool;
this.setPH(3673);
_t50=(Force.toFloat(_t42)!=Force.toFloat(0)); // _t50 = t42 != 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:103:8
_Next=_t50 ? 44 : 45; // if t50 goto 44.if.then else 45.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:103:8
}// end SubFn30
private inline  function SubFn31():Void {
var _t51:Bool;
this.setPH(3674);
_t51=(Force.toFloat(_t42)>Force.toFloat(0.5)); // _t51 = t42 > 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:104:9
_Next=_t51 ? 46 : 47; // if t51 goto 46.if.then else 47.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:104:9
}// end SubFn31
private inline  function SubFn32():Void {
_t55=_t54.r0; // _t55 = extract t54 #0 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:104:9
_t56=_t54.r1; // _t56 = extract t54 #1 *ssa.Extract near /usr/local/go/src/pkg/math/pow.go:104:9
this.setPH(3686);
_t57=GOint64.ofFloat(_t52); // _t57 = convert int64 <- float64 (t52) *ssa.Convert @ /usr/local/go/src/pkg/math/pow.go:116:16
_Next=50; // jump 50.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:116:16
}// end SubFn32
private inline  function SubFn33():Void {
_t58=(Force.toFloat(_t42)-Force.toFloat(1)); // _t58 = t42 - 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:16
_t59=(Force.toFloat(_t41)+Force.toFloat(1)); // _t59 = t41 + 1:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:16
_Next=47; // jump 47.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:116:16
}// end SubFn33
private inline  function SubFn34():Void {
this.setPH(3678);
_t63=(Force.toFloat(_t61)*Force.toFloat(_t62)); // _t63 = t61 * t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:108:15
}// end SubFn34
private inline  function SubFn35():Void {
_Next=45; // jump 45.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:108:15
}// end SubFn35
private inline  function SubFn36():Void {
var _t65:GOint64;
var _t66:Bool;
this.setPH(3687);
_t65=Force.toInt64(GOint64.and(_t71,GOint64.make(0x0,0x1))); // _t65 = t71 & 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:117:7
_t66=(GOint64.compare(_t65,GOint64.make(0x0,0x1))==0); // _t66 = t65 == 1:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:117:10
_Next=_t66 ? 51 : 52; // if t66 goto 51.if.then else 52.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:117:10
}// end SubFn36
private inline  function SubFn37():Void {
_Next=_t39 ? 55 : 56; // if t39 goto 55.if.then else 56.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:117:10
}// end SubFn37
private inline  function SubFn38():Void {
var _t72:Bool;
this.setPH(3686);
_t72=(GOint64.compare(_t71,GOint64.make(0x0,0x0))!=0); // _t72 = t71 != 0:int64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:116:24
_Next=_t72 ? 48 : 49; // if t72 goto 48.for.body else 49.for.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:116:24
}// end SubFn38
private inline  function SubFn39():Void {
_t73=(Force.toFloat(_t67)*Force.toFloat(_t69)); // _t73 = t67 * t69 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:24
_t74=(_t68+_t70); // _t74 = t68 + t70 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:24
_Next=52; // jump 52.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:116:24
}// end SubFn39
private inline  function SubFn40():Void {
var _t79:Bool;
_t77=(Force.toFloat(_t69)*Force.toFloat(_t69)); // _t77 = t69 * t69 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:24
_t78=(_t70<<GOint64.toInt(GOint64.make(0x0,0x1))); // _t78 = t70 << 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:116:24
this.setPH(3693);
_t79=(Force.toFloat(_t77)<Force.toFloat(0.5)); // _t79 = t77 < 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:123:9
_Next=_t79 ? 53 : 54; // if t79 goto 53.if.then else 54.if.done *ssa.If near /usr/local/go/src/pkg/math/pow.go:123:9
}// end SubFn40
private inline  function SubFn41():Void {
_t80=(Force.toFloat(_t77)+Force.toFloat(_t77)); // _t80 = t77 + t77 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:123:9
_t81=(_t78-1); // _t81 = t78 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:123:9
_Next=54; // jump 54.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:123:9
}// end SubFn41
private inline  function SubFn42():Void {
_t84=Force.toInt64(GOint64.ushr(_t71,GOint64.toInt(GOint64.make(0x0,0x1)))); // _t84 = t71 >> 1:uint64 *ssa.BinOp near /usr/local/go/src/pkg/math/pow.go:123:9
_Next=50; // jump 50.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:123:9
}// end SubFn42
private inline  function SubFn43():Void {
this.setPH(3703);
_t85=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t67)); // _t85 = 1:float64 / t67 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:133:10
this.setPH(3704);
_t86=(-_t68); // _t86 = -t68 *ssa.UnOp @ /usr/local/go/src/pkg/math/pow.go:134:8
_Next=56; // jump 56.if.done *ssa.Jump near /usr/local/go/src/pkg/math/pow.go:134:8
}// end SubFn43
}
#if js @:expose("Go_math_Erfc") #end class Go_math_Erfc extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/erf.go:265:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,909,"Go_math_Erfc");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Bool=false;
var _SF4:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _t31:Float=0.0;
var _t32:Bool=false;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Bool=false;
var _t67:Float=0.0;
var _t68:Float=0.0;
var _t69:Float=0.0;
var _t70:Float=0.0;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Bool=false;
var _t74:Float=0.0;
var _t75:Float=0.0;
var _t76:Float=0.0;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Float=0.0;
var _t81:Float=0.0;
var _t82:Float=0.0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Float=0.0;
var _t87:Float=0.0;
var _t88:Float=0.0;
var _t89:Float=0.0;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Float=0.0;
var _t93:Float=0.0;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _t96:Float=0.0;
var _t97:Float=0.0;
var _t98:Float=0.0;
var _t99:Float=0.0;
var _t100:Float=0.0;
var _t101:Float=0.0;
var _t102:Float=0.0;
var _t103:Float=0.0;
var _t104:Float=0.0;
var _t105:Float=0.0;
var _SF5:StackFrame;
var _t106:GOint64=null;
var _t107:GOint64=null;
var _SF6:StackFrame;
var _t108:Float=0.0;
var _t109:Float=0.0;
var _t110:Float=0.0;
var _t111:Float=0.0;
var _SF7:StackFrame;
var _t112:Float=0.0;
var _t113:Float=0.0;
var _t114:Float=0.0;
var _t115:Float=0.0;
var _t116:Float=0.0;
var _t117:Float=0.0;
var _SF8:StackFrame;
var _t118:Float=0.0;
var _t119:Float=0.0;
var _t120:Float=0.0;
var _t121:Float=0.0;
var _t122:Float=0.0;
var _t123:Float=0.0;
var _t124:Float=0.0;
var _t125:Float=0.0;
var _t126:Float=0.0;
var _t127:Float=0.0;
var _t128:Float=0.0;
var _t129:Float=0.0;
var _t130:Float=0.0;
var _t131:Float=0.0;
var _t132:Float=0.0;
var _t133:Float=0.0;
var _t134:Float=0.0;
var _t135:Float=0.0;
var _t136:Float=0.0;
var _t137:Float=0.0;
var _t138:Float=0.0;
var _t139:Float=0.0;
var _t140:Float=0.0;
var _t141:Float=0.0;
var _t142:Float=0.0;
var _t143:Float=0.0;
var _t144:Float=0.0;
var _t145:Float=0.0;
var _t146:Bool=false;
var _t147:Float=0.0;
var _t148:Float=0.0;
var _t149:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Erfc(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_Erfc(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_Erfc
{return new Go_math_Erfc(gr,_bds, p_x);
}
public function run():Go_math_Erfc {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(909,0);
this.setPH(913);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(913,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:269:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(913,1);
this.setPH(914);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:270:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:270:3

case 2: // switch.body
this.setLatest(914,2);
this.setPH(916);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:272:3

case 3: // switch.next
this.setLatest(916,3);
this.setPH(915);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -3;
return this;
case -3:
this.setLatest(915,-3);
_t2=_SF3.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:271:12
this.SubFn1();
_Phi=3;
case 4: // switch.body
this.setLatest(915,4);
this.setPH(918);
_res= 2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:274:3

case 5: // switch.next
this.setLatest(918,5);
this.setPH(917);
_SF4=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -4;
return this;
case -4:
this.setLatest(917,-4);
_t3=_SF4.res();
 // _t3 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:273:12
this.SubFn2();
_Phi=5;
case 6: // switch.next
this.setLatest(917,6);
this.SubFn3();
_Phi=6;
case 7: // if.then
this.setLatest(917,7);
this.SubFn4();
_Phi=7;
case 8: // if.done
this.setLatest(917,8);
this.setPH(909);
_t6=((_Phi==6)?p_x:(_Phi==7)?_t5:0.0); // _t6 = phi [6.switch.next: x, 7.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:265:11
this.setPH(920);
_t7=((_Phi==6)?false:(_Phi==7)?true:false); // _t7 = phi [6.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:276:2
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(920,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(920,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(920,11);
this.SubFn8();
_Phi=11;
case 12: // if.done
this.setLatest(920,12);
this.setPH(926);
_t11=((_Phi==11)?_t6:(_Phi==14)?_t34:(_Phi==15)?_t38:0.0); // _t11 = phi [11.if.then: t6, 14.if.then: t34, 15.if.else: t38] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:282:7
this.SubFn9();
_Phi=12;
case 13: // if.else
this.setLatest(926,13);
this.SubFn10();
_Phi=13;
case 14: // if.then
this.setLatest(926,14);
this.SubFn11();
_Phi=14;
case 15: // if.else
this.setLatest(926,15);
this.SubFn12();
_Phi=15;
case 16: // if.then
this.setLatest(926,16);
this.SubFn13();
this.setPH(941);
_res= _t39;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t39 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:297:4

case 17: // if.done
this.setLatest(941,17);
this.SubFn14();
this.setPH(943);
_res= _t40;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t40 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:299:3

case 18: // if.then
this.setLatest(943,18);
this.SubFn15();
_Phi=18;
case 19: // if.done
this.setLatest(943,19);
this.SubFn16();
_Phi=19;
case 20: // if.then
this.setLatest(943,20);
this.SubFn17();
this.setPH(950);
_res= _t68;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t68 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:306:4

case 21: // if.done
this.setLatest(950,21);
this.SubFn18();
this.setPH(952);
_res= _t70;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t70 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:308:3

case 22: // if.then
this.setLatest(952,22);
this.SubFn19();
_Phi=22;
case 23: // if.done
this.setLatest(952,23);
this.SubFn20();
_Phi=23;
case 24: // if.then
this.setLatest(952,24);
this.SubFn21();
_Phi=24;
case 25: // if.done
this.setLatest(952,25);
this.setPH(957);
_t104=((_Phi==24)?_t87:(_Phi==28)?_t131:0.0); // _t104 = phi [24.if.then: t87, 28.if.done: t131] #R *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:313:7
_t105=((_Phi==24)?_t103:(_Phi==28)?_t145:0.0); // _t105 = phi [24.if.then: t103, 28.if.done: t145] #S *ssa.Phi @ /usr/local/go/src/pkg/math/erf.go:313:10
this.setPH(968);
_SF5=Go_math_Float64bits.call(this._goroutine,[],_t6);
_Next = -5;
return this;
case -5:
this.setLatest(968,-5);
_t106=_SF5.res();
 // _t106 = Float64bits(t6) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:324:35
this.SubFn22();
_SF6=Go_math_Float64frombits.call(this._goroutine,[],_t107);
_Next = -6;
return this;
case -6:
this.setLatest(968,-6);
_t108=_SF6.res();
 // _t108 = Float64frombits(t107) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:324:23
this.SubFn23();
this.setPH(969);
_t112=Math.exp(_t111); // _t112 = Exp(t111) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:325:11
this.SubFn24();
_t118=Math.exp(_t117); // _t118 = Exp(t117) *ssa.Call @ /usr/local/go/src/pkg/math/erf.go:325:30
this.SubFn25();
_Phi=25;
case 26: // if.else
this.setLatest(969,26);
this.SubFn26();
_Phi=26;
case 27: // if.then
this.setLatest(969,27);
this.setPH(963);
_res= 2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:319:5

case 28: // if.done
this.setLatest(963,28);
this.SubFn27();
_Phi=28;
case 29: // cond.true
this.setLatest(963,29);
this.SubFn28();
_Phi=29;
case 30: // if.then
this.setLatest(963,30);
this.SubFn29();
this.setPH(971);
_res= _t148;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t148 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:327:4

case 31: // if.done
this.setLatest(971,31);
this.SubFn30();
this.setPH(973);
_res= _t149;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t149 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:329:3

case 32: // if.then
this.setLatest(973,32);
this.setPH(976);
_res= 2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 2:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:332:3

case 33: // if.done
this.setLatest(976,33);
this.setPH(978);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/erf.go:334:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:334:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 5; // if t2 goto 2.switch.body else 5.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:334:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t3 ? 4 : 6; // if t3 goto 4.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/erf.go:334:2
}// end SubFn2
private inline  function SubFn3():Void {
var _t4:Bool;
this.setPH(921);
_t4=(Force.toFloat(p_x)<Force.toFloat(0)); // _t4 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:277:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:277:7
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(922);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/erf.go:278:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:278:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t8:Bool;
this.setPH(925);
_t8=(Force.toFloat(_t6)<Force.toFloat(0.84375)); // _t8 = t6 < 27/32:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:281:7
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:281:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t9:Bool;
this.setPH(927);
_t9=(Force.toFloat(_t6)<Force.toFloat(1.3877787807814457e-17)); // _t9 = t6 < 1/72057594037927936:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:283:8
_Next=_t9 ? 11 : 13; // if t9 goto 11.if.then else 13.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:283:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t10:Bool;
this.setPH(945);
_t10=(Force.toFloat(_t6)<Force.toFloat(1.25)); // _t10 = t6 < 5/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:301:7
_Next=_t10 ? 18 : 19; // if t10 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:301:7
}// end SubFn7
private inline  function SubFn8():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:301:7
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t7 ? 16 : 17; // if t7 goto 16.if.then else 17.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:301:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t13:Float;
var _t14:Float;
var _t15:Float;
var _t16:Float;
var _t17:Float;
var _t18:Float;
var _t19:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t28:Float;
var _t29:Float;
var _t32:Bool;
this.setPH(930);
_t12=(Force.toFloat(_t6)*Force.toFloat(_t6)); // _t12 = t6 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:286:11
this.setPH(931);
_t13=(Force.toFloat(_t12)*Force.toFloat((-2.3763016656650163e-05))); // _t13 = t12 * -59407541641625406521/2500000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:37
_t14=(Force.toFloat((-0.005770270296489442))+Force.toFloat(_t13)); // _t14 = -577027029648944159157/100000000000000000000000:float64 + t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:35
_t15=(Force.toFloat(_t12)*Force.toFloat(_t14)); // _t15 = t12 * t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:30
_t16=(Force.toFloat((-0.02848174957559851))+Force.toFloat(_t15)); // _t16 = -142408747877992552383/5000000000000000000000:float64 + t15 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:28
_t17=(Force.toFloat(_t12)*Force.toFloat(_t16)); // _t17 = t12 * t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:23
_t18=(Force.toFloat((-0.3250421072470015))+Force.toFloat(_t17)); // _t18 = -32504210724700149937/100000000000000000000:float64 + t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:21
_t19=(Force.toFloat(_t12)*Force.toFloat(_t18)); // _t19 = t12 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:16
_t20=(Force.toFloat(0.12837916709551256)+Force.toFloat(_t19)); // _t20 = 128379167095512558561/1000000000000000000000:float64 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:13
this.setPH(932);
_t21=(Force.toFloat(_t12)*Force.toFloat((-3.960228278775368e-06))); // _t21 = t12 * -2475142674234605077/625000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:42
_t22=(Force.toFloat(0.00013249473800432164)+Force.toFloat(_t21)); // _t22 = 66247369002160822263/500000000000000000000000:float64 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:40
_t23=(Force.toFloat(_t12)*Force.toFloat(_t22)); // _t23 = t12 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:35
_t24=(Force.toFloat(0.005081306281875766)+Force.toFloat(_t23)); // _t24 = 63516328523447070347/12500000000000000000000:float64 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:33
_t25=(Force.toFloat(_t12)*Force.toFloat(_t24)); // _t25 = t12 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:28
_t26=(Force.toFloat(0.0650222499887673)+Force.toFloat(_t25)); // _t26 = 130044499977534588897/2000000000000000000000:float64 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:26
_t27=(Force.toFloat(_t12)*Force.toFloat(_t26)); // _t27 = t12 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:21
_t28=(Force.toFloat(0.39791722395915535)+Force.toFloat(_t27)); // _t28 = 397917223959155352819/1000000000000000000000:float64 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:19
_t29=(Force.toFloat(_t12)*Force.toFloat(_t28)); // _t29 = t12 * t28 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:14
_t30=(Force.toFloat(1)+Force.toFloat(_t29)); // _t30 = 1:float64 + t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:11
this.setPH(933);
_t31=Force.floatDiv(Force.toFloat(_t20),Force.toFloat(_t30)); // _t31 = t20 / t30 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:289:11
this.setPH(934);
_t32=(Force.toFloat(_t6)<Force.toFloat(0.25)); // _t32 = t6 < 1/4:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:290:9
_Next=_t32 ? 14 : 15; // if t32 goto 14.if.then else 15.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:290:9
}// end SubFn10
private inline  function SubFn11():Void {
var _t33:Float;
this.setPH(935);
_t33=(Force.toFloat(_t6)*Force.toFloat(_t31)); // _t33 = t6 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:291:17
_t34=(Force.toFloat(_t6)+Force.toFloat(_t33)); // _t34 = t6 + t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:291:14
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:291:14
}// end SubFn11
private inline  function SubFn12():Void {
var _t35:Float;
var _t36:Float;
var _t37:Float;
this.setPH(937);
_t35=(Force.toFloat(_t6)*Force.toFloat(_t31)); // _t35 = t6 * t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:293:20
_t36=(Force.toFloat(_t6)-Force.toFloat(0.5)); // _t36 = t6 - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:293:28
_t37=(Force.toFloat(_t35)+Force.toFloat(_t36)); // _t37 = t35 + t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:293:23
_t38=(Force.toFloat(0.5)+Force.toFloat(_t37)); // _t38 = 1/2:float64 + t37 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:293:16
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:293:16
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(941);
_t39=(Force.toFloat(1)+Force.toFloat(_t11)); // _t39 = 1:float64 + t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:297:13
}// end SubFn13
private inline  function SubFn14():Void {
this.setPH(943);
_t40=(Force.toFloat(1)-Force.toFloat(_t11)); // _t40 = 1:float64 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:299:12
}// end SubFn14
private inline  function SubFn15():Void {
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t54:Float;
var _t55:Float;
var _t56:Float;
var _t57:Float;
var _t58:Float;
var _t59:Float;
var _t60:Float;
var _t61:Float;
var _t62:Float;
var _t63:Float;
var _t64:Float;
this.setPH(946);
_t41=(Force.toFloat(_t6)-Force.toFloat(1)); // _t41 = t6 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:302:10
this.setPH(947);
_t42=(Force.toFloat(_t41)*Force.toFloat((-0.002166375594868791))); // _t42 = t41 * -2166375594868790843/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:50
_t43=(Force.toFloat(0.035478304325618236)+Force.toFloat(_t42)); // _t43 = 354783043256182359371/10000000000000000000000:float64 + t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:48
_t44=(Force.toFloat(_t41)*Force.toFloat(_t43)); // _t44 = t41 * t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:43
_t45=(Force.toFloat((-0.11089469428239668))+Force.toFloat(_t44)); // _t45 = -27723673570599169369/250000000000000000000:float64 + t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:41
_t46=(Force.toFloat(_t41)*Force.toFloat(_t45)); // _t46 = t41 * t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:36
_t47=(Force.toFloat(0.31834661990116175)+Force.toFloat(_t46)); // _t47 = 159173309950580876837/500000000000000000000:float64 + t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:34
_t48=(Force.toFloat(_t41)*Force.toFloat(_t47)); // _t48 = t41 * t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:29
_t49=(Force.toFloat((-0.3722078760357013))+Force.toFloat(_t48)); // _t49 = -372207876035701323847/1000000000000000000000:float64 + t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:27
_t50=(Force.toFloat(_t41)*Force.toFloat(_t49)); // _t50 = t41 * t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:22
_t51=(Force.toFloat(0.41485611868374833)+Force.toFloat(_t50)); // _t51 = 207428059341874165833/500000000000000000000:float64 + t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:20
_t52=(Force.toFloat(_t41)*Force.toFloat(_t51)); // _t52 = t41 * t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:15
_t53=(Force.toFloat((-0.0023621185607526594))+Force.toFloat(_t52)); // _t53 = -236211856075265944077/100000000000000000000000:float64 + t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:12
this.setPH(948);
_t54=(Force.toFloat(_t41)*Force.toFloat(0.011984499846799107)); // _t54 = t41 * 11984499846799107417/1000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:48
_t55=(Force.toFloat(0.01363708391202905)+Force.toFloat(_t54)); // _t55 = 68185419560145253681/5000000000000000000000:float64 + t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:46
_t56=(Force.toFloat(_t41)*Force.toFloat(_t55)); // _t56 = t41 * t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:41
_t57=(Force.toFloat(0.12617121980876164)+Force.toFloat(_t56)); // _t57 = 985712654755950329/7812500000000000000:float64 + t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:39
_t58=(Force.toFloat(_t41)*Force.toFloat(_t57)); // _t58 = t41 * t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:34
_t59=(Force.toFloat(0.07182865441419627)+Force.toFloat(_t58)); // _t59 = 179571636035490665717/2500000000000000000000:float64 + t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:32
_t60=(Force.toFloat(_t41)*Force.toFloat(_t59)); // _t60 = t41 * t59 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:27
_t61=(Force.toFloat(0.540397917702171)+Force.toFloat(_t60)); // _t61 = 540397917702171048937/1000000000000000000000:float64 + t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:25
_t62=(Force.toFloat(_t41)*Force.toFloat(_t61)); // _t62 = t41 * t61 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:20
_t63=(Force.toFloat(0.10642088040084423)+Force.toFloat(_t62)); // _t63 = 53210440200422114143/500000000000000000000:float64 + t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:18
_t64=(Force.toFloat(_t41)*Force.toFloat(_t63)); // _t64 = t41 * t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:13
_t65=(Force.toFloat(1)+Force.toFloat(_t64)); // _t65 = 1:float64 + t64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:10
_Next=_t7 ? 20 : 21; // if t7 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:304:10
}// end SubFn15
private inline  function SubFn16():Void {
var _t66:Bool;
this.setPH(955);
_t66=(Force.toFloat(_t6)<Force.toFloat(28)); // _t66 = t6 < 28:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:311:7
_Next=_t66 ? 22 : 23; // if t66 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:311:7
}// end SubFn16
private inline  function SubFn17():Void {
var _t67:Float;
this.setPH(950);
_t67=Force.floatDiv(Force.toFloat(_t53),Force.toFloat(_t65)); // _t67 = t53 / t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:306:22
_t68=(Force.toFloat(1.8450629115104675)+Force.toFloat(_t67)); // _t68 = 1845062911510467529297/1000000000000000000000:float64 + t67 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:306:19
}// end SubFn17
private inline  function SubFn18():Void {
var _t69:Float;
this.setPH(952);
_t69=Force.floatDiv(Force.toFloat(_t53),Force.toFloat(_t65)); // _t69 = t53 / t65 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:308:21
_t70=(Force.toFloat(0.15493708848953247)-Force.toFloat(_t69)); // _t70 = 154937088489532470703/1000000000000000000000:float64 - t69 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:308:18
}// end SubFn18
private inline  function SubFn19():Void {
var _t71:Float;
var _t73:Bool;
this.setPH(956);
_t71=(Force.toFloat(_t6)*Force.toFloat(_t6)); // _t71 = t6 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:312:15
_t72=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t71)); // _t72 = 1:float64 / t71 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:312:10
this.setPH(958);
_t73=(Force.toFloat(_t6)<Force.toFloat(2.857142857142857)); // _t73 = t6 < 20/7:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:314:8
_Next=_t73 ? 24 : 26; // if t73 goto 24.if.then else 26.if.else *ssa.If near /usr/local/go/src/pkg/math/erf.go:314:8
}// end SubFn19
private inline  function SubFn20():Void {
_Next=_t7 ? 32 : 33; // if t7 goto 32.if.then else 33.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:314:8
}// end SubFn20
private inline  function SubFn21():Void {
var _t74:Float;
var _t75:Float;
var _t76:Float;
var _t77:Float;
var _t78:Float;
var _t79:Float;
var _t80:Float;
var _t81:Float;
var _t82:Float;
var _t83:Float;
var _t84:Float;
var _t85:Float;
var _t86:Float;
var _t88:Float;
var _t89:Float;
var _t90:Float;
var _t91:Float;
var _t92:Float;
var _t93:Float;
var _t94:Float;
var _t95:Float;
var _t96:Float;
var _t97:Float;
var _t98:Float;
var _t99:Float;
var _t100:Float;
var _t101:Float;
var _t102:Float;
this.setPH(959);
_t74=(Force.toFloat(_t72)*Force.toFloat((-9.814329344169145))); // _t74 = t72 * -61339558401057159287/6250000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:57
_t75=(Force.toFloat((-81.2874355063066))+Force.toFloat(_t74)); // _t75 = -406437177531532967123/5000000000000000000:float64 + t74 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:55
_t76=(Force.toFloat(_t72)*Force.toFloat(_t75)); // _t76 = t72 * t75 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:50
_t77=(Force.toFloat((-184.60509290671104))+Force.toFloat(_t76)); // _t77 = -92302546453355517997/500000000000000000:float64 + t76 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:48
_t78=(Force.toFloat(_t72)*Force.toFloat(_t77)); // _t78 = t72 * t77 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:43
_t79=(Force.toFloat((-162.39666946257347))+Force.toFloat(_t78)); // _t79 = -32479333892514694071/200000000000000000:float64 + t78 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:41
_t80=(Force.toFloat(_t72)*Force.toFloat(_t79)); // _t80 = t72 * t79 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:36
_t81=(Force.toFloat((-62.375332450326006))+Force.toFloat(_t80)); // _t81 = -155938331125815015099/2500000000000000000:float64 + t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:34
_t82=(Force.toFloat(_t72)*Force.toFloat(_t81)); // _t82 = t72 * t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:29
_t83=(Force.toFloat((-10.558626225323291))+Force.toFloat(_t82)); // _t83 = -52793131126616454907/5000000000000000000:float64 + t82 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:27
_t84=(Force.toFloat(_t72)*Force.toFloat(_t83)); // _t84 = t72 * t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:22
_t85=(Force.toFloat((-0.6938585727071818))+Force.toFloat(_t84)); // _t85 = -173464643176795441093/250000000000000000000:float64 + t84 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:20
_t86=(Force.toFloat(_t72)*Force.toFloat(_t85)); // _t86 = t72 * t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:15
_t87=(Force.toFloat((-0.009864944034847148))+Force.toFloat(_t86)); // _t87 = -197298880696942964541/20000000000000000000000:float64 + t86 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:12
this.setPH(960);
_t88=(Force.toFloat(_t72)*Force.toFloat((-0.0604244152148581))); // _t88 = t72 * -302122076074290493719/5000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:62
_t89=(Force.toFloat(6.570249770319282)+Force.toFloat(_t88)); // _t89 = 131404995406385634027/20000000000000000000:float64 + t88 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:60
_t90=(Force.toFloat(_t72)*Force.toFloat(_t89)); // _t90 = t72 * t89 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:55
_t91=(Force.toFloat(108.63500554177944)+Force.toFloat(_t90)); // _t91 = 54317502770889717567/500000000000000000:float64 + t90 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:53
_t92=(Force.toFloat(_t72)*Force.toFloat(_t91)); // _t92 = t72 * t91 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:48
_t93=(Force.toFloat(429.00814002756783)+Force.toFloat(_t92)); // _t93 = 214504070013783916693/500000000000000000:float64 + t92 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:46
_t94=(Force.toFloat(_t72)*Force.toFloat(_t93)); // _t94 = t72 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:41
_t95=(Force.toFloat(645.3872717332679)+Force.toFloat(_t94)); // _t95 = 40336704483329242521/62500000000000000:float64 + t94 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:39
_t96=(Force.toFloat(_t72)*Force.toFloat(_t95)); // _t96 = t72 * t95 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:34
_t97=(Force.toFloat(434.56587747522923)+Force.toFloat(_t96)); // _t97 = 434565877475229228821/1000000000000000000:float64 + t96 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:32
_t98=(Force.toFloat(_t72)*Force.toFloat(_t97)); // _t98 = t72 * t97 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:27
_t99=(Force.toFloat(137.65775414351904)+Force.toFloat(_t98)); // _t99 = 688288770717595213/5000000000000000:float64 + t98 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:25
_t100=(Force.toFloat(_t72)*Force.toFloat(_t99)); // _t100 = t72 * t99 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:20
_t101=(Force.toFloat(19.651271667439257)+Force.toFloat(_t100)); // _t101 = 49128179168598142823/2500000000000000000:float64 + t100 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:18
_t102=(Force.toFloat(_t72)*Force.toFloat(_t101)); // _t102 = t72 * t101 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:13
_t103=(Force.toFloat(1)+Force.toFloat(_t102)); // _t103 = 1:float64 + t102 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:10
_Next=25; // jump 25.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:316:10
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(968);
_t107=Force.toUint64(GOint64.and(_t106,GOint64.make(0xffffffff,0x0))); // _t107 = t106 & 18446744069414584320:uint64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:324:39
}// end SubFn22
private inline  function SubFn23():Void {
var _t109:Float;
var _t110:Float;
this.setPH(969);
_t109=(-Force.toFloat(_t108)); // _t109 = -t108 *ssa.UnOp @ /usr/local/go/src/pkg/math/erf.go:325:12
_t110=(Force.toFloat(_t109)*Force.toFloat(_t108)); // _t110 = t109 * t108 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:14
_t111=(Force.toFloat(_t110)-Force.toFloat(0.5625)); // _t111 = t110 - 9/16:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:16
}// end SubFn23
private inline  function SubFn24():Void {
var _t113:Float;
var _t114:Float;
var _t115:Float;
var _t116:Float;
_t113=(Force.toFloat(_t108)-Force.toFloat(_t6)); // _t113 = t108 - t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:33
_t114=(Force.toFloat(_t108)+Force.toFloat(_t6)); // _t114 = t108 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:39
_t115=(Force.toFloat(_t113)*Force.toFloat(_t114)); // _t115 = t113 * t114 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:36
_t116=Force.floatDiv(Force.toFloat(_t104),Force.toFloat(_t105)); // _t116 = t104 / t105 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:44
_t117=(Force.toFloat(_t115)+Force.toFloat(_t116)); // _t117 = t115 + t116 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:42
}// end SubFn24
private inline  function SubFn25():Void {
_t119=(Force.toFloat(_t112)*Force.toFloat(_t118)); // _t119 = t112 * t118 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:325:25
_Next=_t7 ? 30 : 31; // if t7 goto 30.if.then else 31.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:325:25
}// end SubFn25
private inline  function SubFn26():Void {
_Next=_t7 ? 29 : 28; // if t7 goto 29.cond.true else 28.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:325:25
}// end SubFn26
private inline  function SubFn27():Void {
var _t120:Float;
var _t121:Float;
var _t122:Float;
var _t123:Float;
var _t124:Float;
var _t125:Float;
var _t126:Float;
var _t127:Float;
var _t128:Float;
var _t129:Float;
var _t130:Float;
var _t132:Float;
var _t133:Float;
var _t134:Float;
var _t135:Float;
var _t136:Float;
var _t137:Float;
var _t138:Float;
var _t139:Float;
var _t140:Float;
var _t141:Float;
var _t142:Float;
var _t143:Float;
var _t144:Float;
this.setPH(965);
_t120=(Force.toFloat(_t72)*Force.toFloat((-483.5191916086514))); // _t120 = t72 * -483519191608651397019/1000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:50
_t121=(Force.toFloat((-1025.0951316110772))+Force.toFloat(_t120)); // _t121 = -51254756580553862477/50000000000000000:float64 + t120 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:48
_t122=(Force.toFloat(_t72)*Force.toFloat(_t121)); // _t122 = t72 * t121 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:43
_t123=(Force.toFloat((-637.5664433683896))+Force.toFloat(_t122)); // _t123 = -318783221684194813861/500000000000000000:float64 + t122 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:41
_t124=(Force.toFloat(_t72)*Force.toFloat(_t123)); // _t124 = t72 * t123 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:36
_t125=(Force.toFloat((-160.63638485582192))+Force.toFloat(_t124)); // _t125 = -80318192427910958031/500000000000000000:float64 + t124 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:34
_t126=(Force.toFloat(_t72)*Force.toFloat(_t125)); // _t126 = t72 * t125 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:29
_t127=(Force.toFloat((-17.757954917754752))+Force.toFloat(_t126)); // _t127 = -177579549177547519889/10000000000000000000:float64 + t126 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:27
_t128=(Force.toFloat(_t72)*Force.toFloat(_t127)); // _t128 = t72 * t127 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:22
_t129=(Force.toFloat((-0.799283237680523))+Force.toFloat(_t128)); // _t129 = -399641618840261503287/500000000000000000000:float64 + t128 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:20
_t130=(Force.toFloat(_t72)*Force.toFloat(_t129)); // _t130 = t72 * t129 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:15
_t131=(Force.toFloat((-0.0098649429247001))+Force.toFloat(_t130)); // _t131 = -986494292470009928597/100000000000000000000000:float64 + t130 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:12
this.setPH(966);
_t132=(Force.toFloat(_t72)*Force.toFloat((-22.44095244658582))); // _t132 = t72 * -112204762232929091681/5000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:55
_t133=(Force.toFloat(474.52854120695537)+Force.toFloat(_t132)); // _t133 = 94905708241391073443/200000000000000000:float64 + t132 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:53
_t134=(Force.toFloat(_t72)*Force.toFloat(_t133)); // _t134 = t72 * t133 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:48
_t135=(Force.toFloat(2553.0504064331644)+Force.toFloat(_t134)); // _t135 = 255305040643316442583/100000000000000000:float64 + t134 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:46
_t136=(Force.toFloat(_t72)*Force.toFloat(_t135)); // _t136 = t72 * t135 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:41
_t137=(Force.toFloat(3199.8582195085955)+Force.toFloat(_t136)); // _t137 = 79996455487714888477/25000000000000000:float64 + t136 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:39
_t138=(Force.toFloat(_t72)*Force.toFloat(_t137)); // _t138 = t72 * t137 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:34
_t139=(Force.toFloat(1536.729586084437)+Force.toFloat(_t138)); // _t139 = 76836479304221847997/50000000000000000:float64 + t138 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:32
_t140=(Force.toFloat(_t72)*Force.toFloat(_t139)); // _t140 = t72 * t139 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:27
_t141=(Force.toFloat(325.7925129965739)+Force.toFloat(_t140)); // _t141 = 162896256498286959413/500000000000000000:float64 + t140 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:25
_t142=(Force.toFloat(_t72)*Force.toFloat(_t141)); // _t142 = t72 * t141 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:20
_t143=(Force.toFloat(30.33806074348246)+Force.toFloat(_t142)); // _t143 = 75845151858706145731/2500000000000000000:float64 + t142 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:18
_t144=(Force.toFloat(_t72)*Force.toFloat(_t143)); // _t144 = t72 * t143 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:13
_t145=(Force.toFloat(1)+Force.toFloat(_t144)); // _t145 = 1:float64 + t144 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:10
_Next=25; // jump 25.if.done *ssa.Jump near /usr/local/go/src/pkg/math/erf.go:322:10
}// end SubFn27
private inline  function SubFn28():Void {
var _t146:Bool;
this.setPH(962);
_t146=(Force.toFloat(_t6)>Force.toFloat(6)); // _t146 = t6 > 6:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:318:17
_Next=_t146 ? 27 : 28; // if t146 goto 27.if.then else 28.if.done *ssa.If near /usr/local/go/src/pkg/math/erf.go:318:17
}// end SubFn28
private inline  function SubFn29():Void {
var _t147:Float;
this.setPH(971);
_t147=Force.floatDiv(Force.toFloat(_t119),Force.toFloat(_t6)); // _t147 = t119 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:327:16
_t148=(Force.toFloat(2)-Force.toFloat(_t147)); // _t148 = 2:float64 - t147 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:327:13
}// end SubFn29
private inline  function SubFn30():Void {
this.setPH(973);
_t149=Force.floatDiv(Force.toFloat(_t119),Force.toFloat(_t6)); // _t149 = t119 / t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:329:12
}// end SubFn30
}
#if (!php) private #end class Go_math_mod extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/mod.go:23:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,2566,"Go_math_mod");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _t2:Bool=false;
var _SF2:StackFrame;
var _t3:Bool=false;
var _SF3:StackFrame;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Bool=false;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _SF5:StackFrame;
var _t8:{r0:Float,r1:Int}=null;
var _t9:Float=0.0;
var _t10:Int=0;
var _t11:Bool=false;
var _t12:Float=0.0;
var _SF6:StackFrame;
var _t13:{r0:Float,r1:Int}=null;
var _t14:Float=0.0;
var _t15:Int=0;
var _t16:Bool=false;
var _t17:Bool=false;
var _t18:Float=0.0;
var _t19:Bool=false;
var _t20:Int=0;
var _t21:Int=0;
var _t22:Int=0;
var _SF7:StackFrame;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_mod(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_mod(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_mod
{return new Go_math_mod(gr,_bds, p_x, p_y);
}
public function run():Go_math_mod {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2566,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(2566,1);
this.setPH(2568);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:25:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/mod.go:25:3

case 2: // if.done
this.setLatest(2568,2);
this.SubFn1();
_Phi=2;
case 3: // cond.false
this.setLatest(2568,3);
this.setPH(2567);
_SF2=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -2;
return this;
case -2:
this.setLatest(2567,-2);
_t3=_SF2.res();
 // _t3 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:24:47
this.SubFn2();
_Phi=3;
case 4: // cond.false
this.setLatest(2567,4);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(2567,-3);
_t4=_SF3.res();
 // _t4 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:24:35
this.SubFn3();
_Phi=4;
case 5: // cond.false
this.setLatest(2567,5);
_SF4=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -4;
return this;
case -4:
this.setLatest(2567,-4);
_t5=_SF4.res();
 // _t5 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:24:20
this.SubFn4();
_Phi=5;
case 6: // if.then
this.setLatest(2567,6);
this.SubFn5();
_Phi=6;
case 7: // if.done
this.setLatest(2567,7);
this.setPH(2566);
_t7=((_Phi==2)?p_y:(_Phi==6)?_t6:0.0); // _t7 = phi [2.if.done: y, 6.if.then: t6] #y *ssa.Phi @ /usr/local/go/src/pkg/math/mod.go:23:13
this.setPH(2574);
_SF5=Go_math_frexp.call(this._goroutine,[],_t7);
_Next = -5;
return this;
case -5:
this.setLatest(2574,-5);
_t8=_SF5.res();
 // _t8 = Frexp(t7) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:31:20
this.SubFn6();
_Phi=7;
case 8: // if.then
this.setLatest(2574,8);
this.SubFn7();
_Phi=8;
case 9: // for.body
this.setLatest(2574,9);
this.setPH(2583);
_SF6=Go_math_frexp.call(this._goroutine,[],_t18);
_Next = -6;
return this;
case -6:
this.setLatest(2583,-6);
_t13=_SF6.res();
 // _t13 = Frexp(t18) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:40:21
this.SubFn8();
_Phi=9;
case 10: // for.done
this.setLatest(2583,10);
this.SubFn9();
_Phi=10;
case 11: // for.loop
this.setLatest(2583,11);
this.setPH(2575);
_t17=((_Phi==7)?false:(_Phi==13)?_t17:(_Phi==8)?true:false); // _t17 = phi [7.if.done: false:bool, 13.if.done: t17, 8.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/mod.go:32:2
this.setPH(2576);
_t18=((_Phi==7)?p_x:(_Phi==13)?_t24:(_Phi==8)?_t12:0.0); // _t18 = phi [7.if.done: x, 13.if.done: t24, 8.if.then: t12] #r *ssa.Phi @ /usr/local/go/src/pkg/math/mod.go:33:2
this.SubFn10();
_Phi=11;
case 12: // if.then
this.setLatest(2576,12);
this.SubFn11();
_Phi=12;
case 13: // if.done
this.setLatest(2576,13);
this.setPH(2583);
_t21=((_Phi==9)?_t15:(_Phi==12)?_t20:0); // _t21 = phi [9.for.body: t15, 12.if.then: t20] #rexp *ssa.Phi @ /usr/local/go/src/pkg/math/mod.go:40:8
this.SubFn12();
this.setPH(2587);
_SF7=Go_math_ldexp.call(this._goroutine,[],_t7,_t22);
_Next = -7;
return this;
case -7:
this.setLatest(2587,-7);
_t23=_SF7.res();
 // _t23 = Ldexp(t7, t22) *ssa.Call @ /usr/local/go/src/pkg/math/mod.go:44:16
this.SubFn13();
_Phi=13;
case 14: // if.then
this.setLatest(2587,14);
this.SubFn14();
_Phi=14;
case 15: // if.done
this.setLatest(2587,15);
this.setPH(2576);
_t26=((_Phi==10)?_t18:(_Phi==14)?_t25:0.0); // _t26 = phi [10.for.done: t18, 14.if.then: t25] #r *ssa.Phi @ /usr/local/go/src/pkg/math/mod.go:33:2
this.setPH(2592);
_res= _t26;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t26 *ssa.Return @ /usr/local/go/src/pkg/math/mod.go:49:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2567);
_t0=(Force.toFloat(p_y)==Force.toFloat(0)); // _t0 = y == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:24:7
_Next=_t0 ? 1 : 5; // if t0 goto 1.if.then else 5.cond.false *ssa.If near /usr/local/go/src/pkg/math/mod.go:24:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
this.setPH(2570);
_t2=(Force.toFloat(p_y)<Force.toFloat(0)); // _t2 = y < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:27:7
_Next=_t2 ? 6 : 7; // if t2 goto 6.if.then else 7.if.done *ssa.If near /usr/local/go/src/pkg/math/mod.go:27:7
}// end SubFn1
private inline  function SubFn2():Void {
_Next=_t3 ? 1 : 2; // if t3 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/mod.go:27:7
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.if.then else 3.cond.false *ssa.If near /usr/local/go/src/pkg/math/mod.go:27:7
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t5 ? 1 : 4; // if t5 goto 1.if.then else 4.cond.false *ssa.If near /usr/local/go/src/pkg/math/mod.go:27:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(2571);
_t6=(-Force.toFloat(p_y)); // _t6 = -y *ssa.UnOp @ /usr/local/go/src/pkg/math/mod.go:28:7
_Next=7; // jump 7.if.done *ssa.Jump near /usr/local/go/src/pkg/math/mod.go:28:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t11:Bool;
_t9=_t8.r0; // _t9 = extract t8 #0 *ssa.Extract near /usr/local/go/src/pkg/math/mod.go:28:7
_t10=_t8.r1; // _t10 = extract t8 #1 *ssa.Extract near /usr/local/go/src/pkg/math/mod.go:28:7
this.setPH(2577);
_t11=(Force.toFloat(p_x)<Force.toFloat(0)); // _t11 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:34:7
_Next=_t11 ? 8 : 11; // if t11 goto 8.if.then else 11.for.loop *ssa.If near /usr/local/go/src/pkg/math/mod.go:34:7
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(2578);
_t12=(-Force.toFloat(p_x)); // _t12 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/mod.go:35:7
_Next=11; // jump 11.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/mod.go:35:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t16:Bool;
_t14=_t13.r0; // _t14 = extract t13 #0 *ssa.Extract near /usr/local/go/src/pkg/math/mod.go:35:7
_t15=_t13.r1; // _t15 = extract t13 #1 *ssa.Extract near /usr/local/go/src/pkg/math/mod.go:35:7
this.setPH(2584);
_t16=(Force.toFloat(_t14)<Force.toFloat(_t9)); // _t16 = t14 < t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:41:10
_Next=_t16 ? 12 : 13; // if t16 goto 12.if.then else 13.if.done *ssa.If near /usr/local/go/src/pkg/math/mod.go:41:10
}// end SubFn8
private inline  function SubFn9():Void {
_Next=_t17 ? 14 : 15; // if t17 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/math/mod.go:41:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t19:Bool;
this.setPH(2582);
_t19=(Force.toFloat(_t18)>=Force.toFloat(_t7)); // _t19 = t18 >= t7 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:39:8
_Next=_t19 ? 9 : 10; // if t19 goto 9.for.body else 10.for.done *ssa.If near /usr/local/go/src/pkg/math/mod.go:39:8
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(2585);
_t20=(_t15-1); // _t20 = t15 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:42:16
_Next=13; // jump 13.if.done *ssa.Jump near /usr/local/go/src/pkg/math/mod.go:42:16
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(2587);
_t22=(_t21-_t10); // _t22 = t21 - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:44:24
}// end SubFn12
private inline  function SubFn13():Void {
_t24=(Force.toFloat(_t18)-Force.toFloat(_t23)); // _t24 = t18 - t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/mod.go:44:9
_Next=11; // jump 11.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/mod.go:44:9
}// end SubFn13
private inline  function SubFn14():Void {
this.setPH(2590);
_t25=(-Force.toFloat(_t18)); // _t25 = -t18 *ssa.UnOp @ /usr/local/go/src/pkg/math/mod.go:47:7
_Next=15; // jump 15.if.done *ssa.Jump near /usr/local/go/src/pkg/math/mod.go:47:7
}// end SubFn14
}
#if js @:expose("Go_utf8_RuneCountInString") #end class Go_utf8_RuneCountInString extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:382:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5626,"Go_utf8_RuneCountInString");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Dynamic=null;
var _t1:Int=0;
var _t2:{r0:Bool,r1:Dynamic,r2:Dynamic}=null;
var _t3:Bool=false;
var _t4:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_RuneCountInString(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : Int {
var _sf=new Go_utf8_RuneCountInString(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_RuneCountInString
{return new Go_utf8_RuneCountInString(gr,_bds, p_s);
}
public function run():Go_utf8_RuneCountInString {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5626,0);
this.SubFn0();
_Phi=0;
case 1: // rangeiter.loop
this.setLatest(5626,1);
_t1=((_Phi==0)?0:(_Phi==2)?_t4:0); // _t1 = phi [0.entry: 0:int, 2.rangeiter.body: t4] #n *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:382:35
this.SubFn1();
_Phi=1;
case 2: // rangeiter.body
this.setLatest(5626,2);
this.SubFn2();
_Phi=2;
case 3: // rangeiter.done
this.setLatest(5626,3);
this.setPH(5630);
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:386:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5627);
_t0={k:0,v:Force.toUTF8slice(this._goroutine,p_s)}; // _t0 = range s *ssa.Range @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
_Next=1; // jump 1.rangeiter.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:{r0:Bool,r1:Dynamic,r2:Dynamic};
var _t3:Bool;
_t2={var _thisK:Int=_t0.k;if(_t0.k>=_t0.v.len()){r0:false,r1:0,r2:0};else {var _dr:{r0:Int,r1:Int}=Go_utf8_DecodeRune.callFromRT(this._goroutine,_t0.v.subSlice(_thisK,-1));_t0.k+=_dr.r1;{r0:true,r1:cast(_thisK,Int),r2:cast(_dr.r0,Int)};}}; // _t2 = next t0 *ssa.Next near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
_t3=_t2.r0; // _t3 = extract t2 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
_Next=_t3 ? 2 : 3; // if t3 goto 2.rangeiter.body else 3.rangeiter.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
}// end SubFn1
private inline  function SubFn2():Void {
_t4=(_t1+1); // _t4 = t1 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
_Next=1; // jump 1.rangeiter.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2
}// end SubFn2
}
#if (!php) private #end class Go_main_dot_square_area extends StackFrameBasis implements StackFrame {  // interfaces.go:28:17
var p_s:Array<Dynamic>;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Array<Dynamic>) {
super(gr,28,"Go_main_dot_square_area");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Array<Dynamic>=null;
var _t2:Float=0.0;
var _t3:Array<Dynamic>=null;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Array<Dynamic>) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_dot_square_area(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Array<Dynamic>) : Float {
var _sf=new Go_main_dot_square_area(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Array<Dynamic>) : Go_main_dot_square_area
{return new Go_main_dot_square_area(gr,_bds, p_s);
}
public function run():Go_main_dot_square_area {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(28,0);
this.SubFn0();
this.setPH(29);
_res= _t5;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5 *ssa.Return @ interfaces.go:29:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Array<Dynamic>;
var _t2:Float;
var _t3:Array<Dynamic>;
var _t4:Float;
this.setPH(28);
_t0=new Pointer({var _v=new Array<Dynamic>();_v=[0.0,0.0]; _v;}); // _t0 = local square (s) *ssa.Alloc @ interfaces.go:28:7
_t0.store(p_s); // *t0 = s *ssa.Store near interfaces.go:28:7
_t1=_t0.load(); // _t1 = *t0 *ssa.UnOp near interfaces.go:28:7
this.setPH(29);
_t2=_t1[0]; // _t2 = t1.width [#0] *ssa.Field @ interfaces.go:29:11
_t3=_t0.load(); // _t3 = *t0 *ssa.UnOp near interfaces.go:29:11
_t4=_t3[1]; // _t4 = t3.height [#1] *ssa.Field @ interfaces.go:29:21
_t5=(Force.toFloat(_t2)*Force.toFloat(_t4)); // _t5 = t2 * t4 *ssa.BinOp @ interfaces.go:29:17
}// end SubFn0
}
#if js @:expose("Go_math_Float32bits") #end class Go_math_Float32bits extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/unsafe.go:10:6
var p_f:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_f : Float) {
super(gr,4984,"Go_math_Float32bits");
this._bds=_bds;
this.p_f=p_f;
Scheduler.push(gr,this);
}
var _res:Int;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:UnsafePointer=null;
var _t2:Pointer=null;
var _t3:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_f : Float) : Int {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Float32bits(0,[], p_f).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_f : Float) : Int {
var _sf=new Go_math_Float32bits(_gr,[], p_f).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_f : Float) : Go_math_Float32bits
{return new Go_math_Float32bits(gr,_bds, p_f);
}
public function run():Go_math_Float32bits {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4984,0);
this.SubFn0();
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/unsafe.go:10:38

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:UnsafePointer;
var _t2:Pointer;
_t0=new Pointer(0.0); // _t0 = new float32 (f) *ssa.Alloc @ /usr/local/go/src/pkg/math/unsafe.go:10:18
_t0.store(p_f); // *t0 = f *ssa.Store near /usr/local/go/src/pkg/math/unsafe.go:10:18
_t1=new UnsafePointer(_t0); // _t1 = convert unsafe.Pointer <- *float32 (t0) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:10:70
_t2=cast(_t1,Pointer); // _t2 = convert *uint32 <- unsafe.Pointer (t1) *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:10:55
_t3=(_t2.load()|0); // _t3 = *t2 *ssa.UnOp @ /usr/local/go/src/pkg/math/unsafe.go:10:45
}// end SubFn0
}
#if (!php) private #end class Go_math_qone extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j1.go:403:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4825,"Go_math_qone");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Pointer=null;
var _t2:Bool=false;
var _t3:Array<Float>=null;
var _t4:Array<Float>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Array<Float>=null;
var _t8:Float=0.0;
var _t9:Array<Float>=null;
var _t10:Float=0.0;
var _t11:Array<Float>=null;
var _t12:Float=0.0;
var _t13:Array<Float>=null;
var _t14:Float=0.0;
var _t15:Array<Float>=null;
var _t16:Float=0.0;
var _t17:Array<Float>=null;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Float=0.0;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Array<Float>=null;
var _t30:Float=0.0;
var _t31:Array<Float>=null;
var _t32:Float=0.0;
var _t33:Array<Float>=null;
var _t34:Float=0.0;
var _t35:Array<Float>=null;
var _t36:Float=0.0;
var _t37:Array<Float>=null;
var _t38:Float=0.0;
var _t39:Array<Float>=null;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Bool=false;
var _t57:Array<Float>=null;
var _t58:Array<Float>=null;
var _t59:Bool=false;
var _t60:Array<Float>=null;
var _t61:Array<Float>=null;
var _t62:Bool=false;
var _t63:Array<Float>=null;
var _t64:Array<Float>=null;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_qone(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_qone(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_qone
{return new Go_math_qone(gr,_bds, p_x);
}
public function run():Go_math_qone {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4825,0);
this.SubFn0();

case 1: // if.then
this.setLatest(4825,1);
this.SubFn1();

case 2: // if.done
this.setLatest(4825,2);
this.SubFn2();
this.setPH(4843);
_res= _t55;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t55 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:421:2

case 3: // if.else
this.setLatest(4843,3);
this.SubFn3();

case 4: // if.then
this.setLatest(4843,4);
this.SubFn4();

case 5: // if.else
this.setLatest(4843,5);
this.SubFn5();

case 6: // if.then
this.setLatest(4843,6);
this.SubFn6();

case 7: // if.else
this.setLatest(4843,7);
this.SubFn7();

case 8: // if.then
this.setLatest(4843,8);
this.SubFn8();

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t2:Bool;
this.setPH(4826);
_t0=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t0 = local [6]float64 (p) *ssa.Alloc @ /usr/local/go/src/pkg/math/j1.go:404:6
_t1=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;}); // _t1 = local [6]float64 (q) *ssa.Alloc @ /usr/local/go/src/pkg/math/j1.go:404:9
this.setPH(4827);
_t2=(Force.toFloat(p_x)>=Force.toFloat(8)); // _t2 = x >= 8:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:405:7
_Next=_t2 ? 1 : 3; // if t2 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:405:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Array<Float>;
var _t4:Array<Float>;
_t3=Go.math_q1R8.load(); // _t3 = *q1R8 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:405:7
_t0.store(_t3); // *t0 = t3 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:405:7
_t4=Go.math_q1S8.load(); // _t4 = *q1S8 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:405:7
_t1.store(_t4); // *t1 = t4 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:405:7
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:405:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Float;
var _t7:Array<Float>;
var _t8:Float;
var _t9:Array<Float>;
var _t10:Float;
var _t11:Array<Float>;
var _t12:Float;
var _t13:Array<Float>;
var _t14:Float;
var _t15:Array<Float>;
var _t16:Float;
var _t17:Array<Float>;
var _t18:Float;
var _t19:Float;
var _t20:Float;
var _t21:Float;
var _t22:Float;
var _t23:Float;
var _t24:Float;
var _t25:Float;
var _t26:Float;
var _t27:Float;
var _t29:Array<Float>;
var _t30:Float;
var _t31:Array<Float>;
var _t32:Float;
var _t33:Array<Float>;
var _t34:Float;
var _t35:Array<Float>;
var _t36:Float;
var _t37:Array<Float>;
var _t38:Float;
var _t39:Array<Float>;
var _t40:Float;
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t47:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t53:Float;
var _t54:Float;
this.setPH(4840);
_t5=(Force.toFloat(p_x)*Force.toFloat(p_x)); // _t5 = x * x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:418:14
_t6=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t5)); // _t6 = 1:float64 / t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:418:9
_t7=_t0.load(); // _t7 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:418:9
this.setPH(4841);
_t8=_t7[0]; // _t8 = t7[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:8
_t9=_t0.load(); // _t9 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:8
_t10=_t9[1]; // _t10 = t9[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:18
_t11=_t0.load(); // _t11 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:18
_t12=_t11[2]; // _t12 = t11[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:26
_t13=_t0.load(); // _t13 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:26
_t14=_t13[3]; // _t14 = t13[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:34
_t15=_t0.load(); // _t15 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:34
_t16=_t15[4]; // _t16 = t15[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:42
_t17=_t0.load(); // _t17 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:42
_t18=_t17[5]; // _t18 = t17[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:419:49
_t19=(Force.toFloat(_t6)*Force.toFloat(_t18)); // _t19 = t6 * t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:47
_t20=(Force.toFloat(_t16)+Force.toFloat(_t19)); // _t20 = t16 + t19 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:45
_t21=(Force.toFloat(_t6)*Force.toFloat(_t20)); // _t21 = t6 * t20 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:39
_t22=(Force.toFloat(_t14)+Force.toFloat(_t21)); // _t22 = t14 + t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:37
_t23=(Force.toFloat(_t6)*Force.toFloat(_t22)); // _t23 = t6 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:31
_t24=(Force.toFloat(_t12)+Force.toFloat(_t23)); // _t24 = t12 + t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:29
_t25=(Force.toFloat(_t6)*Force.toFloat(_t24)); // _t25 = t6 * t24 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:23
_t26=(Force.toFloat(_t10)+Force.toFloat(_t25)); // _t26 = t10 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:21
_t27=(Force.toFloat(_t6)*Force.toFloat(_t26)); // _t27 = t6 * t26 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:15
_t28=(Force.toFloat(_t8)+Force.toFloat(_t27)); // _t28 = t8 + t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:419:12
_t29=_t1.load(); // _t29 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:419:12
this.setPH(4842);
_t30=_t29[0]; // _t30 = t29[0:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:15
_t31=_t1.load(); // _t31 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:420:15
_t32=_t31[1]; // _t32 = t31[1:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:23
_t33=_t1.load(); // _t33 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:420:23
_t34=_t33[2]; // _t34 = t33[2:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:31
_t35=_t1.load(); // _t35 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:420:31
_t36=_t35[3]; // _t36 = t35[3:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:39
_t37=_t1.load(); // _t37 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:420:39
_t38=_t37[4]; // _t38 = t37[4:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:47
_t39=_t1.load(); // _t39 = *t1 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:420:47
_t40=_t39[5]; // _t40 = t39[5:int] *ssa.Index @ /usr/local/go/src/pkg/math/j1.go:420:54
_t41=(Force.toFloat(_t6)*Force.toFloat(_t40)); // _t41 = t6 * t40 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:52
_t42=(Force.toFloat(_t38)+Force.toFloat(_t41)); // _t42 = t38 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:50
_t43=(Force.toFloat(_t6)*Force.toFloat(_t42)); // _t43 = t6 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:44
_t44=(Force.toFloat(_t36)+Force.toFloat(_t43)); // _t44 = t36 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:42
_t45=(Force.toFloat(_t6)*Force.toFloat(_t44)); // _t45 = t6 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:36
_t46=(Force.toFloat(_t34)+Force.toFloat(_t45)); // _t46 = t34 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:34
_t47=(Force.toFloat(_t6)*Force.toFloat(_t46)); // _t47 = t6 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:28
_t48=(Force.toFloat(_t32)+Force.toFloat(_t47)); // _t48 = t32 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:26
_t49=(Force.toFloat(_t6)*Force.toFloat(_t48)); // _t49 = t6 * t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:20
_t50=(Force.toFloat(_t30)+Force.toFloat(_t49)); // _t50 = t30 + t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:18
_t51=(Force.toFloat(_t6)*Force.toFloat(_t50)); // _t51 = t6 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:12
_t52=(Force.toFloat(1)+Force.toFloat(_t51)); // _t52 = 1:float64 + t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:420:9
this.setPH(4843);
_t53=Force.floatDiv(Force.toFloat(_t28),Force.toFloat(_t52)); // _t53 = t28 / t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:421:19
_t54=(Force.toFloat(0.375)+Force.toFloat(_t53)); // _t54 = 3/8:float64 + t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:421:16
_t55=Force.floatDiv(Force.toFloat(_t54),Force.toFloat(p_x)); // _t55 = t54 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:421:23
}// end SubFn2
private inline  function SubFn3():Void {
var _t56:Bool;
this.setPH(4830);
_t56=(Force.toFloat(p_x)>=Force.toFloat(4.5454)); // _t56 = x >= 22727/5000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:408:14
_Next=_t56 ? 4 : 5; // if t56 goto 4.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:408:14
}// end SubFn3
private inline  function SubFn4():Void {
var _t57:Array<Float>;
var _t58:Array<Float>;
_t57=Go.math_q1R5.load(); // _t57 = *q1R5 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:408:14
_t0.store(_t57); // *t0 = t57 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:408:14
_t58=Go.math_q1S5.load(); // _t58 = *q1S5 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:408:14
_t1.store(_t58); // *t1 = t58 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:408:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:408:14
}// end SubFn4
private inline  function SubFn5():Void {
var _t59:Bool;
this.setPH(4833);
_t59=(Force.toFloat(p_x)>=Force.toFloat(2.8571)); // _t59 = x >= 28571/10000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:411:14
_Next=_t59 ? 6 : 7; // if t59 goto 6.if.then else 7.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:411:14
}// end SubFn5
private inline  function SubFn6():Void {
var _t60:Array<Float>;
var _t61:Array<Float>;
_t60=Go.math_q1R3.load(); // _t60 = *q1R3 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:411:14
_t0.store(_t60); // *t0 = t60 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:411:14
_t61=Go.math_q1S3.load(); // _t61 = *q1S3 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:411:14
_t1.store(_t61); // *t1 = t61 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:411:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:411:14
}// end SubFn6
private inline  function SubFn7():Void {
var _t62:Bool;
this.setPH(4836);
_t62=(Force.toFloat(p_x)>=Force.toFloat(2)); // _t62 = x >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:414:14
_Next=_t62 ? 8 : 2; // if t62 goto 8.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:414:14
}// end SubFn7
private inline  function SubFn8():Void {
var _t63:Array<Float>;
var _t64:Array<Float>;
_t63=Go.math_q1R2.load(); // _t63 = *q1R2 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:414:14
_t0.store(_t63); // *t0 = t63 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:414:14
_t64=Go.math_q1S2.load(); // _t64 = *q1S2 *ssa.UnOp near /usr/local/go/src/pkg/math/j1.go:414:14
_t1.store(_t64); // *t1 = t64 *ssa.Store near /usr/local/go/src/pkg/math/j1.go:414:14
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:414:14
}// end SubFn8
}
#if (!php) private #end class Go_math_exp2 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/exp.go:137:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,1116,"Go_math_exp2");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _SF3:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _SF4:StackFrame;
var _t4:Float=0.0;
var _t5:Bool=false;
var _t6:Bool=false;
var _t7:Bool=false;
var _t8:Int=0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _SF5:StackFrame;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Int=0;
var _t17:Float=0.0;
var _t18:Int=0;
var _t19:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_exp2(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_exp2(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_exp2
{return new Go_math_exp2(gr,_bds, p_x);
}
public function run():Go_math_exp2 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1116,0);
this.setPH(1127);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(1127,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:148:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1127,1);
this.setPH(1128);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:149:3

case 2: // switch.body
this.setLatest(1128,2);
this.setPH(1130);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:151:3

case 3: // switch.next
this.setLatest(1130,3);
this.setPH(1129);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -2;
return this;
case -2:
this.setLatest(1129,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:150:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1129,4);
this.setPH(1127);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -3;
return this;
case -3:
this.setLatest(1127,-3);
_t2=_SF3.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:148:24
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1127,5);
_t3=((_Phi==0)?true:(_Phi==4)?_t2:false); // _t3 = phi [0.entry: true:bool, 4.binop.rhs: t2] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/exp.go:148:16
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(1127,6);
this.setPH(1132);
_t4=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t4 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:153:13
_res= _t4;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t4 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:153:3

case 7: // switch.next
this.setLatest(1132,7);
this.SubFn4();
_Phi=7;
case 8: // switch.body
this.setLatest(1132,8);
this.setPH(1134);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:155:3

case 9: // switch.next
this.setLatest(1134,9);
this.SubFn5();
_Phi=9;
case 10: // switch.next
this.setLatest(1134,10);
this.SubFn6();
_Phi=10;
case 11: // switch.done
this.setLatest(1134,11);
this.setPH(1139);
_t8=((_Phi==12)?_t16:(_Phi==13)?_t18:(_Phi==14)?0:0); // _t8 = phi [12.switch.body: t16, 13.switch.body: t18, 14.switch.next: 0:int] #k *ssa.Phi @ /usr/local/go/src/pkg/math/exp.go:160:6
this.SubFn7();
this.setPH(1151);
_SF5=Go_math_expmulti.call(this._goroutine,[],_t11,_t13,_t8);
_Next = -5;
return this;
case -5:
this.setLatest(1151,-5);
_t14=_SF5.res();
 // _t14 = expmulti(t11, t13, t8) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:172:17
_res= _t14;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t14 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:172:2

case 12: // switch.body
this.setLatest(1151,12);
this.SubFn8();
_Phi=12;
case 13: // switch.body
this.setLatest(1151,13);
this.SubFn9();
_Phi=13;
case 14: // switch.next
this.setLatest(1151,14);
this.SubFn10();
_Phi=14;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/exp.go:172:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 7; // if t1 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:172:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:172:2
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t3 ? 1 : 3; // if t3 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:172:2
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(1131);
_t5=(Force.toFloat(p_x)>Force.toFloat(1023.9999999999999)); // _t5 = x > 10239999999999999/10000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:152:9
_Next=_t5 ? 6 : 9; // if t5 goto 6.switch.body else 9.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:152:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t6:Bool;
this.setPH(1133);
_t6=(Force.toFloat(p_x)<Force.toFloat((-1074))); // _t6 = x < -1074:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:154:9
_Next=_t6 ? 8 : 10; // if t6 goto 8.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:154:9
}// end SubFn5
private inline  function SubFn6():Void {
var _t7:Bool;
this.setPH(1141);
_t7=(Force.toFloat(p_x)>Force.toFloat(0)); // _t7 = x > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:162:9
_Next=_t7 ? 12 : 14; // if t7 goto 12.switch.body else 14.switch.next *ssa.If near /usr/local/go/src/pkg/math/exp.go:162:9
}// end SubFn6
private inline  function SubFn7():Void {
var _t9:Float;
var _t12:Float;
this.setPH(1146);
_t9=_t8; // _t9 = convert float64 <- int (t8) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:167:18
_t10=(Force.toFloat(p_x)-Force.toFloat(_t9)); // _t10 = x - t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:167:9
this.setPH(1147);
_t11=(Force.toFloat(_t10)*Force.toFloat(0.6931471803691238)); // _t11 = t10 * 69314718036912381649/100000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:168:10
this.setPH(1148);
_t12=(-Force.toFloat(_t10)); // _t12 = -t10 *ssa.UnOp @ /usr/local/go/src/pkg/math/exp.go:169:8
_t13=(Force.toFloat(_t12)*Force.toFloat(1.9082149292705877e-10)); // _t13 = t12 * 95410746463529385001/500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:169:11
}// end SubFn7
private inline  function SubFn8():Void {
var _t15:Float;
this.setPH(1142);
_t15=(Force.toFloat(p_x)+Force.toFloat(0.5)); // _t15 = x + 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:163:13
_t16={var _f:Float=_t15;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t16 = convert int <- float64 (t15) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:163:10
_Next=11; // jump 11.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:163:10
}// end SubFn8
private inline  function SubFn9():Void {
var _t17:Float;
this.setPH(1144);
_t17=(Force.toFloat(p_x)-Force.toFloat(0.5)); // _t17 = x - 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:165:13
_t18={var _f:Float=_t17;_f>=0?Math.floor(_f):Math.ceil(_f);}; // _t18 = convert int <- float64 (t17) *ssa.Convert @ /usr/local/go/src/pkg/math/exp.go:165:10
_Next=11; // jump 11.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/exp.go:165:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t19:Bool;
this.setPH(1143);
_t19=(Force.toFloat(p_x)<Force.toFloat(0)); // _t19 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:164:9
_Next=_t19 ? 13 : 11; // if t19 goto 13.switch.body else 11.switch.done *ssa.If near /usr/local/go/src/pkg/math/exp.go:164:9
}// end SubFn10
}
#if js @:expose("Go_utf8_DecodeLastRune") #end class Go_utf8_DecodeLastRune extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:239:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5483,"Go_utf8_DecodeLastRune");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:{r0:Int, r1:Int};
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Int=0;
var _t3:Pointer=null;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Bool=false;
var _t7:Int=0;
var _t8:Bool=false;
var _t9:Int=0;
var _t10:Int=0;
var _t11:Pointer=null;
var _t12:Int=0;
var _SF1:StackFrame;
var _t13:Bool=false;
var _t14:Bool=false;
var _t15:Int=0;
var _t16:Bool=false;
var _t17:Int=0;
var _t18:Int=0;
var _t19:Slice=null;
var _SF2:StackFrame;
var _t20:{r0:Int,r1:Int}=null;
var _t21:Int=0;
var _t22:Int=0;
var _t23:Int=0;
var _t24:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : {r0:Int, r1:Int} {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_DecodeLastRune(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : {r0:Int, r1:Int} {
var _sf=new Go_utf8_DecodeLastRune(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_DecodeLastRune
{return new Go_utf8_DecodeLastRune(gr,_bds, p_p);
}
public function run():Go_utf8_DecodeLastRune {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5483,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(5483,1);
this.setPH(5486);
_res= {r0:65533,r1:0};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 0:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:242:3

case 2: // if.done
this.setLatest(5486,2);
this.SubFn1();
_Phi=2;
case 3: // if.then
this.setLatest(5486,3);
this.setPH(5491);
_res= {r0:_t5,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t5, 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:247:3

case 4: // if.done
this.setLatest(5491,4);
this.SubFn2();
_Phi=4;
case 5: // if.then
this.setLatest(5491,5);
this.SubFn3();
_Phi=5;
case 6: // if.done
this.setLatest(5491,6);
this.setPH(5496);
_t9=((_Phi==4)?_t7:(_Phi==5)?0:0); // _t9 = phi [4.if.done: t7, 5.if.then: 0:int] #lim *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:252:2
this.SubFn4();
_Phi=6;
case 7: // for.body
this.setLatest(5496,7);
this.SubFn5();
this.setPH(5501);
_SF1=Go_utf8_RuneStart.call(this._goroutine,[],_t12);
_Next = -1;
return this;
case -1:
this.setLatest(5501,-1);
_t13=_SF1.res();
 // _t13 = RuneStart(t12) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:257:15
this.SubFn6();
_Phi=7;
case 8: // for.done
this.setLatest(5501,8);
this.SubFn7();
_Phi=8;
case 9: // for.loop
this.setLatest(5501,9);
this.setPH(5488);
_t15=((_Phi==6)?_t10:(_Phi==10)?_t17:0); // _t15 = phi [6.if.done: t10, 10.if.done: t17] #start *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:244:2
this.SubFn8();
_Phi=9;
case 10: // if.done
this.setLatest(5488,10);
this.SubFn9();
_Phi=10;
case 11: // if.then
this.setLatest(5488,11);
this.SubFn10();
_Phi=11;
case 12: // if.done
this.setLatest(5488,12);
_t18=((_Phi==8)?_t15:(_Phi==11)?0:0); // _t18 = phi [8.for.done: t15, 11.if.then: 0:int] #start *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:244:2
this.SubFn11();
this.setPH(5508);
_SF2=Go_utf8_DecodeRune.call(this._goroutine,[],_t19);
_Next = -2;
return this;
case -2:
this.setLatest(5508,-2);
_t20=_SF2.res();
 // _t20 = DecodeRune(t19) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:264:22
this.SubFn12();
_Phi=12;
case 13: // if.then
this.setLatest(5508,13);
this.setPH(5510);
_res= {r0:65533,r1:1};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 65533:rune, 1:int *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:266:3

case 14: // if.done
this.setLatest(5510,14);
this.setPH(5512);
_res= {r0:_t21,r1:_t22};
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t21, t22 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:268:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
this.setPH(5484);
_t0=({var _v=p_p;_v==null?0:_v.len();}); // _t0 = len(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:240:12
this.setPH(5485);
_t1=(_t0==0); // _t1 = t0 == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:241:9
_Next=_t1 ? 1 : 2; // if t1 goto 1.if.then else 2.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:241:9
}// end SubFn0
private inline  function SubFn1():Void {
var _t3:Pointer;
var _t4:Int;
var _t6:Bool;
this.setPH(5488);
_t2=(_t0-1); // _t2 = t0 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:244:15
this.setPH(5489);
if((_t2<0)||(_t2>=p_p.len())) Scheduler.ioor(); // _t3 = &p[t2] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:245:12 [POINTER]
_t3=p_p.addr(_t2);  // _t3 = &p[t2] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:245:12 [POINTER]
_t4=(_t3.load()|0); // _t4 = *t3 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:245:12
_t5=_t4; // _t5 = convert rune <- byte (t4) *ssa.Convert @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:245:10
this.setPH(5490);
_t6=(_t5<128); // _t6 = t5 < 128:rune *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:246:7
_Next=_t6 ? 3 : 4; // if t6 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:246:7
}// end SubFn1
private inline  function SubFn2():Void {
var _t8:Bool;
this.setPH(5496);
_t7=(_t0-4); // _t7 = t0 - 4:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:252:13
this.setPH(5497);
_t8=(_t7<0); // _t8 = t7 < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:253:9
_Next=_t8 ? 5 : 6; // if t8 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:253:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=6; // jump 6.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:253:9
}// end SubFn3
private inline  function SubFn4():Void {
_t10=(_t2-1); // _t10 = t2 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:253:9
_Next=9; // jump 9.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:253:9
}// end SubFn4
private inline  function SubFn5():Void {
var _t11:Pointer;
this.setPH(5501);
if((_t15<0)||(_t15>=p_p.len())) Scheduler.ioor(); // _t11 = &p[t15] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:257:17 [POINTER]
_t11=p_p.addr(_t15);  // _t11 = &p[t15] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:257:17 [POINTER]
_t12=(_t11.load()|0); // _t12 = *t11 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:257:17
}// end SubFn5
private inline  function SubFn6():Void {
_Next=_t13 ? 8 : 10; // if t13 goto 8.for.done else 10.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:257:17
}// end SubFn6
private inline  function SubFn7():Void {
var _t14:Bool;
this.setPH(5505);
_t14=(_t15<0); // _t14 = t15 < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:261:11
_Next=_t14 ? 11 : 12; // if t14 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:261:11
}// end SubFn7
private inline  function SubFn8():Void {
var _t16:Bool;
this.setPH(5500);
_t16=(_t15>=_t9); // _t16 = t15 >= t9 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:256:21
_Next=_t16 ? 7 : 8; // if t16 goto 7.for.body else 8.for.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:256:21
}// end SubFn8
private inline  function SubFn9():Void {
_t17=(_t15-1); // _t17 = t15 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:256:21
_Next=9; // jump 9.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:256:21
}// end SubFn9
private inline  function SubFn10():Void {
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:256:21
}// end SubFn10
private inline  function SubFn11():Void {
this.setPH(5508);
_t19=p_p.subSlice(_t18,_t0); // _t19 = slice p[t18:t0] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:264:24
}// end SubFn11
private inline  function SubFn12():Void {
var _t23:Int;
var _t24:Bool;
_t21=_t20.r0; // _t21 = extract t20 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:264:24
_t22=_t20.r1; // _t22 = extract t20 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:264:24
this.setPH(5509);
_t23=(_t18+_t22); // _t23 = t18 + t22 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:265:10
_t24=(_t23!=_t0); // _t24 = t23 != t0 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:265:16
_Next=_t24 ? 13 : 14; // if t24 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:265:16
}// end SubFn12
}
#if js @:expose("Go_math_Inf") #end class Go_math_Inf extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/bits.go:17:6
var p_sign:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_sign : Int) {
super(gr,233,"Go_math_Inf");
this._bds=_bds;
this.p_sign=p_sign;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:GOint64=null;
var _SF1:StackFrame;
var _t2:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_sign : Int) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Inf(0,[], p_sign).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_sign : Int) : Float {
var _sf=new Go_math_Inf(_gr,[], p_sign).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_sign : Int) : Go_math_Inf
{return new Go_math_Inf(gr,_bds, p_sign);
}
public function run():Go_math_Inf {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(233,0);
this.SubFn0();
_Phi=0;
case 1: // if.then
this.setLatest(233,1);
this.SubFn1();
_Phi=1;
case 2: // if.done
this.setLatest(233,2);
this.setPH(234);
_t1=((_Phi==1)?GOint64.make(0x7ff00000,0x0):(_Phi==3)?GOint64.make(0xfff00000,0x0):GOint64.make(0,0)); // _t1 = phi [1.if.then: 9218868437227405312:uint64, 3.if.else: 18442240474082181120:uint64] #v *ssa.Phi @ /usr/local/go/src/pkg/math/bits.go:18:6
this.setPH(240);
_SF1=Go_math_Float64frombits.call(this._goroutine,[],_t1);
_Next = -1;
return this;
case -1:
this.setLatest(240,-1);
_t2=_SF1.res();
 // _t2 = Float64frombits(t1) *ssa.Call @ /usr/local/go/src/pkg/math/bits.go:24:24
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/bits.go:24:2

case 3: // if.else
this.setLatest(240,3);
this.SubFn2();
_Phi=3;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(235);
_t0=(p_sign>=0); // _t0 = sign >= 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:19:10
_Next=_t0 ? 1 : 3; // if t0 goto 1.if.then else 3.if.else *ssa.If near /usr/local/go/src/pkg/math/bits.go:19:10
}// end SubFn0
private inline  function SubFn1():Void {
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/bits.go:19:10
}// end SubFn1
private inline  function SubFn2():Void {
_Next=2; // jump 2.if.done *ssa.Jump near /usr/local/go/src/pkg/math/bits.go:19:10
}// end SubFn2
}
#if js @:expose("Go_math_Yn") #end class Go_math_Yn extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/jn.go:235:6
var p_n:Int;
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_n : Int, p_x : Float) {
super(gr,1949,"Go_math_Yn");
this._bds=_bds;
this.p_n=p_n;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _SF1:StackFrame;
var _t1:Float=0.0;
var _SF2:StackFrame;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF4:StackFrame;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _t9:Bool=false;
var _SF5:StackFrame;
var _t10:Float=0.0;
var _SF6:StackFrame;
var _t11:Float=0.0;
var _t12:Int=0;
var _t13:Bool=false;
var _t14:Int=0;
var _t15:Int=0;
var _t16:Bool=false;
var _t17:Int=0;
var _t18:Bool=false;
var _t19:Bool=false;
var _t20:Bool=false;
var _SF7:StackFrame;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _SF8:StackFrame;
var _t23:Float=0.0;
var _t24:Int=0;
var _t25:Bool=false;
var _t26:Float=0.0;
var _SF9:StackFrame;
var _t27:Float=0.0;
var _SF10:StackFrame;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _SF11:StackFrame;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _SF12:StackFrame;
var _t33:Float=0.0;
var _SF13:StackFrame;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _SF14:StackFrame;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _SF15:StackFrame;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Bool=false;
var _SF16:StackFrame;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _SF17:StackFrame;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Bool=false;
var _SF18:StackFrame;
var _t46:Float=0.0;
var _SF19:StackFrame;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Bool=false;
var _t50:Int=0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Int=0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Int=0;
var _t59:Bool=false;
var _SF20:StackFrame;
var _t60:Bool=false;
var _t61:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_n : Int, p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Yn(0,[], p_n, p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_n : Int, p_x : Float) : Float {
var _sf=new Go_math_Yn(_gr,[], p_n, p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_n : Int, p_x : Float) : Go_math_Yn
{return new Go_math_Yn(gr,_bds, p_n, p_x);
}
public function run():Go_math_Yn {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1949,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1949,1);
this.setPH(1954);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:240:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:240:3

case 2: // switch.body
this.setLatest(1954,2);
this.setPH(1956);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:242:3

case 3: // switch.next
this.setLatest(1956,3);
this.setPH(1955);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,1);
_Next = -2;
return this;
case -2:
this.setLatest(1955,-2);
_t2=_SF2.res();
 // _t2 = IsInf(x, 1:int) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:241:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1955,4);
this.setPH(1953);
_SF3=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(1953,-3);
_t3=_SF3.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:239:21
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1953,5);
_t4=((_Phi==0)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:239:13
this.SubFn3();
_Phi=5;
case 6: // switch.next
this.setLatest(1953,6);
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(1953,7);
this.setPH(1960);
_SF4=Go_math_Y0.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(1960,-4);
_t6=_SF4.res();
 // _t6 = Y0(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:246:12
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:246:3

case 8: // if.done
this.setLatest(1960,8);
this.SubFn5();
_Phi=8;
case 9: // if.then
this.setLatest(1960,9);
this.SubFn6();
_Phi=9;
case 10: // if.done
this.setLatest(1960,10);
this.SubFn7();
_Phi=10;
case 11: // if.then
this.setLatest(1960,11);
this.setPH(1964);
_t10=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t10 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:250:14
_res= _t10;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t10 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:250:4

case 12: // if.done
this.setLatest(1964,12);
this.setPH(1966);
_t11=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t11 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:252:13
_res= _t11;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t11 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:252:3

case 13: // cond.true
this.setLatest(1966,13);
this.SubFn8();
_Phi=13;
case 14: // if.then
this.setLatest(1966,14);
this.SubFn9();
_Phi=14;
case 15: // if.done
this.setLatest(1966,15);
this.setPH(1949);
_t17=((_Phi==10)?p_n:(_Phi==14)?_t14:(_Phi==16)?_t14:0); // _t17 = phi [10.if.done: n, 14.if.then: t14, 16.if.then: t14] #n *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:235:9
this.setPH(1968);
_t18=((_Phi==10)?false:(_Phi==14)?false:(_Phi==16)?true:false); // _t18 = phi [10.if.done: false:bool, 14.if.then: false:bool, 16.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:254:2
this.SubFn10();
_Phi=15;
case 16: // if.then
this.setLatest(1968,16);
this.SubFn11();
_Phi=16;
case 17: // if.then
this.setLatest(1968,17);
this.SubFn12();
_Phi=17;
case 18: // if.done
this.setLatest(1968,18);
this.SubFn13();
_Phi=18;
case 19: // if.then
this.setLatest(1968,19);
this.setPH(1977);
_SF7=Go_math_Y1.call(this._goroutine,[],p_x);
_Next = -7;
return this;
case -7:
this.setLatest(1977,-7);
_t21=_SF7.res();
 // _t21 = Y1(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:263:14
this.SubFn14();
_res= _t22;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t22 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:263:4

case 20: // if.done
this.setLatest(1977,20);
this.setPH(1979);
_SF8=Go_math_Y1.call(this._goroutine,[],p_x);
_Next = -8;
return this;
case -8:
this.setLatest(1979,-8);
_t23=_SF8.res();
 // _t23 = Y1(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:265:12
_res= _t23;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t23 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:265:3

case 21: // if.then
this.setLatest(1979,21);
this.SubFn15();
_Phi=21;
case 22: // if.done
this.setLatest(1979,22);
this.setPH(1981);
_t26=((_Phi==24)?_t32:(_Phi==33)?_t56:(_Phi==34)?_t56:0.0); // _t26 = phi [24.switch.done: t32, 33.for.loop: t56, 34.cond.true: t56] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:267:6
this.SubFn16();
_Phi=22;
case 23: // if.else
this.setLatest(1981,23);
this.setPH(2009);
_SF9=Go_math_Y0.call(this._goroutine,[],p_x);
_Next = -9;
return this;
case -9:
this.setLatest(2009,-9);
_t27=_SF9.res();
 // _t27 = Y0(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:295:10
this.setPH(2010);
_SF10=Go_math_Y1.call(this._goroutine,[],p_x);
_Next = -10;
return this;
case -10:
this.setLatest(2010,-10);
_t28=_SF10.res();
 // _t28 = Y1(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:296:9
this.SubFn17();
_Phi=23;
case 24: // switch.done
this.setLatest(2010,24);
this.setPH(1996);
_t29=((_Phi==25)?_t35:(_Phi==26)?_t39:(_Phi==28)?_t44:(_Phi==30)?_t48:(_Phi==31)?0:0.0); // _t29 = phi [25.switch.body: t35, 26.switch.body: t39, 28.switch.body: t44, 30.switch.body: t48, 31.switch.next: 0:float64] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:282:7
this.SubFn18();
this.setPH(2007);
_t31=Math.sqrt(p_x); // _t31 = Sqrt(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:293:33
this.SubFn19();
_Phi=24;
case 25: // switch.body
this.setLatest(2007,25);
this.setPH(1999);
_t33=Math.sin(p_x); // _t33 = Sin(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:285:14
_t34=Math.cos(p_x); // _t34 = Cos(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:285:23
this.SubFn20();
_Phi=25;
case 26: // switch.body
this.setLatest(1999,26);
this.setPH(2001);
_t36=Math.sin(p_x); // _t36 = Sin(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:287:15
this.SubFn21();
_t38=Math.cos(p_x); // _t38 = Cos(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:287:24
this.SubFn22();
_Phi=26;
case 27: // switch.next
this.setLatest(2001,27);
this.SubFn23();
_Phi=27;
case 28: // switch.body
this.setLatest(2001,28);
this.setPH(2003);
_t41=Math.sin(p_x); // _t41 = Sin(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:289:15
this.SubFn24();
_t43=Math.cos(p_x); // _t43 = Cos(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:289:24
this.SubFn25();
_Phi=28;
case 29: // switch.next
this.setLatest(2003,29);
this.SubFn26();
_Phi=29;
case 30: // switch.body
this.setLatest(2003,30);
this.setPH(2005);
_t46=Math.sin(p_x); // _t46 = Sin(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:291:14
_t47=Math.cos(p_x); // _t47 = Cos(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:291:23
this.SubFn27();
_Phi=30;
case 31: // switch.next
this.setLatest(2005,31);
this.SubFn28();
_Phi=31;
case 32: // for.body
this.setLatest(2005,32);
this.SubFn29();
_Phi=32;
case 33: // for.loop
this.setLatest(2005,33);
this.setPH(1981);
_t56=((_Phi==23)?_t28:(_Phi==32)?_t54:0.0); // _t56 = phi [23.if.else: t28, 32.for.body: t54] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:267:6
this.setPH(2009);
_t57=((_Phi==23)?_t27:(_Phi==32)?_t56:0.0); // _t57 = phi [23.if.else: t27, 32.for.body: t56] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:295:3
this.setPH(2012);
_t58=((_Phi==23)?1:(_Phi==32)?_t55:0); // _t58 = phi [23.if.else: 1:int, 32.for.body: t55] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:298:7
this.SubFn30();
_Phi=33;
case 34: // cond.true
this.setLatest(2012,34);
_SF20=Go_math_IsInf.call(this._goroutine,[],_t56,(-1));
_Next = -20;
return this;
case -20:
this.setLatest(2012,-20);
_t60=_SF20.res();
 // _t60 = IsInf(t56, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:298:30
this.SubFn31();
_Phi=34;
case 35: // if.then
this.setLatest(2012,35);
this.SubFn32();
this.setPH(2017);
_res= _t61;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t61 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:303:3

case 36: // if.done
this.setLatest(2017,36);
this.setPH(2019);
_res= _t26;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t26 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:305:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(1953);
_t0=(Force.toFloat(p_x)<Force.toFloat(0)); // _t0 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:239:9
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/jn.go:239:9
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 6; // if t2 goto 2.switch.body else 6.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:239:9
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:239:9
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:239:9
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(1959);
_t5=(p_n==0); // _t5 = n == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:245:7
_Next=_t5 ? 7 : 8; // if t5 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:245:7
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(1962);
_t7=(Force.toFloat(p_x)==Force.toFloat(0)); // _t7 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:248:7
_Next=_t7 ? 9 : 10; // if t7 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:248:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t8:Bool;
this.setPH(1963);
_t8=(p_n<0); // _t8 = n < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:249:8
_Next=_t8 ? 13 : 12; // if t8 goto 13.cond.true else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:249:8
}// end SubFn6
private inline  function SubFn7():Void {
var _t9:Bool;
this.setPH(1969);
_t9=(p_n<0); // _t9 = n < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:255:7
_Next=_t9 ? 14 : 15; // if t9 goto 14.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:255:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t12:Int;
var _t13:Bool;
this.setPH(1963);
_t12=(p_n&1); // _t12 = n & 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:249:16
_t13=(_t12==1); // _t13 = t12 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:249:19
_Next=_t13 ? 11 : 12; // if t13 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:249:19
}// end SubFn8
private inline  function SubFn9():Void {
var _t15:Int;
var _t16:Bool;
this.setPH(1970);
_t14=(-p_n); // _t14 = -n *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:256:7
this.setPH(1971);
_t15=(_t14&1); // _t15 = t14 & 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:257:7
_t16=(_t15==1); // _t16 = t15 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:257:10
_Next=_t16 ? 16 : 15; // if t16 goto 16.if.then else 15.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:257:10
}// end SubFn9
private inline  function SubFn10():Void {
var _t19:Bool;
this.setPH(1975);
_t19=(_t17==1); // _t19 = t17 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:261:7
_Next=_t19 ? 17 : 18; // if t19 goto 17.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:261:7
}// end SubFn10
private inline  function SubFn11():Void {
_Next=15; // jump 15.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:261:7
}// end SubFn11
private inline  function SubFn12():Void {
_Next=_t18 ? 19 : 20; // if t18 goto 19.if.then else 20.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:261:7
}// end SubFn12
private inline  function SubFn13():Void {
var _t20:Bool;
this.setPH(1982);
_t20=(Force.toFloat(p_x)>=Force.toFloat(8.148143905337944e+90)); // _t20 = x >= 8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:268:7
_Next=_t20 ? 21 : 23; // if t20 goto 21.if.then else 23.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:268:7
}// end SubFn13
private inline  function SubFn14():Void {
this.setPH(1977);
_t22=(-Force.toFloat(_t21)); // _t22 = -t21 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:263:11
}// end SubFn14
private inline  function SubFn15():Void {
var _t25:Bool;
this.setPH(1997);
_t24=(_t17&3); // _t24 = t17 & 3:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:283:12
_t25=(_t24==0); // _t25 = t24 == 0:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:283:12
_Next=_t25 ? 25 : 27; // if t25 goto 25.switch.body else 27.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:283:12
}// end SubFn15
private inline  function SubFn16():Void {
_Next=_t18 ? 35 : 36; // if t18 goto 35.if.then else 36.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:283:12
}// end SubFn16
private inline  function SubFn17():Void {
_Next=33; // jump 33.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:283:12
}// end SubFn17
private inline  function SubFn18():Void {
this.setPH(2007);
_t30=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t29)); // _t30 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:293:20
}// end SubFn18
private inline  function SubFn19():Void {
_t32=Force.floatDiv(Force.toFloat(_t30),Force.toFloat(_t31)); // _t32 = t30 / t31 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:293:27
_Next=22; // jump 22.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:293:27
}// end SubFn19
private inline  function SubFn20():Void {
this.setPH(1999);
_t35=(Force.toFloat(_t33)-Force.toFloat(_t34)); // _t35 = t33 - t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:285:18
_Next=24; // jump 24.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:285:18
}// end SubFn20
private inline  function SubFn21():Void {
this.setPH(2001);
_t37=(-Force.toFloat(_t36)); // _t37 = -t36 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:287:11
}// end SubFn21
private inline  function SubFn22():Void {
_t39=(Force.toFloat(_t37)-Force.toFloat(_t38)); // _t39 = t37 - t38 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:287:19
_Next=24; // jump 24.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:287:19
}// end SubFn22
private inline  function SubFn23():Void {
var _t40:Bool;
_t40=(_t24==1); // _t40 = t24 == 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:287:19
_Next=_t40 ? 26 : 29; // if t40 goto 26.switch.body else 29.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:287:19
}// end SubFn23
private inline  function SubFn24():Void {
this.setPH(2003);
_t42=(-Force.toFloat(_t41)); // _t42 = -t41 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:289:11
}// end SubFn24
private inline  function SubFn25():Void {
_t44=(Force.toFloat(_t42)+Force.toFloat(_t43)); // _t44 = t42 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:289:19
_Next=24; // jump 24.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:289:19
}// end SubFn25
private inline  function SubFn26():Void {
var _t45:Bool;
_t45=(_t24==2); // _t45 = t24 == 2:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:289:19
_Next=_t45 ? 28 : 31; // if t45 goto 28.switch.body else 31.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:289:19
}// end SubFn26
private inline  function SubFn27():Void {
this.setPH(2005);
_t48=(Force.toFloat(_t46)+Force.toFloat(_t47)); // _t48 = t46 + t47 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:291:18
_Next=24; // jump 24.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:291:18
}// end SubFn27
private inline  function SubFn28():Void {
var _t49:Bool;
_t49=(_t24==3); // _t49 = t24 == 3:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:291:18
_Next=_t49 ? 30 : 24; // if t49 goto 30.switch.body else 24.switch.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:291:18
}// end SubFn28
private inline  function SubFn29():Void {
var _t50:Int;
var _t51:Float;
var _t52:Float;
var _t53:Float;
this.setPH(2013);
_t50=(_t58+_t58); // _t50 = t58 + t58 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:299:24
_t51=_t50; // _t51 = convert float64 <- int (t50) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:299:22
_t52=Force.floatDiv(Force.toFloat(_t51),Force.toFloat(p_x)); // _t52 = t51 / x *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:299:27
_t53=(Force.toFloat(_t52)*Force.toFloat(_t56)); // _t53 = t52 * t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:299:30
_t54=(Force.toFloat(_t53)-Force.toFloat(_t57)); // _t54 = t53 - t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:299:32
_t55=(_t58+1); // _t55 = t58 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:299:32
_Next=33; // jump 33.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:299:32
}// end SubFn29
private inline  function SubFn30():Void {
var _t59:Bool;
this.setPH(2012);
_t59=(_t58<_t17); // _t59 = t58 < t17 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:298:17
_Next=_t59 ? 34 : 22; // if t59 goto 34.cond.true else 22.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:298:17
}// end SubFn30
private inline  function SubFn31():Void {
_Next=_t60 ? 22 : 32; // if t60 goto 22.if.done else 32.for.body *ssa.If near /usr/local/go/src/pkg/math/jn.go:298:17
}// end SubFn31
private inline  function SubFn32():Void {
this.setPH(2017);
_t61=(-Force.toFloat(_t26)); // _t61 = -t26 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:303:10
}// end SubFn32
}
#if js @:expose("Go_math_Pow10") #end class Go_math_Pow10 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/pow10.go:16:6
var p_e:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_e : Int) {
super(gr,2609,"Go_math_Pow10");
this._bds=_bds;
this.p_e=p_e;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Bool=false;
var _t1:Bool=false;
var _SF1:StackFrame;
var _t2:Float=0.0;
var _t3:Bool=false;
var _t4:Int=0;
var _SF2:StackFrame;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Array<Float>=null;
var _t9:Float=0.0;
var _t10:Int=0;
var _SF3:StackFrame;
var _t11:Float=0.0;
var _t12:Int=0;
var _SF4:StackFrame;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_e : Int) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Pow10(0,[], p_e).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_e : Int) : Float {
var _sf=new Go_math_Pow10(_gr,[], p_e).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_e : Int) : Go_math_Pow10
{return new Go_math_Pow10(gr,_bds, p_e);
}
public function run():Go_math_Pow10 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2609,0);
this.SubFn0();

case 1: // if.then
this.setLatest(2609,1);
this.setPH(2611);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/pow10.go:18:3

case 2: // if.else
this.setLatest(2611,2);
this.SubFn1();

case 3: // if.then
this.setLatest(2611,3);
this.setPH(2613);
_t2=(1>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t2 = Inf(1:int) *ssa.Call @ /usr/local/go/src/pkg/math/pow10.go:20:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/pow10.go:20:3

case 4: // if.done
this.setLatest(2613,4);
this.SubFn2();

case 5: // if.then
this.setLatest(2613,5);
this.SubFn3();
this.setPH(2617);
_SF2=Go_math_Pow10.call(this._goroutine,[],_t4);
_Next = -2;
return this;
case -2:
this.setLatest(2617,-2);
_t5=_SF2.res();
 // _t5 = Pow10(t4) *ssa.Call @ /usr/local/go/src/pkg/math/pow10.go:24:19
this.SubFn4();
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ /usr/local/go/src/pkg/math/pow10.go:24:3

case 6: // if.done
this.setLatest(2617,6);
this.SubFn5();

case 7: // if.then
this.setLatest(2617,7);
this.SubFn6();
this.setPH(2620);
_res= _t9;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t9 *ssa.Return @ /usr/local/go/src/pkg/math/pow10.go:27:3

case 8: // if.done
this.setLatest(2620,8);
this.SubFn7();
this.setPH(2623);
_SF3=Go_math_Pow10.call(this._goroutine,[],_t10);
_Next = -3;
return this;
case -3:
this.setLatest(2623,-3);
_t11=_SF3.res();
 // _t11 = Pow10(t10) *ssa.Call @ /usr/local/go/src/pkg/math/pow10.go:30:14
this.SubFn8();
_SF4=Go_math_Pow10.call(this._goroutine,[],_t12);
_Next = -4;
return this;
case -4:
this.setLatest(2623,-4);
_t13=_SF4.res();
 // _t13 = Pow10(t12) *ssa.Call @ /usr/local/go/src/pkg/math/pow10.go:30:25
this.SubFn9();
_res= _t14;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t14 *ssa.Return @ /usr/local/go/src/pkg/math/pow10.go:30:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Bool;
this.setPH(2610);
_t0=(p_e<=(-325)); // _t0 = e <= -325:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:17:7
_Next=_t0 ? 1 : 2; // if t0 goto 1.if.then else 2.if.else *ssa.If near /usr/local/go/src/pkg/math/pow10.go:17:7
}// end SubFn0
private inline  function SubFn1():Void {
var _t1:Bool;
this.setPH(2612);
_t1=(p_e>309); // _t1 = e > 309:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:19:14
_Next=_t1 ? 3 : 4; // if t1 goto 3.if.then else 4.if.done *ssa.If near /usr/local/go/src/pkg/math/pow10.go:19:14
}// end SubFn1
private inline  function SubFn2():Void {
var _t3:Bool;
this.setPH(2616);
_t3=(p_e<0); // _t3 = e < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:23:7
_Next=_t3 ? 5 : 6; // if t3 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/pow10.go:23:7
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(2617);
_t4=(-p_e); // _t4 = -e *ssa.UnOp @ /usr/local/go/src/pkg/math/pow10.go:24:20
}// end SubFn3
private inline  function SubFn4():Void {
_t6=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t5)); // _t6 = 1:float64 / t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:24:12
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(2619);
_t7=(p_e<70); // _t7 = e < 70:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:26:7
_Next=_t7 ? 7 : 8; // if t7 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/pow10.go:26:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t8:Array<Float>;
_t8=Go.math_pow10tab.load(); // _t8 = *pow10tab *ssa.UnOp near /usr/local/go/src/pkg/math/pow10.go:26:7
this.setPH(2620);
if((p_e<0)||(p_e>=70)) Scheduler.ioor();
_t9=_t8[p_e]; // _t9 = t8[e] *ssa.Index @ /usr/local/go/src/pkg/math/pow10.go:27:18
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(2622);
_t10=Force.intDiv(p_e,2,0); // _t10 = e / 2:int *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:29:9
}// end SubFn7
private inline  function SubFn8():Void {
this.setPH(2623);
_t12=(p_e-_t10); // _t12 = e - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:30:27
}// end SubFn8
private inline  function SubFn9():Void {
_t14=(Force.toFloat(_t11)*Force.toFloat(_t13)); // _t14 = t11 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/pow10.go:30:18
}// end SubFn9
}
#if (!php) private #end class Go_math_min extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/dim.go:55:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,1697,"Go_math_min");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Float=0.0;
var _SF4:StackFrame;
var _t3:Bool=false;
var _SF5:StackFrame;
var _t4:Bool=false;
var _t5:Bool=false;
var _SF6:StackFrame;
var _t6:Bool=false;
var _t7:Bool=false;
var _SF7:StackFrame;
var _t8:Bool=false;
var _t9:Bool=false;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Bool=false;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_min(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_min(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_min
{return new Go_math_min(gr,_bds, p_x, p_y);
}
public function run():Go_math_min {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1697,0);
this.setPH(1700);
_SF1=Go_math_IsInf.call(this._goroutine,[],p_x,(-1));
_Next = -1;
return this;
case -1:
this.setLatest(1700,-1);
_t0=_SF1.res();
 // _t0 = IsInf(x, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:58:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1700,1);
this.setPH(1701);
_t1=((-1)>=0?Math.POSITIVE_INFINITY:Math.NEGATIVE_INFINITY); // _t1 = Inf(-1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:59:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:59:3

case 2: // switch.body
this.setLatest(1701,2);
this.setPH(1703);
_t2=Math.NaN; // _t2 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:61:13
_res= _t2;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t2 *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:61:3

case 3: // switch.next
this.setLatest(1703,3);
this.setPH(1702);
_SF4=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -4;
return this;
case -4:
this.setLatest(1702,-4);
_t3=_SF4.res();
 // _t3 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:60:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(1702,4);
this.setPH(1700);
_SF5=Go_math_IsInf.call(this._goroutine,[],p_y,(-1));
_Next = -5;
return this;
case -5:
this.setLatest(1700,-5);
_t4=_SF5.res();
 // _t4 = IsInf(y, -1:int) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:58:28
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(1700,5);
_t5=((_Phi==0)?true:(_Phi==4)?_t4:false); // _t5 = phi [0.entry: true:bool, 4.binop.rhs: t4] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:58:20
this.SubFn3();
_Phi=5;
case 6: // switch.body
this.setLatest(1700,6);
this.setPH(1705);
_SF6=Go_math_Signbit.call(this._goroutine,[],p_x);
_Next = -6;
return this;
case -6:
this.setLatest(1705,-6);
_t6=_SF6.res();
 // _t6 = Signbit(x) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:63:13
this.SubFn4();
_Phi=6;
case 7: // switch.next
this.setLatest(1705,7);
this.SubFn5();
_Phi=7;
case 8: // binop.rhs
this.setLatest(1705,8);
this.setPH(1702);
_SF7=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -7;
return this;
case -7:
this.setLatest(1702,-7);
_t8=_SF7.res();
 // _t8 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/dim.go:60:24
this.SubFn6();
_Phi=8;
case 9: // binop.done
this.setLatest(1702,9);
_t9=((_Phi==3)?true:(_Phi==8)?_t8:false); // _t9 = phi [3.switch.next: true:bool, 8.binop.rhs: t8] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:60:16
this.SubFn7();
_Phi=9;
case 10: // switch.next
this.setLatest(1702,10);
this.SubFn8();
_Phi=10;
case 11: // binop.rhs
this.setLatest(1702,11);
this.SubFn9();
_Phi=11;
case 12: // binop.done
this.setLatest(1702,12);
this.setPH(1704);
_t12=((_Phi==7)?false:(_Phi==11)?_t11:false); // _t12 = phi [7.switch.next: false:bool, 11.binop.rhs: t11] #&& *ssa.Phi @ /usr/local/go/src/pkg/math/dim.go:62:14
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(1704,13);
this.setPH(1706);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:64:4

case 14: // if.done
this.setLatest(1706,14);
this.setPH(1708);
_res= p_y;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return y *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:66:3

case 15: // if.then
this.setLatest(1708,15);
this.setPH(1711);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:69:3

case 16: // if.done
this.setLatest(1711,16);
this.setPH(1713);
_res= p_y;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return y *ssa.Return @ /usr/local/go/src/pkg/math/dim.go:71:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 4; // if t0 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/dim.go:71:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t3 ? 9 : 8; // if t3 goto 9.binop.done else 8.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/dim.go:71:2
}// end SubFn1
private inline  function SubFn2():Void {
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:71:2
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t5 ? 1 : 3; // if t5 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:71:2
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t6 ? 13 : 14; // if t6 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:71:2
}// end SubFn4
private inline  function SubFn5():Void {
var _t7:Bool;
this.setPH(1704);
_t7=(Force.toFloat(p_x)==Force.toFloat(0)); // _t7 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:62:9
_Next=_t7 ? 11 : 12; // if t7 goto 11.binop.rhs else 12.binop.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:62:9
}// end SubFn5
private inline  function SubFn6():Void {
_Next=9; // jump 9.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:62:9
}// end SubFn6
private inline  function SubFn7():Void {
_Next=_t9 ? 2 : 7; // if t9 goto 2.switch.body else 7.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:62:9
}// end SubFn7
private inline  function SubFn8():Void {
var _t10:Bool;
this.setPH(1710);
_t10=(Force.toFloat(p_x)<Force.toFloat(p_y)); // _t10 = x < y *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:68:7
_Next=_t10 ? 15 : 16; // if t10 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/dim.go:68:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(1704);
_t11=(Force.toFloat(p_x)==Force.toFloat(p_y)); // _t11 = x == y *ssa.BinOp @ /usr/local/go/src/pkg/math/dim.go:62:19
_Next=12; // jump 12.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/dim.go:62:19
}// end SubFn9
private inline  function SubFn10():Void {
_Next=_t12 ? 6 : 10; // if t12 goto 6.switch.body else 10.switch.next *ssa.If near /usr/local/go/src/pkg/math/dim.go:62:19
}// end SubFn10
}
#if js @:expose("Go_utf8_RuneStart") #end class Go_utf8_RuneStart extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:392:6
var p_b:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_b : Int) {
super(gr,5636,"Go_utf8_RuneStart");
this._bds=_bds;
this.p_b=p_b;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_b : Int) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_RuneStart(0,[], p_b).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_b : Int) : Bool {
var _sf=new Go_utf8_RuneStart(_gr,[], p_b).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_b : Int) : Go_utf8_RuneStart
{return new Go_utf8_RuneStart(gr,_bds, p_b);
}
public function run():Go_utf8_RuneStart {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5636,0);
this.SubFn0();
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:392:31

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Int;
_t0=Force.toUint8((p_b&192)); // _t0 = b & 192:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:392:39
_t1=(Force.uintCompare(_t0,128)!=0); // _t1 = t0 != 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:392:45
}// end SubFn0
}
#if (!php) private #end class Go_main_dot_square_perim extends StackFrameBasis implements StackFrame {  // interfaces.go:31:17
var p_s:Array<Dynamic>;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Array<Dynamic>) {
super(gr,31,"Go_main_dot_square_perim");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Array<Dynamic>=null;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Array<Dynamic>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Array<Dynamic>) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_dot_square_perim(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Array<Dynamic>) : Float {
var _sf=new Go_main_dot_square_perim(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Array<Dynamic>) : Go_main_dot_square_perim
{return new Go_main_dot_square_perim(gr,_bds, p_s);
}
public function run():Go_main_dot_square_perim {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(31,0);
this.SubFn0();
this.setPH(32);
_res= _t7;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t7 *ssa.Return @ interfaces.go:32:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Array<Dynamic>;
var _t2:Float;
var _t3:Float;
var _t4:Array<Dynamic>;
var _t5:Float;
var _t6:Float;
this.setPH(31);
_t0=new Pointer({var _v=new Array<Dynamic>();_v=[0.0,0.0]; _v;}); // _t0 = local square (s) *ssa.Alloc @ interfaces.go:31:7
_t0.store(p_s); // *t0 = s *ssa.Store near interfaces.go:31:7
_t1=_t0.load(); // _t1 = *t0 *ssa.UnOp near interfaces.go:31:7
this.setPH(32);
_t2=_t1[0]; // _t2 = t1.width [#0] *ssa.Field @ interfaces.go:32:13
_t3=(Force.toFloat(2)*Force.toFloat(_t2)); // _t3 = 2:float64 * t2 *ssa.BinOp @ interfaces.go:32:10
_t4=_t0.load(); // _t4 = *t0 *ssa.UnOp near interfaces.go:32:10
_t5=_t4[1]; // _t5 = t4.height [#1] *ssa.Field @ interfaces.go:32:25
_t6=(Force.toFloat(2)*Force.toFloat(_t5)); // _t6 = 2:float64 * t5 *ssa.BinOp @ interfaces.go:32:22
_t7=(Force.toFloat(_t3)+Force.toFloat(_t6)); // _t7 = t3 + t6 *ssa.BinOp @ interfaces.go:32:19
}// end SubFn0
}
#if (!php) private #end class Go_math_expmulti extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/exp.go:176:6
var p_hi:Float;
var p_lo:Float;
var p_k:Int;
public function new(gr:Int,_bds:Array<Dynamic>, p_hi : Float, p_lo : Float, p_k : Int) {
super(gr,1155,"Go_math_expmulti");
this._bds=_bds;
this.p_hi=p_hi;
this.p_lo=p_lo;
this.p_k=p_k;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Float=0.0;
var _t1:Float=0.0;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Float=0.0;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Float=0.0;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Float=0.0;
var _t16:Float=0.0;
var _t17:Float=0.0;
var _SF1:StackFrame;
var _t18:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_hi : Float, p_lo : Float, p_k : Int) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_expmulti(0,[], p_hi, p_lo, p_k).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_hi : Float, p_lo : Float, p_k : Int) : Float {
var _sf=new Go_math_expmulti(_gr,[], p_hi, p_lo, p_k).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_hi : Float, p_lo : Float, p_k : Int) : Go_math_expmulti
{return new Go_math_expmulti(gr,_bds, p_hi, p_lo, p_k);
}
public function run():Go_math_expmulti {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1155,0);
this.SubFn0();
this.setPH(1169);
_SF1=Go_math_ldexp.call(this._goroutine,[],_t17,p_k);
_Next = -1;
return this;
case -1:
this.setLatest(1169,-1);
_t18=_SF1.res();
 // _t18 = Ldexp(t17, k) *ssa.Call @ /usr/local/go/src/pkg/math/exp.go:190:14
_res= _t18;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18 *ssa.Return @ /usr/local/go/src/pkg/math/exp.go:190:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t2:Float;
var _t3:Float;
var _t4:Float;
var _t5:Float;
var _t6:Float;
var _t7:Float;
var _t8:Float;
var _t9:Float;
var _t10:Float;
var _t12:Float;
var _t13:Float;
var _t14:Float;
var _t15:Float;
var _t16:Float;
this.setPH(1164);
_t0=(Force.toFloat(p_hi)-Force.toFloat(p_lo)); // _t0 = hi - lo *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:185:10
this.setPH(1165);
_t1=(Force.toFloat(_t0)*Force.toFloat(_t0)); // _t1 = t0 * t0 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:186:9
this.setPH(1166);
_t2=(Force.toFloat(_t1)*Force.toFloat(4.1381367970572385e-08)); // _t2 = t1 * 413813679705723846039/10000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:36
_t3=(Force.toFloat((-1.6533902205465252e-06))+Force.toFloat(_t2)); // _t3 = -16533902205465251539/10000000000000000000000000:float64 + t2 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:34
_t4=(Force.toFloat(_t1)*Force.toFloat(_t3)); // _t4 = t1 * t3 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:30
_t5=(Force.toFloat(6.613756321437934e-05)+Force.toFloat(_t4)); // _t5 = 661375632143793436117/10000000000000000000000000:float64 + t4 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:28
_t6=(Force.toFloat(_t1)*Force.toFloat(_t5)); // _t6 = t1 * t5 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:24
_t7=(Force.toFloat((-0.0027777777777015593))+Force.toFloat(_t6)); // _t7 = -138888888885077966921/50000000000000000000000:float64 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:22
_t8=(Force.toFloat(_t1)*Force.toFloat(_t7)); // _t8 = t1 * t7 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:18
_t9=(Force.toFloat(0.16666666666666602)+Force.toFloat(_t8)); // _t9 = 166666666666666019037/1000000000000000000000:float64 + t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:16
_t10=(Force.toFloat(_t1)*Force.toFloat(_t9)); // _t10 = t1 * t9 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:12
_t11=(Force.toFloat(_t0)-Force.toFloat(_t10)); // _t11 = t0 - t10 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:9
this.setPH(1167);
_t12=(Force.toFloat(_t0)*Force.toFloat(_t11)); // _t12 = t0 * t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:20
_t13=(Force.toFloat(2)-Force.toFloat(_t11)); // _t13 = 2:float64 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:26
_t14=Force.floatDiv(Force.toFloat(_t12),Force.toFloat(_t13)); // _t14 = t12 / t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:23
_t15=(Force.toFloat(p_lo)-Force.toFloat(_t14)); // _t15 = lo - t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:16
_t16=(Force.toFloat(_t15)-Force.toFloat(p_hi)); // _t16 = t15 - hi *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:31
_t17=(Force.toFloat(1)-Force.toFloat(_t16)); // _t17 = 1:float64 - t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:188:9
}// end SubFn0
}
#if js @:expose("Go_math_Jn") #end class Go_math_Jn extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/jn.go:53:6
var p_n:Int;
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_n : Int, p_x : Float) {
super(gr,1767,"Go_math_Jn");
this._bds=_bds;
this.p_n=p_n;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _t2:Bool=false;
var _SF3:StackFrame;
var _t3:Float=0.0;
var _t4:Bool=false;
var _t5:Bool=false;
var _t6:Int=0;
var _t7:Float=0.0;
var _t8:Int=0;
var _t9:Float=0.0;
var _t10:Bool=false;
var _SF4:StackFrame;
var _t11:Float=0.0;
var _t12:Bool=false;
var _t13:Float=0.0;
var _t14:Int=0;
var _t15:Bool=false;
var _t16:Float=0.0;
var _t17:Bool=false;
var _t18:Float=0.0;
var _t19:Bool=false;
var _t20:Bool=false;
var _t21:Float=0.0;
var _t22:Bool=false;
var _t23:Int=0;
var _t24:Bool=false;
var _SF5:StackFrame;
var _t25:Float=0.0;
var _SF6:StackFrame;
var _t26:Float=0.0;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _SF7:StackFrame;
var _t29:Float=0.0;
var _t30:Float=0.0;
var _SF8:StackFrame;
var _t31:Float=0.0;
var _SF9:StackFrame;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _SF10:StackFrame;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _SF11:StackFrame;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Bool=false;
var _SF12:StackFrame;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _SF13:StackFrame;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Bool=false;
var _SF14:StackFrame;
var _t44:Float=0.0;
var _SF15:StackFrame;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Bool=false;
var _t48:Int=0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Int=0;
var _t54:Float=0.0;
var _t55:Int=0;
var _t56:Float=0.0;
var _t57:Bool=false;
var _t58:Bool=false;
var _t59:Int=0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _t63:Float=0.0;
var _t64:Float=0.0;
var _t65:Float=0.0;
var _t66:Float=0.0;
var _t67:Float=0.0;
var _t68:Float=0.0;
var _t69:Float=0.0;
var _t70:Int=0;
var _t71:Float=0.0;
var _t72:Float=0.0;
var _t73:Float=0.0;
var _t74:Int=0;
var _t75:Bool=false;
var _t76:Int=0;
var _t77:Float=0.0;
var _t78:Float=0.0;
var _t79:Float=0.0;
var _t80:Int=0;
var _t81:Int=0;
var _t82:Int=0;
var _t83:Float=0.0;
var _t84:Float=0.0;
var _t85:Float=0.0;
var _t86:Int=0;
var _t87:Bool=false;
var _t88:Float=0.0;
var _t89:Float=0.0;
var _t90:Float=0.0;
var _t91:Float=0.0;
var _t92:Int=0;
var _t93:Float=0.0;
var _t94:Float=0.0;
var _t95:Float=0.0;
var _SF16:StackFrame;
var _t96:Float=0.0;
var _SF17:StackFrame;
var _t97:Float=0.0;
var _t98:Float=0.0;
var _t99:Bool=false;
var _t100:Float=0.0;
var _t101:Int=0;
var _t102:Bool=false;
var _t103:Int=0;
var _t104:Float=0.0;
var _t105:Float=0.0;
var _t106:Float=0.0;
var _t107:Int=0;
var _t108:Int=0;
var _t109:Float=0.0;
var _t110:Float=0.0;
var _SF18:StackFrame;
var _t111:Float=0.0;
var _t112:Float=0.0;
var _t113:Float=0.0;
var _t114:Int=0;
var _t115:Int=0;
var _t116:Float=0.0;
var _t117:Float=0.0;
var _t118:Float=0.0;
var _t119:Float=0.0;
var _t120:Float=0.0;
var _t121:Int=0;
var _t122:Float=0.0;
var _t123:Float=0.0;
var _t124:Int=0;
var _t125:Float=0.0;
var _t126:Bool=false;
var _t127:Int=0;
var _t128:Float=0.0;
var _t129:Float=0.0;
var _t130:Float=0.0;
var _t131:Float=0.0;
var _t132:Float=0.0;
var _t133:Bool=false;
var _t134:Float=0.0;
var _t135:Float=0.0;
var _t136:Float=0.0;
var _t137:Int=0;
var _t138:Float=0.0;
var _t139:Bool=false;
var _t140:Float=0.0;
var _t141:Float=0.0;
var _t142:Float=0.0;
var _t143:Float=0.0;
var _t144:Float=0.0;
var _t145:Int=0;
var _t146:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_n : Int, p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_Jn(0,[], p_n, p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_n : Int, p_x : Float) : Float {
var _sf=new Go_math_Jn(_gr,[], p_n, p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_n : Int, p_x : Float) : Go_math_Jn
{return new Go_math_Jn(gr,_bds, p_n, p_x);
}
public function run():Go_math_Jn {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(1767,0);
this.setPH(1774);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(1774,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:60:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(1774,1);
this.setPH(1775);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:61:3

case 2: // switch.body
this.setLatest(1775,2);
this.setPH(1777);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:63:3

case 3: // switch.next
this.setLatest(1777,3);
this.setPH(1776);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(1776,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:62:12
this.SubFn1();
_Phi=3;
case 4: // switch.next
this.setLatest(1776,4);
this.SubFn2();
_Phi=4;
case 5: // if.then
this.setLatest(1776,5);
this.setPH(1783);
_SF3=Go_math_J0.call(this._goroutine,[],p_x);
_Next = -3;
return this;
case -3:
this.setLatest(1783,-3);
_t3=_SF3.res();
 // _t3 = J0(x) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:69:12
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:69:3

case 6: // if.done
this.setLatest(1783,6);
this.SubFn3();
_Phi=6;
case 7: // if.then
this.setLatest(1783,7);
this.setPH(1786);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:72:3

case 8: // if.done
this.setLatest(1786,8);
this.SubFn4();
_Phi=8;
case 9: // if.then
this.setLatest(1786,9);
this.SubFn5();
_Phi=9;
case 10: // if.done
this.setLatest(1786,10);
this.setPH(1767);
_t8=((_Phi==8)?p_n:(_Phi==9)?_t6:0); // _t8 = phi [8.if.done: n, 9.if.then: t6] #n *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:53:9
_t9=((_Phi==8)?p_x:(_Phi==9)?_t7:0.0); // _t9 = phi [8.if.done: x, 9.if.then: t7] #x *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:53:16
this.SubFn6();
_Phi=10;
case 11: // if.then
this.setLatest(1767,11);
this.setPH(1792);
_SF4=Go_math_J1.call(this._goroutine,[],_t9);
_Next = -4;
return this;
case -4:
this.setLatest(1792,-4);
_t11=_SF4.res();
 // _t11 = J1(t9) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:78:12
_res= _t11;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t11 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:78:3

case 12: // if.done
this.setLatest(1792,12);
this.SubFn7();
_Phi=12;
case 13: // if.then
this.setLatest(1792,13);
this.SubFn8();
_Phi=13;
case 14: // if.done
this.setLatest(1792,14);
this.setPH(1767);
_t16=((_Phi==12)?_t9:(_Phi==13)?_t13:(_Phi==15)?_t13:0.0); // _t16 = phi [12.if.done: t9, 13.if.then: t13, 15.if.then: t13] #x *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:53:16
this.setPH(1794);
_t17=((_Phi==12)?false:(_Phi==13)?false:(_Phi==15)?true:false); // _t17 = phi [12.if.done: false:bool, 13.if.then: false:bool, 15.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:80:2
this.SubFn9();
_Phi=14;
case 15: // if.then
this.setLatest(1794,15);
this.SubFn10();
_Phi=15;
case 16: // if.then
this.setLatest(1794,16);
this.SubFn11();
_Phi=16;
case 17: // if.done
this.setLatest(1794,17);
this.setPH(1801);
_t21=((_Phi==21)?_t30:(_Phi==33)?0:(_Phi==30)?_t54:(_Phi==45)?_t113:(_Phi==36)?_t71:0.0); // _t21 = phi [21.switch.done: t30, 33.if.then: 0:float64, 30.for.loop: t54, 45.if.done: t113, 36.for.done: t71] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.SubFn12();
_Phi=17;
case 18: // if.else
this.setLatest(1801,18);
this.SubFn13();
_Phi=18;
case 19: // if.then
this.setLatest(1801,19);
this.SubFn14();
_Phi=19;
case 20: // if.else
this.setLatest(1801,20);
this.setPH(1832);
_SF5=Go_math_J1.call(this._goroutine,[],_t16);
_Next = -5;
return this;
case -5:
this.setLatest(1832,-5);
_t25=_SF5.res();
 // _t25 = J1(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:118:10
this.setPH(1833);
_SF6=Go_math_J0.call(this._goroutine,[],_t16);
_Next = -6;
return this;
case -6:
this.setLatest(1833,-6);
_t26=_SF6.res();
 // _t26 = J0(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:119:21
this.SubFn15();
_Phi=20;
case 21: // switch.done
this.setLatest(1833,21);
this.setPH(1819);
_t27=((_Phi==22)?_t33:(_Phi==23)?_t37:(_Phi==25)?_t42:(_Phi==27)?_t46:(_Phi==28)?0:0.0); // _t27 = phi [22.switch.body: t33, 23.switch.body: t37, 25.switch.body: t42, 27.switch.body: t46, 28.switch.next: 0:float64] #temp *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:105:8
this.SubFn16();
this.setPH(1830);
_t29=Math.sqrt(_t16); // _t29 = Sqrt(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:116:34
this.SubFn17();
_Phi=21;
case 22: // switch.body
this.setLatest(1830,22);
this.setPH(1822);
_t31=Math.cos(_t16); // _t31 = Cos(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:108:15
_t32=Math.sin(_t16); // _t32 = Sin(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:108:24
this.SubFn18();
_Phi=22;
case 23: // switch.body
this.setLatest(1822,23);
this.setPH(1824);
_t34=Math.cos(_t16); // _t34 = Cos(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:110:16
this.SubFn19();
_t36=Math.sin(_t16); // _t36 = Sin(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:110:25
this.SubFn20();
_Phi=23;
case 24: // switch.next
this.setLatest(1824,24);
this.SubFn21();
_Phi=24;
case 25: // switch.body
this.setLatest(1824,25);
this.setPH(1826);
_t39=Math.cos(_t16); // _t39 = Cos(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:112:16
this.SubFn22();
_t41=Math.sin(_t16); // _t41 = Sin(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:112:25
this.SubFn23();
_Phi=25;
case 26: // switch.next
this.setLatest(1826,26);
this.SubFn24();
_Phi=26;
case 27: // switch.body
this.setLatest(1826,27);
this.setPH(1828);
_t44=Math.cos(_t16); // _t44 = Cos(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:114:15
_t45=Math.sin(_t16); // _t45 = Sin(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:114:24
this.SubFn25();
_Phi=27;
case 28: // switch.next
this.setLatest(1828,28);
this.SubFn26();
_Phi=28;
case 29: // for.body
this.setLatest(1828,29);
this.SubFn27();
_Phi=29;
case 30: // for.loop
this.setLatest(1828,30);
this.setPH(1801);
_t54=((_Phi==20)?_t25:(_Phi==29)?_t52:0.0); // _t54 = phi [20.if.else: t25, 29.for.body: t52] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1833);
_t55=((_Phi==20)?1:(_Phi==29)?_t53:0); // _t55 = phi [20.if.else: 1:int, 29.for.body: t53] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:119:8
_t56=((_Phi==20)?_t26:(_Phi==29)?_t54:0.0); // _t56 = phi [20.if.else: t26, 29.for.body: t54] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:119:11
this.SubFn28();
_Phi=30;
case 31: // if.then
this.setLatest(1833,31);
this.SubFn29();
_Phi=31;
case 32: // if.else
this.setLatest(1833,32);
this.SubFn30();
_Phi=32;
case 33: // if.then
this.setLatest(1833,33);
this.SubFn31();
_Phi=33;
case 34: // if.else
this.setLatest(1833,34);
this.SubFn32();
_Phi=34;
case 35: // for.body
this.setLatest(1833,35);
this.SubFn33();
_Phi=35;
case 36: // for.done
this.setLatest(1833,36);
this.SubFn34();
_Phi=36;
case 37: // for.loop
this.setLatest(1833,37);
this.setPH(1801);
_t72=((_Phi==34)?_t66:(_Phi==35)?_t69:0.0); // _t72 = phi [34.if.else: t66, 35.for.body: t69] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1847);
_t73=((_Phi==34)?1:(_Phi==35)?_t68:0.0); // _t73 = phi [34.if.else: 1:float64, 35.for.body: t68] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:133:5
this.setPH(1848);
_t74=((_Phi==34)?2:(_Phi==35)?_t70:0); // _t74 = phi [34.if.else: 2:int, 35.for.body: t70] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:134:9
this.SubFn35();
_Phi=37;
case 38: // for.body
this.setLatest(1848,38);
this.SubFn36();
_Phi=38;
case 39: // for.done
this.setLatest(1848,39);
this.SubFn37();
_Phi=39;
case 40: // for.loop
this.setLatest(1848,40);
this.setPH(1886);
_t83=((_Phi==32)?_t61:(_Phi==38)?_t85:0.0); // _t83 = phi [32.if.else: t61, 38.for.body: t85] #q0 *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:172:4
this.setPH(1887);
_t84=((_Phi==32)?_t63:(_Phi==38)?_t77:0.0); // _t84 = phi [32.if.else: t63, 38.for.body: t77] #z *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:173:4
this.setPH(1888);
_t85=((_Phi==32)?_t65:(_Phi==38)?_t79:0.0); // _t85 = phi [32.if.else: t65, 38.for.body: t79] #q1 *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:174:4
this.setPH(1889);
_t86=((_Phi==32)?1:(_Phi==38)?_t76:0); // _t86 = phi [32.if.else: 1:int, 38.for.body: t76] #k *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:175:4
this.SubFn38();
_Phi=40;
case 41: // for.body
this.setLatest(1889,41);
this.SubFn39();
_Phi=41;
case 42: // for.done
this.setLatest(1889,42);
this.SubFn40();
this.setPH(1912);
_t96=Math.abs(_t95); // _t96 = Abs(t95) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:198:23
_t97=Math.log(_t96); // _t97 = Log(t96) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:198:19
this.SubFn41();
_Phi=42;
case 43: // for.loop
this.setLatest(1912,43);
this.setPH(1896);
_t100=((_Phi==39)?0:(_Phi==41)?_t91:0.0); // _t100 = phi [39.for.done: 0:float64, 41.for.body: t91] #t *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:182:4
this.setPH(1897);
_t101=((_Phi==39)?_t82:(_Phi==41)?_t92:0); // _t101 = phi [39.for.done: t82, 41.for.body: t92] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:183:8
this.SubFn42();
_Phi=43;
case 44: // if.then
this.setLatest(1897,44);
this.SubFn43();
_Phi=44;
case 45: // if.done
this.setLatest(1897,45);
this.setPH(1801);
_t104=((_Phi==48)?_t122:(_Phi==50)?_t134:0.0); // _t104 = phi [48.for.loop: t122, 50.for.loop: t134] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1896);
_t105=((_Phi==48)?_t100:(_Phi==50)?_t135:0.0); // _t105 = phi [48.for.loop: t100, 50.for.loop: t135] #t *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:182:4
this.setPH(1900);
_t106=((_Phi==48)?_t123:(_Phi==50)?_t136:0.0); // _t106 = phi [48.for.loop: t123, 50.for.loop: t136] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:186:4
this.setPH(1914);
_t107=((_Phi==48)?_t124:(_Phi==50)?0:0); // _t107 = phi [48.for.loop: t124, 50.for.loop: 0:int] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:200:9
this.setPH(1920);
_t108=((_Phi==48)?0:(_Phi==50)?_t137:0); // _t108 = phi [48.for.loop: 0:int, 50.for.loop: t137] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:206:9
this.setPH(1915);
_t109=((_Phi==48)?_t125:(_Phi==50)?0:0.0); // _t109 = phi [48.for.loop: t125, 50.for.loop: 0:float64] #di *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:201:6
this.setPH(1921);
_t110=((_Phi==48)?0:(_Phi==50)?_t138:0.0); // _t110 = phi [48.for.loop: 0:float64, 50.for.loop: t138] #di *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:207:6
this.setPH(1932);
_SF18=Go_math_J0.call(this._goroutine,[],_t16);
_Next = -18;
return this;
case -18:
this.setLatest(1932,-18);
_t111=_SF18.res();
 // _t111 = J0(t16) *ssa.Call @ /usr/local/go/src/pkg/math/jn.go:218:14
this.SubFn44();
_Phi=45;
case 46: // if.else
this.setLatest(1932,46);
this.SubFn45();
_Phi=46;
case 47: // for.body
this.setLatest(1932,47);
this.SubFn46();
_Phi=47;
case 48: // for.loop
this.setLatest(1932,48);
this.setPH(1801);
_t122=((_Phi==44)?1:(_Phi==47)?_t119:0.0); // _t122 = phi [44.if.then: 1:float64, 47.for.body: t119] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1900);
_t123=((_Phi==44)?_t100:(_Phi==47)?_t122:0.0); // _t123 = phi [44.if.then: t100, 47.for.body: t122] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:186:4
this.setPH(1914);
_t124=((_Phi==44)?_t103:(_Phi==47)?_t121:0); // _t124 = phi [44.if.then: t103, 47.for.body: t121] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:200:9
this.setPH(1915);
_t125=((_Phi==44)?0:(_Phi==47)?_t120:0.0); // _t125 = phi [44.if.then: 0:float64, 47.for.body: t120] #di *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:201:6
this.SubFn47();
_Phi=48;
case 49: // for.body
this.setLatest(1915,49);
this.SubFn48();
_Phi=49;
case 50: // for.loop
this.setLatest(1915,50);
this.setPH(1801);
_t134=((_Phi==46)?1:(_Phi==52)?_t142:0.0); // _t134 = phi [46.if.else: 1:float64, 52.if.done: t142] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1896);
_t135=((_Phi==46)?_t100:(_Phi==52)?_t143:0.0); // _t135 = phi [46.if.else: t100, 52.if.done: t143] #t *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:182:4
this.setPH(1900);
_t136=((_Phi==46)?_t100:(_Phi==52)?_t144:0.0); // _t136 = phi [46.if.else: t100, 52.if.done: t144] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:186:4
this.setPH(1920);
_t137=((_Phi==46)?_t114:(_Phi==52)?_t145:0); // _t137 = phi [46.if.else: t114, 52.if.done: t145] #i *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:206:9
this.setPH(1921);
_t138=((_Phi==46)?0:(_Phi==52)?_t132:0.0); // _t138 = phi [46.if.else: 0:float64, 52.if.done: t132] #di *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:207:6
this.SubFn49();
_Phi=50;
case 51: // if.then
this.setLatest(1921,51);
this.SubFn50();
_Phi=51;
case 52: // if.done
this.setLatest(1921,52);
this.setPH(1801);
_t142=((_Phi==49)?_t131:(_Phi==51)?1:0.0); // _t142 = phi [49.for.body: t131, 51.if.then: 1:float64] #b *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:87:6
this.setPH(1896);
_t143=((_Phi==49)?_t135:(_Phi==51)?_t141:0.0); // _t143 = phi [49.for.body: t135, 51.if.then: t141] #t *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:182:4
this.setPH(1900);
_t144=((_Phi==49)?_t134:(_Phi==51)?_t140:0.0); // _t144 = phi [49.for.body: t134, 51.if.then: t140] #a *ssa.Phi @ /usr/local/go/src/pkg/math/jn.go:186:4
this.SubFn51();
_Phi=52;
case 53: // if.then
this.setLatest(1900,53);
this.SubFn52();
this.setPH(1936);
_res= _t146;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t146 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:222:3

case 54: // if.done
this.setLatest(1936,54);
this.setPH(1938);
_res= _t21;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t21 *ssa.Return @ /usr/local/go/src/pkg/math/jn.go:224:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:224:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 2 : 4; // if t1 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:224:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(1782);
_t2=(p_n==0); // _t2 = n == 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:68:7
_Next=_t2 ? 5 : 6; // if t2 goto 5.if.then else 6.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:68:7
}// end SubFn2
private inline  function SubFn3():Void {
var _t4:Bool;
this.setPH(1785);
_t4=(Force.toFloat(p_x)==Force.toFloat(0)); // _t4 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:71:7
_Next=_t4 ? 7 : 8; // if t4 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:71:7
}// end SubFn3
private inline  function SubFn4():Void {
var _t5:Bool;
this.setPH(1788);
_t5=(p_n<0); // _t5 = n < 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:74:7
_Next=_t5 ? 9 : 10; // if t5 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:74:7
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(1789);
_t6=(-p_n); // _t6 = -n *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:75:10
_t7=(-Force.toFloat(p_x)); // _t7 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:75:14
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:75:14
}// end SubFn5
private inline  function SubFn6():Void {
var _t10:Bool;
this.setPH(1791);
_t10=(_t8==1); // _t10 = t8 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:77:7
_Next=_t10 ? 11 : 12; // if t10 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:77:7
}// end SubFn6
private inline  function SubFn7():Void {
var _t12:Bool;
this.setPH(1795);
_t12=(Force.toFloat(_t9)<Force.toFloat(0)); // _t12 = t9 < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:81:7
_Next=_t12 ? 13 : 14; // if t12 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:81:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t14:Int;
var _t15:Bool;
this.setPH(1796);
_t13=(-Force.toFloat(_t9)); // _t13 = -t9 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:82:7
this.setPH(1797);
_t14=(_t8&1); // _t14 = t8 & 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:83:7
_t15=(_t14==1); // _t15 = t14 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:83:10
_Next=_t15 ? 15 : 14; // if t15 goto 15.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:83:10
}// end SubFn8
private inline  function SubFn9():Void {
var _t18:Float;
var _t19:Bool;
this.setPH(1802);
_t18=_t8; // _t18 = convert float64 <- int (t8) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:88:12
_t19=(Force.toFloat(_t18)<=Force.toFloat(_t16)); // _t19 = t18 <= t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:88:16
_Next=_t19 ? 16 : 18; // if t19 goto 16.if.then else 18.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:88:16
}// end SubFn9
private inline  function SubFn10():Void {
_Next=14; // jump 14.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:88:16
}// end SubFn10
private inline  function SubFn11():Void {
var _t20:Bool;
this.setPH(1804);
_t20=(Force.toFloat(_t16)>=Force.toFloat(8.148143905337944e+90)); // _t20 = t16 >= 8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:90:8
_Next=_t20 ? 19 : 20; // if t20 goto 19.if.then else 20.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:90:8
}// end SubFn11
private inline  function SubFn12():Void {
_Next=_t17 ? 53 : 54; // if t17 goto 53.if.then else 54.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:90:8
}// end SubFn12
private inline  function SubFn13():Void {
var _t22:Bool;
this.setPH(1838);
_t22=(Force.toFloat(_t16)<Force.toFloat(1.862645149230957e-09)); // _t22 = t16 < 1/536870912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:124:8
_Next=_t22 ? 31 : 32; // if t22 goto 31.if.then else 32.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:124:8
}// end SubFn13
private inline  function SubFn14():Void {
var _t24:Bool;
this.setPH(1820);
_t23=(_t8&3); // _t23 = t8 & 3:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:106:13
_t24=(_t23==0); // _t24 = t23 == 0:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:106:13
_Next=_t24 ? 22 : 24; // if t24 goto 22.switch.body else 24.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:106:13
}// end SubFn14
private inline  function SubFn15():Void {
_Next=30; // jump 30.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:106:13
}// end SubFn15
private inline  function SubFn16():Void {
this.setPH(1830);
_t28=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t27)); // _t28 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:116:21
}// end SubFn16
private inline  function SubFn17():Void {
_t30=Force.floatDiv(Force.toFloat(_t28),Force.toFloat(_t29)); // _t30 = t28 / t29 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:116:28
_Next=17; // jump 17.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:116:28
}// end SubFn17
private inline  function SubFn18():Void {
this.setPH(1822);
_t33=(Force.toFloat(_t31)+Force.toFloat(_t32)); // _t33 = t31 + t32 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:108:19
_Next=21; // jump 21.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:108:19
}// end SubFn18
private inline  function SubFn19():Void {
this.setPH(1824);
_t35=(-Force.toFloat(_t34)); // _t35 = -t34 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:110:12
}// end SubFn19
private inline  function SubFn20():Void {
_t37=(Force.toFloat(_t35)+Force.toFloat(_t36)); // _t37 = t35 + t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:110:20
_Next=21; // jump 21.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:110:20
}// end SubFn20
private inline  function SubFn21():Void {
var _t38:Bool;
_t38=(_t23==1); // _t38 = t23 == 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:110:20
_Next=_t38 ? 23 : 26; // if t38 goto 23.switch.body else 26.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:110:20
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(1826);
_t40=(-Force.toFloat(_t39)); // _t40 = -t39 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:112:12
}// end SubFn22
private inline  function SubFn23():Void {
_t42=(Force.toFloat(_t40)-Force.toFloat(_t41)); // _t42 = t40 - t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:112:20
_Next=21; // jump 21.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:112:20
}// end SubFn23
private inline  function SubFn24():Void {
var _t43:Bool;
_t43=(_t23==2); // _t43 = t23 == 2:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:112:20
_Next=_t43 ? 25 : 28; // if t43 goto 25.switch.body else 28.switch.next *ssa.If near /usr/local/go/src/pkg/math/jn.go:112:20
}// end SubFn24
private inline  function SubFn25():Void {
this.setPH(1828);
_t46=(Force.toFloat(_t44)-Force.toFloat(_t45)); // _t46 = t44 - t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:114:19
_Next=21; // jump 21.switch.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:114:19
}// end SubFn25
private inline  function SubFn26():Void {
var _t47:Bool;
_t47=(_t23==3); // _t47 = t23 == 3:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:114:19
_Next=_t47 ? 27 : 21; // if t47 goto 27.switch.body else 21.switch.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:114:19
}// end SubFn26
private inline  function SubFn27():Void {
var _t48:Int;
var _t49:Float;
var _t50:Float;
var _t51:Float;
this.setPH(1834);
_t48=(_t55+_t55); // _t48 = t55 + t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:120:27
_t49=_t48; // _t49 = convert float64 <- int (t48) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:120:25
_t50=Force.floatDiv(Force.toFloat(_t49),Force.toFloat(_t16)); // _t50 = t49 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:120:30
_t51=(Force.toFloat(_t54)*Force.toFloat(_t50)); // _t51 = t54 * t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:120:16
_t52=(Force.toFloat(_t51)-Force.toFloat(_t56)); // _t52 = t51 - t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:120:33
_t53=(_t55+1); // _t53 = t55 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:120:33
_Next=30; // jump 30.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:120:33
}// end SubFn27
private inline  function SubFn28():Void {
var _t57:Bool;
this.setPH(1833);
_t57=(_t55<_t8); // _t57 = t55 < t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:119:28
_Next=_t57 ? 29 : 17; // if t57 goto 29.for.body else 17.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:119:28
}// end SubFn28
private inline  function SubFn29():Void {
var _t58:Bool;
this.setPH(1842);
_t58=(_t8>33); // _t58 = t8 > 33:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:128:9
_Next=_t58 ? 33 : 34; // if t58 goto 33.if.then else 34.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:128:9
}// end SubFn29
private inline  function SubFn30():Void {
var _t59:Int;
var _t60:Float;
var _t64:Float;
this.setPH(1884);
_t59=(_t8+_t8); // _t59 = t8 + t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:170:18
_t60=_t59; // _t60 = convert float64 <- int (t59) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:170:16
_t61=Force.floatDiv(Force.toFloat(_t60),Force.toFloat(_t16)); // _t61 = t60 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:170:22
this.setPH(1885);
_t62=Force.floatDiv(Force.toFloat(2),Force.toFloat(_t16)); // _t62 = 2:float64 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:171:11
this.setPH(1887);
_t63=(Force.toFloat(_t61)+Force.toFloat(_t62)); // _t63 = t61 + t62 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:173:11
this.setPH(1888);
_t64=(Force.toFloat(_t61)*Force.toFloat(_t63)); // _t64 = t61 * t63 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:174:11
_t65=(Force.toFloat(_t64)-Force.toFloat(1)); // _t65 = t64 - 1:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:174:14
_Next=40; // jump 40.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:174:14
}// end SubFn30
private inline  function SubFn31():Void {
_Next=17; // jump 17.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:174:14
}// end SubFn31
private inline  function SubFn32():Void {
this.setPH(1845);
_t66=(Force.toFloat(_t16)*Force.toFloat(0.5)); // _t66 = t16 * 1/2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:131:15
_Next=37; // jump 37.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:131:15
}// end SubFn32
private inline  function SubFn33():Void {
var _t67:Float;
this.setPH(1849);
_t67=_t74; // _t67 = convert float64 <- int (t74) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:135:18
_t68=(Force.toFloat(_t73)*Force.toFloat(_t67)); // _t68 = t73 * t67 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:135:18
_t69=(Force.toFloat(_t72)*Force.toFloat(_t66)); // _t69 = t72 * t66 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:135:18
_t70=(_t74+1); // _t70 = t74 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:135:18
_Next=37; // jump 37.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:135:18
}// end SubFn33
private inline  function SubFn34():Void {
_t71=Force.floatDiv(Force.toFloat(_t72),Force.toFloat(_t73)); // _t71 = t72 / t73 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:135:18
_Next=17; // jump 17.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:135:18
}// end SubFn34
private inline  function SubFn35():Void {
var _t75:Bool;
this.setPH(1848);
_t75=(_t74<=_t8); // _t75 = t74 <= t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:134:19
_Next=_t75 ? 35 : 36; // if t75 goto 35.for.body else 36.for.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:134:19
}// end SubFn35
private inline  function SubFn36():Void {
var _t78:Float;
_t76=(_t86+1); // _t76 = t86 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:134:19
_t77=(Force.toFloat(_t84)+Force.toFloat(_t62)); // _t77 = t84 + t62 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:134:19
this.setPH(1893);
_t78=(Force.toFloat(_t77)*Force.toFloat(_t85)); // _t78 = t77 * t85 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:179:19
_t79=(Force.toFloat(_t78)-Force.toFloat(_t83)); // _t79 = t78 - t83 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:179:22
_Next=40; // jump 40.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:179:22
}// end SubFn36
private inline  function SubFn37():Void {
var _t81:Int;
this.setPH(1895);
_t80=(_t8+_t8); // _t80 = t8 + t8 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:181:11
this.setPH(1897);
_t81=(_t8+_t86); // _t81 = t8 + t86 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:183:20
_t82=(2*_t81); // _t82 = 2:int * t81 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:183:15
_Next=43; // jump 43.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:183:15
}// end SubFn37
private inline  function SubFn38():Void {
var _t87:Bool;
this.setPH(1890);
_t87=(Force.toFloat(_t85)<Force.toFloat(1e+09)); // _t87 = t85 < 1000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:176:11
_Next=_t87 ? 38 : 39; // if t87 goto 38.for.body else 39.for.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:176:11
}// end SubFn38
private inline  function SubFn39():Void {
var _t88:Float;
var _t89:Float;
var _t90:Float;
this.setPH(1898);
_t88=_t101; // _t88 = convert float64 <- int (t101) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:184:21
_t89=Force.floatDiv(Force.toFloat(_t88),Force.toFloat(_t16)); // _t89 = t88 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:184:24
_t90=(Force.toFloat(_t89)-Force.toFloat(_t100)); // _t90 = t89 - t100 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:184:27
_t91=Force.floatDiv(Force.toFloat(1),Force.toFloat(_t90)); // _t91 = 1:float64 / t90 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:184:11
_t92=(_t101-2); // _t92 = t101 - 2:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:184:11
_Next=43; // jump 43.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:184:11
}// end SubFn39
private inline  function SubFn40():Void {
this.setPH(1910);
_t93=_t8; // _t93 = convert float64 <- int (t8) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:196:18
this.setPH(1911);
_t94=Force.floatDiv(Force.toFloat(2),Force.toFloat(_t16)); // _t94 = 2:float64 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:197:11
this.setPH(1912);
_t95=(Force.toFloat(_t94)*Force.toFloat(_t93)); // _t95 = t94 * t93 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:198:25
}// end SubFn40
private inline  function SubFn41():Void {
var _t99:Bool;
_t98=(Force.toFloat(_t93)*Force.toFloat(_t97)); // _t98 = t93 * t97 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:198:14
this.setPH(1913);
_t99=(Force.toFloat(_t98)<Force.toFloat(709.782712893384)); // _t99 = t98 < 88722839111672996637/125000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:199:11
_Next=_t99 ? 44 : 46; // if t99 goto 44.if.then else 46.if.else *ssa.If near /usr/local/go/src/pkg/math/jn.go:199:11
}// end SubFn41
private inline  function SubFn42():Void {
var _t102:Bool;
this.setPH(1897);
_t102=(_t101>=_t80); // _t102 = t101 >= t80 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:183:28
_Next=_t102 ? 41 : 42; // if t102 goto 41.for.body else 42.for.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:183:28
}// end SubFn42
private inline  function SubFn43():Void {
this.setPH(1914);
_t103=(_t8-1); // _t103 = t8 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:200:16
_Next=48; // jump 48.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:200:16
}// end SubFn43
private inline  function SubFn44():Void {
var _t112:Float;
this.setPH(1932);
_t112=(Force.toFloat(_t105)*Force.toFloat(_t111)); // _t112 = t105 * t111 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:218:10
_t113=Force.floatDiv(Force.toFloat(_t112),Force.toFloat(_t104)); // _t113 = t112 / t104 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:218:18
_Next=17; // jump 17.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:218:18
}// end SubFn44
private inline  function SubFn45():Void {
this.setPH(1920);
_t114=(_t8-1); // _t114 = t8 - 1:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:206:16
_Next=50; // jump 50.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:206:16
}// end SubFn45
private inline  function SubFn46():Void {
var _t115:Int;
var _t117:Float;
var _t118:Float;
this.setPH(1915);
_t115=(_t124+_t124); // _t115 = t124 + t124 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:201:22
_t116=_t115; // _t116 = convert float64 <- int (t115) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:201:19
this.setPH(1916);
_t117=(Force.toFloat(_t122)*Force.toFloat(_t116)); // _t117 = t122 * t116 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:202:17
_t118=Force.floatDiv(Force.toFloat(_t117),Force.toFloat(_t16)); // _t118 = t117 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:202:20
_t119=(Force.toFloat(_t118)-Force.toFloat(_t123)); // _t119 = t118 - t123 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:202:22
_t120=(Force.toFloat(_t116)-Force.toFloat(2)); // _t120 = t116 - 2:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:202:22
_t121=(_t124-1); // _t121 = t124 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:202:22
_Next=48; // jump 48.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:202:22
}// end SubFn46
private inline  function SubFn47():Void {
var _t126:Bool;
this.setPH(1914);
_t126=(_t124>0); // _t126 = t124 > 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:200:23
_Next=_t126 ? 47 : 45; // if t126 goto 47.for.body else 45.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:200:23
}// end SubFn47
private inline  function SubFn48():Void {
var _t127:Int;
var _t129:Float;
var _t130:Float;
var _t133:Bool;
this.setPH(1921);
_t127=(_t137+_t137); // _t127 = t137 + t137 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:207:22
_t128=_t127; // _t128 = convert float64 <- int (t127) *ssa.Convert @ /usr/local/go/src/pkg/math/jn.go:207:19
this.setPH(1922);
_t129=(Force.toFloat(_t134)*Force.toFloat(_t128)); // _t129 = t134 * t128 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:208:17
_t130=Force.floatDiv(Force.toFloat(_t129),Force.toFloat(_t16)); // _t130 = t129 / t16 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:208:20
_t131=(Force.toFloat(_t130)-Force.toFloat(_t136)); // _t131 = t130 - t136 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:208:22
_t132=(Force.toFloat(_t128)-Force.toFloat(2)); // _t132 = t128 - 2:float64 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:208:22
this.setPH(1925);
_t133=(Force.toFloat(_t131)>Force.toFloat(1e+100)); // _t133 = t131 > 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:211:11
_Next=_t133 ? 51 : 52; // if t133 goto 51.if.then else 52.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:211:11
}// end SubFn48
private inline  function SubFn49():Void {
var _t139:Bool;
this.setPH(1920);
_t139=(_t137>0); // _t139 = t137 > 0:int *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:206:23
_Next=_t139 ? 49 : 45; // if t139 goto 49.for.body else 45.if.done *ssa.If near /usr/local/go/src/pkg/math/jn.go:206:23
}// end SubFn49
private inline  function SubFn50():Void {
_t140=Force.floatDiv(Force.toFloat(_t134),Force.toFloat(_t131)); // _t140 = t134 / t131 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:206:23
_t141=Force.floatDiv(Force.toFloat(_t135),Force.toFloat(_t131)); // _t141 = t135 / t131 *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:206:23
_Next=52; // jump 52.if.done *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:206:23
}// end SubFn50
private inline  function SubFn51():Void {
_t145=(_t137-1); // _t145 = t137 - 1:int *ssa.BinOp near /usr/local/go/src/pkg/math/jn.go:206:23
_Next=50; // jump 50.for.loop *ssa.Jump near /usr/local/go/src/pkg/math/jn.go:206:23
}// end SubFn51
private inline  function SubFn52():Void {
this.setPH(1936);
_t146=(-Force.toFloat(_t21)); // _t146 = -t21 *ssa.UnOp @ /usr/local/go/src/pkg/math/jn.go:222:10
}// end SubFn52
}
#if js @:expose("Go_utf8_Valid") #end class Go_utf8_Valid extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:395:6
var p_p:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_p : Slice) {
super(gr,5639,"Go_utf8_Valid");
this._bds=_bds;
this.p_p=p_p;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Int=0;
var _t2:Bool=false;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:Int=0;
var _t7:Slice=null;
var _SF1:StackFrame;
var _t8:{r0:Int,r1:Int}=null;
var _t10:Int=0;
var _t11:Bool=false;
var _t12:Int=0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_p : Slice) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_Valid(0,[], p_p).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_p : Slice) : Bool {
var _sf=new Go_utf8_Valid(_gr,[], p_p).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_p : Slice) : Go_utf8_Valid
{return new Go_utf8_Valid(gr,_bds, p_p);
}
public function run():Go_utf8_Valid {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5639,0);
this.SubFn0();
_Phi=0;
case 1: // for.body
this.setLatest(5639,1);
this.SubFn1();
_Phi=1;
case 2: // for.done
this.setLatest(5639,2);
this.setPH(5655);
_res= true;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:411:2

case 3: // for.loop
this.setLatest(5655,3);
this.setPH(5640);
_t3=((_Phi==0)?0:(_Phi==4)?_t6:(_Phi==7)?_t12:0); // _t3 = phi [0.entry: 0:int, 4.if.then: t6, 7.if.done: t12] #i *ssa.Phi @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:396:2
this.SubFn2();
_Phi=3;
case 4: // if.then
this.setLatest(5640,4);
this.SubFn3();
_Phi=4;
case 5: // if.else
this.setLatest(5640,5);
this.SubFn4();
this.setPH(5645);
_SF1=Go_utf8_DecodeRune.call(this._goroutine,[],_t7);
_Next = -1;
return this;
case -1:
this.setLatest(5645,-1);
_t8=_SF1.res();
 // _t8 = DecodeRune(t7) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:401:25
this.SubFn5();
_Phi=5;
case 6: // if.then
this.setLatest(5645,6);
this.setPH(5650);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:406:5

case 7: // if.done
this.setLatest(5650,7);
this.SubFn6();
_Phi=7;
default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:406:5
}// end SubFn0
private inline  function SubFn1():Void {
var _t0:Pointer;
var _t1:Int;
var _t2:Bool;
this.setPH(5642);
if((_t3<0)||(_t3>=p_p.len())) Scheduler.ioor(); // _t0 = &p[t3] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:398:7 [POINTER]
_t0=p_p.addr(_t3);  // _t0 = &p[t3] *ssa.IndexAddr @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:398:7 [POINTER]
_t1=(_t0.load()|0); // _t1 = *t0 *ssa.UnOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:398:7
_t2=(Force.uintCompare(_t1,128)<0); // _t2 = t1 < 128:byte *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:398:11
_Next=_t2 ? 4 : 5; // if t2 goto 4.if.then else 5.if.else *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:398:11
}// end SubFn1
private inline  function SubFn2():Void {
var _t4:Int;
var _t5:Bool;
this.setPH(5641);
_t4=({var _v=p_p;_v==null?0:_v.len();}); // _t4 = len(p) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:397:13
_t5=(_t3<_t4); // _t5 = t3 < t4 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:397:8
_Next=_t5 ? 1 : 2; // if t5 goto 1.for.body else 2.for.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:397:8
}// end SubFn2
private inline  function SubFn3():Void {
_t6=(_t3+1); // _t6 = t3 + 1:int *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:397:8
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:397:8
}// end SubFn3
private inline  function SubFn4():Void {
this.setPH(5645);
_t7=p_p.subSlice(_t3,-1); // _t7 = slice p[t3:] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:401:27
}// end SubFn4
private inline  function SubFn5():Void {
var _t11:Bool;
 // _t9 = extract t8 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:401:27 [REGISTER VALUE UN-USED]
_t10=_t8.r1; // _t10 = extract t8 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:401:27
this.setPH(5646);
_t11=(_t10==1); // _t11 = t10 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:402:12
_Next=_t11 ? 6 : 7; // if t11 goto 6.if.then else 7.if.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:402:12
}// end SubFn5
private inline  function SubFn6():Void {
_t12=(_t3+_t10); // _t12 = t3 + t10 *ssa.BinOp near /usr/local/go/src/pkg/unicode/utf8/utf8.go:402:12
_Next=3; // jump 3.for.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:402:12
}// end SubFn6
}
#if (!php) private #end class Go_main_dot_circle_area extends StackFrameBasis implements StackFrame {  // interfaces.go:36:17
var p_c:Array<Dynamic>;
public function new(gr:Int,_bds:Array<Dynamic>, p_c : Array<Dynamic>) {
super(gr,36,"Go_main_dot_circle_area");
this._bds=_bds;
this.p_c=p_c;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Array<Dynamic>=null;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _t4:Array<Dynamic>=null;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_c : Array<Dynamic>) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_dot_circle_area(0,[], p_c).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_c : Array<Dynamic>) : Float {
var _sf=new Go_main_dot_circle_area(_gr,[], p_c).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_c : Array<Dynamic>) : Go_main_dot_circle_area
{return new Go_main_dot_circle_area(gr,_bds, p_c);
}
public function run():Go_main_dot_circle_area {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(36,0);
this.SubFn0();
this.setPH(37);
_res= _t6;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t6 *ssa.Return @ interfaces.go:37:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Array<Dynamic>;
var _t2:Float;
var _t3:Float;
var _t4:Array<Dynamic>;
var _t5:Float;
this.setPH(36);
_t0=new Pointer({var _v=new Array<Dynamic>();_v=[0.0]; _v;}); // _t0 = local circle (c) *ssa.Alloc @ interfaces.go:36:7
_t0.store(p_c); // *t0 = c *ssa.Store near interfaces.go:36:7
_t1=_t0.load(); // _t1 = *t0 *ssa.UnOp near interfaces.go:36:7
this.setPH(37);
_t2=_t1[0]; // _t2 = t1.radius [#0] *ssa.Field @ interfaces.go:37:21
_t3=(Force.toFloat(3.141592653589793)*Force.toFloat(_t2)); // _t3 = 314159265358979323846264338327950288419716939937510582097494459/100000000000000000000000000000000000000000000000000000000000000:float64 * t2 *ssa.BinOp @ interfaces.go:37:17
_t4=_t0.load(); // _t4 = *t0 *ssa.UnOp near interfaces.go:37:17
_t5=_t4[0]; // _t5 = t4.radius [#0] *ssa.Field @ interfaces.go:37:32
_t6=(Force.toFloat(_t3)*Force.toFloat(_t5)); // _t6 = t3 * t5 *ssa.BinOp @ interfaces.go:37:28
}// end SubFn0
}
#if js @:expose("Go_haxegoruntime_Raw2Runes") #end class Go_haxegoruntime_Raw2Runes extends StackFrameBasis implements StackFrame {  // langgoruntime.go:55:6
var p_s:Slice;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : Slice) {
super(gr,5050,"Go_haxegoruntime_Raw2Runes");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Slice;
public inline function res():Dynamic {return _res;}
var _t0:Int=0;
var _t1:Bool=false;
var _t2:Int=0;
var _t3:Slice=null;
var _t4:Int=0;
var _t5:Int=0;
var _t6:Slice=null;
var _t7:Int=0;
var _t8:Bool=false;
var _t9:Int=0;
var _t10:Int=0;
var _t11:Bool=false;
var _t12:Pointer=null;
var _t13:Pointer=null;
var _t14:Int=0;
var _t15:Int=0;
var _SF1:StackFrame;
var _t16:Slice=null;
var _t17:Pointer=null;
var _t18:Slice=null;
var _t19:Int=0;
var _t20:Int=0;
var _t21:Bool=false;
var _t22:Pointer=null;
var _t23:Pointer=null;
var _t24:Int=0;
var _t25:Int=0;
var _SF2:StackFrame;
var _t26:Slice=null;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : Slice) : Slice {
if(!Go.doneInit) Go.init();
var _sf=new Go_haxegoruntime_Raw2Runes(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : Slice) : Slice {
var _sf=new Go_haxegoruntime_Raw2Runes(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : Slice) : Go_haxegoruntime_Raw2Runes
{return new Go_haxegoruntime_Raw2Runes(gr,_bds, p_s);
}
public function run():Go_haxegoruntime_Raw2Runes {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5050,0);
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(5050,1);
this.SubFn1();
_Phi=1;
case 2: // switch.body
this.setLatest(5050,2);
this.SubFn2();
_Phi=2;
case 3: // switch.next
this.setLatest(5050,3);
this.SubFn3();
_Phi=3;
case 4: // rangeindex.loop
this.setLatest(5050,4);
_t9=((_Phi==1)?(-1):(_Phi==5)?_t10:0); // _t9 = phi [1.switch.body: -1:int, 5.rangeindex.body: t10] *ssa.Phi near interfaces.go:37:28
this.SubFn4();
_Phi=4;
case 5: // rangeindex.body
this.setLatest(5050,5);
this.SubFn5();
_Phi=5;
case 6: // rangeindex.done
this.setLatest(5050,6);
this.setPH(5057);
_SF1=Go_haxegoruntime_UTF16toRunes.call(this._goroutine,[],_t3);
_Next = -1;
return this;
case -1:
this.setLatest(5057,-1);
_t16=_SF1.res();
 // _t16 = UTF16toRunes(t3) *ssa.Call @ langgoruntime.go:62:22
_res= _t16;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t16 *ssa.Return @ langgoruntime.go:62:3

case 7: // switch.next
this.setLatest(5057,7);
this.SubFn6();
this.setPH(5067);
_res= _t18;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t18 *ssa.Return @ langgoruntime.go:72:2

case 8: // rangeindex.loop
this.setLatest(5067,8);
_t19=((_Phi==2)?(-1):(_Phi==9)?_t20:0); // _t19 = phi [2.switch.body: -1:int, 9.rangeindex.body: t20] *ssa.Phi near langgoruntime.go:72:2
this.SubFn7();
_Phi=8;
case 9: // rangeindex.body
this.setLatest(5067,9);
this.SubFn8();
_Phi=9;
case 10: // rangeindex.done
this.setLatest(5067,10);
this.setPH(5063);
_SF2=Go_haxegoruntime_UTF8toRunes.call(this._goroutine,[],_t6);
_Next = -2;
return this;
case -2:
this.setLatest(5063,-2);
_t26=_SF2.res();
 // _t26 = UTF8toRunes(t6) *ssa.Call @ langgoruntime.go:68:21
_res= _t26;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t26 *ssa.Return @ langgoruntime.go:68:3

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t1:Bool;
_t0=(Go.haxegoruntime_ZiLen.load()|0); // _t0 = *ZiLen *ssa.UnOp near langgoruntime.go:68:3
_t1=(Force.uintCompare(_t0,1)==0); // _t1 = t0 == 1:uint *ssa.BinOp near langgoruntime.go:68:3
_Next=_t1 ? 1 : 3; // if t1 goto 1.switch.body else 3.switch.next *ssa.If near langgoruntime.go:68:3
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Int;
this.setPH(5053);
_t2=({var _v=p_s;_v==null?0:_v.len();}); // _t2 = len(s) *ssa.Call @ langgoruntime.go:58:40
_t3=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t2) _v[_i]=0; _v;}),0,_t2); // _t3 = make []uint16 t2 t2 *ssa.MakeSlice @ langgoruntime.go:58:26
_t4=({var _v=p_s;_v==null?0:_v.len();}); // _t4 = len(s) *ssa.Call near langgoruntime.go:58:26
_Next=4; // jump 4.rangeindex.loop *ssa.Jump near langgoruntime.go:58:26
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Int;
this.setPH(5059);
_t5=({var _v=p_s;_v==null?0:_v.len();}); // _t5 = len(s) *ssa.Call @ langgoruntime.go:64:36
_t6=new Slice(new Pointer({var _v:Array<Int>=new Array<Int>();for(_i in 0..._t5) _v[_i]=0; _v;}),0,_t5); // _t6 = make []byte t5 t5 *ssa.MakeSlice @ langgoruntime.go:64:24
_t7=({var _v=p_s;_v==null?0:_v.len();}); // _t7 = len(s) *ssa.Call near langgoruntime.go:64:24
_Next=8; // jump 8.rangeindex.loop *ssa.Jump near langgoruntime.go:64:24
}// end SubFn2
private inline  function SubFn3():Void {
var _t8:Bool;
_t8=(Force.uintCompare(_t0,3)==0); // _t8 = t0 == 3:uint *ssa.BinOp near langgoruntime.go:64:24
_Next=_t8 ? 2 : 7; // if t8 goto 2.switch.body else 7.switch.next *ssa.If near langgoruntime.go:64:24
}// end SubFn3
private inline  function SubFn4():Void {
var _t11:Bool;
_t10=(_t9+1); // _t10 = t9 + 1:int *ssa.BinOp near langgoruntime.go:64:24
_t11=(_t10<_t4); // _t11 = t10 < t4 *ssa.BinOp near langgoruntime.go:64:24
_Next=_t11 ? 5 : 6; // if t11 goto 5.rangeindex.body else 6.rangeindex.done *ssa.If near langgoruntime.go:64:24
}// end SubFn4
private inline  function SubFn5():Void {
var _t12:Pointer;
var _t13:Pointer;
var _t14:Int;
var _t15:Int;
this.setPH(5055);
if((_t10<0)||(_t10>=_t3.len())) Scheduler.ioor(); // _t12 = &t3[t10] *ssa.IndexAddr @ langgoruntime.go:60:7 [POINTER]
_t12=_t3.addr(_t10);  // _t12 = &t3[t10] *ssa.IndexAddr @ langgoruntime.go:60:7 [POINTER]
if((_t10<0)||(_t10>=p_s.len())) Scheduler.ioor(); // _t13 = &s[t10] *ssa.IndexAddr @ langgoruntime.go:60:21 [POINTER]
_t13=p_s.addr(_t10);  // _t13 = &s[t10] *ssa.IndexAddr @ langgoruntime.go:60:21 [POINTER]
_t14=(_t13.load()|0); // _t14 = *t13 *ssa.UnOp near langgoruntime.go:60:21
_t15=_t14; // _t15 = convert uint16 <- int (t14) *ssa.Convert @ langgoruntime.go:60:19
_t12.store(_t15); // *t12 = t15 *ssa.Store near langgoruntime.go:60:19
_Next=4; // jump 4.rangeindex.loop *ssa.Jump near langgoruntime.go:60:19
}// end SubFn5
private inline  function SubFn6():Void {
var _t17:Pointer;
this.setPH(5067);
_t17=new Pointer({var _v=new Array<Int>();for(_vi in 0...0){_v[_vi]=0;}; _v;}); // _t17 = new [0]rune (slicelit) *ssa.Alloc @ langgoruntime.go:72:15
_t18=new Slice(_t17,0,-1); // _t18 = slice t17[:] *ssa.Slice @ langgoruntime.go:72:15
}// end SubFn6
private inline  function SubFn7():Void {
var _t21:Bool;
_t20=(_t19+1); // _t20 = t19 + 1:int *ssa.BinOp near langgoruntime.go:72:15
_t21=(_t20<_t7); // _t21 = t20 < t7 *ssa.BinOp near langgoruntime.go:72:15
_Next=_t21 ? 9 : 10; // if t21 goto 9.rangeindex.body else 10.rangeindex.done *ssa.If near langgoruntime.go:72:15
}// end SubFn7
private inline  function SubFn8():Void {
var _t22:Pointer;
var _t23:Pointer;
var _t24:Int;
var _t25:Int;
this.setPH(5061);
if((_t20<0)||(_t20>=_t6.len())) Scheduler.ioor(); // _t22 = &t6[t20] *ssa.IndexAddr @ langgoruntime.go:66:7 [POINTER]
_t22=_t6.addr(_t20);  // _t22 = &t6[t20] *ssa.IndexAddr @ langgoruntime.go:66:7 [POINTER]
if((_t20<0)||(_t20>=p_s.len())) Scheduler.ioor(); // _t23 = &s[t20] *ssa.IndexAddr @ langgoruntime.go:66:19 [POINTER]
_t23=p_s.addr(_t20);  // _t23 = &s[t20] *ssa.IndexAddr @ langgoruntime.go:66:19 [POINTER]
_t24=(_t23.load()|0); // _t24 = *t23 *ssa.UnOp near langgoruntime.go:66:19
_t25=_t24; // _t25 = convert byte <- int (t24) *ssa.Convert @ langgoruntime.go:66:17
_t22.store(_t25); // *t22 = t25 *ssa.Store near langgoruntime.go:66:17
_Next=8; // jump 8.rangeindex.loop *ssa.Jump near langgoruntime.go:66:17
}// end SubFn8
}
#if js @:expose("Go_math_J1") #end class Go_math_J1 extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/j1.go:74:6
var p_x:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float) {
super(gr,4496,"Go_math_J1");
this._bds=_bds;
this.p_x=p_x;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Bool=false;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _t5:Float=0.0;
var _t6:Float=0.0;
var _t7:Bool=false;
var _t8:Bool=false;
var _SF3:StackFrame;
var _t9:{r0:Float,r1:Float}=null;
var _t10:Float=0.0;
var _t11:Float=0.0;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Float=0.0;
var _t15:Bool=false;
var _t16:Bool=false;
var _t17:Float=0.0;
var _SF4:StackFrame;
var _t18:Float=0.0;
var _t19:Float=0.0;
var _t20:Bool=false;
var _t21:Float=0.0;
var _t22:Float=0.0;
var _t23:Bool=false;
var _t24:Float=0.0;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _SF5:StackFrame;
var _t27:Float=0.0;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _SF6:StackFrame;
var _t30:Float=0.0;
var _SF7:StackFrame;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _t34:Float=0.0;
var _t35:Float=0.0;
var _SF8:StackFrame;
var _t36:Float=0.0;
var _t37:Float=0.0;
var _t38:Float=0.0;
var _t39:Float=0.0;
var _t40:Float=0.0;
var _t41:Float=0.0;
var _t42:Float=0.0;
var _t43:Float=0.0;
var _t44:Float=0.0;
var _t45:Float=0.0;
var _t46:Float=0.0;
var _t47:Float=0.0;
var _t48:Float=0.0;
var _t49:Float=0.0;
var _t50:Float=0.0;
var _t51:Float=0.0;
var _t52:Float=0.0;
var _t53:Float=0.0;
var _t54:Float=0.0;
var _t55:Float=0.0;
var _t56:Float=0.0;
var _t57:Float=0.0;
var _t58:Float=0.0;
var _t59:Float=0.0;
var _t60:Float=0.0;
var _t61:Float=0.0;
var _t62:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_J1(0,[], p_x).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float) : Float {
var _sf=new Go_math_J1(_gr,[], p_x).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float) : Go_math_J1
{return new Go_math_J1(gr,_bds, p_x);
}
public function run():Go_math_J1 {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(4496,0);
this.setPH(4513);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(4513,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:91:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(4513,1);
this.setPH(4514);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:92:3

case 2: // switch.body
this.setLatest(4514,2);
this.setPH(4516);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:94:3

case 3: // switch.next
this.setLatest(4516,3);
this.setPH(4515);
_SF2=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -2;
return this;
case -2:
this.setLatest(4515,-2);
_t1=_SF2.res();
 // _t1 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:93:12
this.SubFn1();
_Phi=3;
case 4: // switch.next
this.setLatest(4515,4);
this.SubFn2();
_Phi=4;
case 5: // binop.rhs
this.setLatest(4515,5);
this.SubFn3();
_Phi=5;
case 6: // binop.done
this.setLatest(4515,6);
_t4=((_Phi==3)?true:(_Phi==5)?_t3:false); // _t4 = phi [3.switch.next: true:bool, 5.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:93:19
this.SubFn4();
_Phi=6;
case 7: // if.then
this.setLatest(4515,7);
this.SubFn5();
_Phi=7;
case 8: // if.done
this.setLatest(4515,8);
this.setPH(4496);
_t6=((_Phi==4)?p_x:(_Phi==7)?_t5:0.0); // _t6 = phi [4.switch.next: x, 7.if.then: t5] #x *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:74:9
this.setPH(4519);
_t7=((_Phi==4)?false:(_Phi==7)?true:false); // _t7 = phi [4.switch.next: false:bool, 7.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:97:2
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(4519,9);
this.setPH(4525);
_SF3=Go_math_sincos.call(this._goroutine,[],_t6);
_Next = -3;
return this;
case -3:
this.setLatest(4525,-3);
_t9=_SF3.res();
 // _t9 = Sincos(t6) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:103:17
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(4525,10);
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(4525,11);
this.SubFn9();
this.setPH(4531);
_t18=Math.cos(_t17); // _t18 = Cos(t17) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:109:12
this.SubFn10();
_Phi=11;
case 12: // if.done
this.setLatest(4531,12);
this.setPH(4526);
_t21=((_Phi==9)?_t13:(_Phi==13)?_t13:(_Phi==14)?_t25:0.0); // _t21 = phi [9.if.then: t13, 13.if.then: t13, 14.if.else: t25] #ss *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:104:3
this.setPH(4527);
_t22=((_Phi==9)?_t14:(_Phi==13)?_t24:(_Phi==14)?_t14:0.0); // _t22 = phi [9.if.then: t14, 13.if.then: t24, 14.if.else: t14] #cc *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:105:3
this.SubFn11();
_Phi=12;
case 13: // if.then
this.setLatest(4527,13);
this.SubFn12();
_Phi=13;
case 14: // if.else
this.setLatest(4527,14);
this.SubFn13();
_Phi=14;
case 15: // if.then
this.setLatest(4527,15);
this.SubFn14();
this.setPH(4544);
_t27=Math.sqrt(_t6); // _t27 = Sqrt(t6) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:122:32
this.SubFn15();
_Phi=15;
case 16: // if.done
this.setLatest(4544,16);
this.setPH(4542);
_t29=((_Phi==15)?_t28:(_Phi==17)?_t37:0.0); // _t29 = phi [15.if.then: t28, 17.if.else: t37] #z *ssa.Phi @ /usr/local/go/src/pkg/math/j1.go:120:7
this.SubFn16();
_Phi=16;
case 17: // if.else
this.setLatest(4542,17);
this.setPH(4546);
_SF6=Go_math_pone.call(this._goroutine,[],_t6);
_Next = -6;
return this;
case -6:
this.setLatest(4546,-6);
_t30=_SF6.res();
 // _t30 = pone(t6) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:124:13
this.setPH(4547);
_SF7=Go_math_qone.call(this._goroutine,[],_t6);
_Next = -7;
return this;
case -7:
this.setLatest(4547,-7);
_t31=_SF7.res();
 // _t31 = qone(t6) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:125:13
this.SubFn17();
this.setPH(4548);
_t36=Math.sqrt(_t6); // _t36 = Sqrt(t6) *ssa.Call @ /usr/local/go/src/pkg/math/j1.go:126:43
this.SubFn18();
_Phi=17;
case 18: // if.then
this.setLatest(4548,18);
this.SubFn19();
this.setPH(4551);
_res= _t38;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t38 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:129:4

case 19: // if.done
this.setLatest(4551,19);
this.setPH(4553);
_res= _t29;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t29 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:131:3

case 20: // if.then
this.setLatest(4553,20);
this.SubFn20();
this.setPH(4556);
_res= _t39;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t39 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:134:3

case 21: // if.done
this.setLatest(4556,21);
this.SubFn21();
_Phi=21;
case 22: // if.then
this.setLatest(4556,22);
this.SubFn22();
this.setPH(4564);
_res= _t62;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t62 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:142:3

case 23: // if.done
this.setLatest(4564,23);
this.setPH(4566);
_res= _t61;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t61 *ssa.Return @ /usr/local/go/src/pkg/math/j1.go:144:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 1 : 3; // if t0 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/j1.go:144:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t1 ? 6 : 5; // if t1 goto 6.binop.done else 5.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/j1.go:144:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t2:Bool;
this.setPH(4520);
_t2=(Force.toFloat(p_x)<Force.toFloat(0)); // _t2 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:98:7
_Next=_t2 ? 7 : 8; // if t2 goto 7.if.then else 8.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:98:7
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(4515);
_t3=(Force.toFloat(p_x)==Force.toFloat(0)); // _t3 = x == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:93:24
_Next=6; // jump 6.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:93:24
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t4 ? 2 : 4; // if t4 goto 2.switch.body else 4.switch.next *ssa.If near /usr/local/go/src/pkg/math/j1.go:93:24
}// end SubFn4
private inline  function SubFn5():Void {
this.setPH(4521);
_t5=(-Force.toFloat(p_x)); // _t5 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/j1.go:99:7
_Next=8; // jump 8.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:99:7
}// end SubFn5
private inline  function SubFn6():Void {
var _t8:Bool;
this.setPH(4524);
_t8=(Force.toFloat(_t6)>=Force.toFloat(2)); // _t8 = t6 >= 2:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:102:7
_Next=_t8 ? 9 : 10; // if t8 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:102:7
}// end SubFn6
private inline  function SubFn7():Void {
var _t12:Float;
var _t15:Bool;
_t10=_t9.r0; // _t10 = extract t9 #0 *ssa.Extract near /usr/local/go/src/pkg/math/j1.go:102:7
_t11=_t9.r1; // _t11 = extract t9 #1 *ssa.Extract near /usr/local/go/src/pkg/math/j1.go:102:7
this.setPH(4526);
_t12=(-Force.toFloat(_t10)); // _t12 = -t10 *ssa.UnOp @ /usr/local/go/src/pkg/math/j1.go:104:9
_t13=(Force.toFloat(_t12)-Force.toFloat(_t11)); // _t13 = t12 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:104:12
this.setPH(4527);
_t14=(Force.toFloat(_t10)-Force.toFloat(_t11)); // _t14 = t10 - t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:105:11
this.setPH(4530);
_t15=(Force.toFloat(_t6)<Force.toFloat(8.988465674311579e+307)); // _t15 = t6 < 89884656743115785407263711865852178399050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:108:8
_Next=_t15 ? 11 : 12; // if t15 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:108:8
}// end SubFn7
private inline  function SubFn8():Void {
var _t16:Bool;
this.setPH(4555);
_t16=(Force.toFloat(_t6)<Force.toFloat(7.450580596923828e-09)); // _t16 = t6 < 1/134217728:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:133:7
_Next=_t16 ? 20 : 21; // if t16 goto 20.if.then else 21.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:133:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(4531);
_t17=(Force.toFloat(_t6)+Force.toFloat(_t6)); // _t17 = t6 + t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:109:15
}// end SubFn9
private inline  function SubFn10():Void {
var _t19:Float;
var _t20:Bool;
this.setPH(4532);
_t19=(Force.toFloat(_t10)*Force.toFloat(_t11)); // _t19 = t10 * t11 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:110:8
_t20=(Force.toFloat(_t19)>Force.toFloat(0)); // _t20 = t19 > 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:110:11
_Next=_t20 ? 13 : 14; // if t20 goto 13.if.then else 14.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:110:11
}// end SubFn10
private inline  function SubFn11():Void {
var _t23:Bool;
this.setPH(4543);
_t23=(Force.toFloat(_t6)>Force.toFloat(6.80564733841877e+38)); // _t23 = t6 > 680564733841876926926749214863536422912:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:121:8
_Next=_t23 ? 15 : 17; // if t23 goto 15.if.then else 17.if.else *ssa.If near /usr/local/go/src/pkg/math/j1.go:121:8
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(4533);
_t24=Force.floatDiv(Force.toFloat(_t18),Force.toFloat(_t13)); // _t24 = t18 / t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:111:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:111:12
}// end SubFn12
private inline  function SubFn13():Void {
this.setPH(4535);
_t25=Force.floatDiv(Force.toFloat(_t18),Force.toFloat(_t14)); // _t25 = t18 / t14 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:113:12
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:113:12
}// end SubFn13
private inline  function SubFn14():Void {
this.setPH(4544);
_t26=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t22)); // _t26 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:122:21
}// end SubFn14
private inline  function SubFn15():Void {
_t28=Force.floatDiv(Force.toFloat(_t26),Force.toFloat(_t27)); // _t28 = t26 / t27 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:122:26
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:122:26
}// end SubFn15
private inline  function SubFn16():Void {
_Next=_t7 ? 18 : 19; // if t7 goto 18.if.then else 19.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:122:26
}// end SubFn16
private inline  function SubFn17():Void {
var _t32:Float;
var _t33:Float;
var _t34:Float;
this.setPH(4548);
_t32=(Force.toFloat(_t30)*Force.toFloat(_t22)); // _t32 = t30 * t22 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:25
_t33=(Force.toFloat(_t31)*Force.toFloat(_t21)); // _t33 = t31 * t21 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:32
_t34=(Force.toFloat(_t32)-Force.toFloat(_t33)); // _t34 = t32 - t33 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:29
_t35=(Force.toFloat(0.5641895835477563)*Force.toFloat(_t34)); // _t35 = 100000000000000000000000000000000000000000000000000000000000000/177245385090551602729816748334114518279754945612238712821380779:float64 * t34 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:21
}// end SubFn17
private inline  function SubFn18():Void {
_t37=Force.floatDiv(Force.toFloat(_t35),Force.toFloat(_t36)); // _t37 = t35 / t36 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:37
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/j1.go:126:37
}// end SubFn18
private inline  function SubFn19():Void {
this.setPH(4551);
_t38=(-Force.toFloat(_t29)); // _t38 = -t29 *ssa.UnOp @ /usr/local/go/src/pkg/math/j1.go:129:11
}// end SubFn19
private inline  function SubFn20():Void {
this.setPH(4556);
_t39=(Force.toFloat(0.5)*Force.toFloat(_t6)); // _t39 = 1/2:float64 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:134:14
}// end SubFn20
private inline  function SubFn21():Void {
var _t41:Float;
var _t42:Float;
var _t43:Float;
var _t44:Float;
var _t45:Float;
var _t46:Float;
var _t48:Float;
var _t49:Float;
var _t50:Float;
var _t51:Float;
var _t52:Float;
var _t53:Float;
var _t54:Float;
var _t55:Float;
var _t56:Float;
var _t59:Float;
var _t60:Float;
this.setPH(4558);
_t40=(Force.toFloat(_t6)*Force.toFloat(_t6)); // _t40 = t6 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:136:9
this.setPH(4559);
_t41=(Force.toFloat(_t40)*Force.toFloat(4.9672799960958445e-08)); // _t41 = t40 * 124181999902396112103/2500000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:33
_t42=(Force.toFloat((-1.599556310840356e-05))+Force.toFloat(_t41)); // _t42 = -1999445388550444969/125000000000000000000000:float64 + t41 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:31
_t43=(Force.toFloat(_t40)*Force.toFloat(_t42)); // _t43 = t40 * t42 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:26
_t44=(Force.toFloat(0.001407056669551897)+Force.toFloat(_t43)); // _t44 = 2198526046174839157/1562500000000000000000:float64 + t43 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:24
_t45=(Force.toFloat(_t40)*Force.toFloat(_t44)); // _t45 = t40 * t44 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:19
_t46=(Force.toFloat((-0.0625))+Force.toFloat(_t45)); // _t46 = -1/16:float64 + t45 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:16
_t47=(Force.toFloat(_t40)*Force.toFloat(_t46)); // _t47 = t40 * t46 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:9
this.setPH(4560);
_t48=(Force.toFloat(_t40)*Force.toFloat(1.2354227442613791e-11)); // _t48 = t40 * 30885568606534478477/2500000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:42
_t49=(Force.toFloat(5.0463625707621704e-09)+Force.toFloat(_t48)); // _t49 = 100927251415243408543/20000000000000000000000000000:float64 + t48 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:40
_t50=(Force.toFloat(_t40)*Force.toFloat(_t49)); // _t50 = t40 * t49 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:35
_t51=(Force.toFloat(1.1771846404262368e-06)+Force.toFloat(_t50)); // _t51 = 117718464042623683263/100000000000000000000000000:float64 + t50 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:33
_t52=(Force.toFloat(_t40)*Force.toFloat(_t51)); // _t52 = t40 * t51 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:28
_t53=(Force.toFloat(0.00018594678558863092)+Force.toFloat(_t52)); // _t53 = 4648669639715772889/25000000000000000000000:float64 + t52 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:26
_t54=(Force.toFloat(_t40)*Force.toFloat(_t53)); // _t54 = t40 * t53 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:21
_t55=(Force.toFloat(0.019153759953836346)+Force.toFloat(_t54)); // _t55 = 38307519907672692161/2000000000000000000000:float64 + t54 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:19
_t56=(Force.toFloat(_t40)*Force.toFloat(_t55)); // _t56 = t40 * t55 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:14
_t57=(Force.toFloat(1)+Force.toFloat(_t56)); // _t57 = 1:float64 + t56 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:11
_t58=(Force.toFloat(_t47)*Force.toFloat(_t6)); // _t58 = t47 * t6 *ssa.BinOp near /usr/local/go/src/pkg/math/j1.go:138:11
this.setPH(4562);
_t59=(Force.toFloat(0.5)*Force.toFloat(_t6)); // _t59 = 1/2:float64 * t6 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:140:9
_t60=Force.floatDiv(Force.toFloat(_t58),Force.toFloat(_t57)); // _t60 = t58 / t57 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:140:15
_t61=(Force.toFloat(_t59)+Force.toFloat(_t60)); // _t61 = t59 + t60 *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:140:12
_Next=_t7 ? 22 : 23; // if t7 goto 22.if.then else 23.if.done *ssa.If near /usr/local/go/src/pkg/math/j1.go:140:12
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(4564);
_t62=(-Force.toFloat(_t61)); // _t62 = -t61 *ssa.UnOp @ /usr/local/go/src/pkg/math/j1.go:142:10
}// end SubFn22
}
#if (!php) private #end class Go_math_remainder extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/math/remainder.go:39:6
var p_x:Float;
var p_y:Float;
public function new(gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) {
super(gr,2699,"Go_math_remainder");
this._bds=_bds;
this.p_x=p_x;
this.p_y=p_y;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _SF1:StackFrame;
var _t0:Bool=false;
var _SF2:StackFrame;
var _t1:Float=0.0;
var _SF3:StackFrame;
var _t2:Bool=false;
var _t3:Bool=false;
var _t4:Bool=false;
var _SF4:StackFrame;
var _t5:Bool=false;
var _SF5:StackFrame;
var _t6:Bool=false;
var _t7:Bool=false;
var _t8:Float=0.0;
var _t9:Float=0.0;
var _t10:Bool=false;
var _t11:Bool=false;
var _t12:Float=0.0;
var _t13:Float=0.0;
var _t14:Bool=false;
var _t15:Bool=false;
var _t16:Float=0.0;
var _SF6:StackFrame;
var _t17:Float=0.0;
var _t18:Float=0.0;
var _t19:Bool=false;
var _t20:Float=0.0;
var _t21:Bool=false;
var _t22:Float=0.0;
var _t23:Float=0.0;
var _t24:Bool=false;
var _t25:Float=0.0;
var _t26:Float=0.0;
var _t27:Bool=false;
var _t28:Float=0.0;
var _t29:Float=0.0;
var _t30:Bool=false;
var _t31:Float=0.0;
var _t32:Float=0.0;
var _t33:Float=0.0;
var _Phi:Int=0;
var _Next:Int=0;
public static inline function callFromHaxe( p_x : Float, p_y : Float) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_math_remainder(0,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_x : Float, p_y : Float) : Float {
var _sf=new Go_math_remainder(_gr,[], p_x, p_y).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_x : Float, p_y : Float) : Go_math_remainder
{return new Go_math_remainder(gr,_bds, p_x, p_y);
}
public function run():Go_math_remainder {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(2699,0);
this.setPH(2706);
_SF1=Go_math_IsNaN.call(this._goroutine,[],p_x);
_Next = -1;
return this;
case -1:
this.setLatest(2706,-1);
_t0=_SF1.res();
 // _t0 = IsNaN(x) *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:46:12
this.SubFn0();
_Phi=0;
case 1: // switch.body
this.setLatest(2706,1);
this.setPH(2707);
_t1=Math.NaN; // _t1 = NaN() *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:47:13
_res= _t1;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t1 *ssa.Return @ /usr/local/go/src/pkg/math/remainder.go:47:3

case 2: // switch.body
this.setLatest(2707,2);
this.setPH(2709);
_res= p_x;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return x *ssa.Return @ /usr/local/go/src/pkg/math/remainder.go:49:3

case 3: // switch.next
this.setLatest(2709,3);
this.setPH(2708);
_SF3=Go_math_IsInf.call(this._goroutine,[],p_y,0);
_Next = -3;
return this;
case -3:
this.setLatest(2708,-3);
_t2=_SF3.res();
 // _t2 = IsInf(y, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:48:12
this.SubFn1();
_Phi=3;
case 4: // binop.rhs
this.setLatest(2708,4);
this.SubFn2();
_Phi=4;
case 5: // binop.done
this.setLatest(2708,5);
this.setPH(2706);
_t4=((_Phi==0)?true:(_Phi==7)?true:(_Phi==6)?true:(_Phi==4)?_t3:false); // _t4 = phi [0.entry: true:bool, 7.cond.false: true:bool, 6.cond.false: true:bool, 4.binop.rhs: t3] #|| *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:46:43
this.SubFn3();
_Phi=5;
case 6: // cond.false
this.setLatest(2706,6);
_SF4=Go_math_IsInf.call(this._goroutine,[],p_x,0);
_Next = -4;
return this;
case -4:
this.setLatest(2706,-4);
_t5=_SF4.res();
 // _t5 = IsInf(x, 0:int) *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:46:36
this.SubFn4();
_Phi=6;
case 7: // cond.false
this.setLatest(2706,7);
_SF5=Go_math_IsNaN.call(this._goroutine,[],p_y);
_Next = -5;
return this;
case -5:
this.setLatest(2706,-5);
_t6=_SF5.res();
 // _t6 = IsNaN(y) *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:46:24
this.SubFn5();
_Phi=7;
case 8: // switch.next
this.setLatest(2706,8);
this.SubFn6();
_Phi=8;
case 9: // if.then
this.setLatest(2706,9);
this.SubFn7();
_Phi=9;
case 10: // if.done
this.setLatest(2706,10);
this.setPH(2699);
_t9=((_Phi==8)?p_x:(_Phi==9)?_t8:0.0); // _t9 = phi [8.switch.next: x, 9.if.then: t8] #x *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:39:16
this.setPH(2711);
_t10=((_Phi==8)?false:(_Phi==9)?true:false); // _t10 = phi [8.switch.next: false:bool, 9.if.then: true:bool] #sign *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:51:2
this.SubFn8();
_Phi=10;
case 11: // if.then
this.setLatest(2711,11);
this.SubFn9();
_Phi=11;
case 12: // if.done
this.setLatest(2711,12);
this.setPH(2699);
_t13=((_Phi==10)?p_y:(_Phi==11)?_t12:0.0); // _t13 = phi [10.if.done: y, 11.if.then: t12] #y *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:39:19
this.SubFn10();
_Phi=12;
case 13: // if.then
this.setLatest(2699,13);
this.setPH(2720);
_res= 0;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return 0:float64 *ssa.Return @ /usr/local/go/src/pkg/math/remainder.go:60:3

case 14: // if.done
this.setLatest(2720,14);
this.SubFn11();
_Phi=14;
case 15: // if.then
this.setLatest(2720,15);
this.SubFn12();
this.setPH(2723);
_SF6=Go_math_mod.call(this._goroutine,[],_t9,_t16);
_Next = -6;
return this;
case -6:
this.setLatest(2723,-6);
_t17=_SF6.res();
 // _t17 = Mod(t9, t16) *ssa.Call @ /usr/local/go/src/pkg/math/remainder.go:63:10
this.SubFn13();
_Phi=15;
case 16: // if.done
this.setLatest(2723,16);
this.setPH(2699);
_t18=((_Phi==14)?_t9:(_Phi==15)?_t17:0.0); // _t18 = phi [14.if.done: t9, 15.if.then: t17] #x *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:39:16
this.SubFn14();
_Phi=16;
case 17: // if.then
this.setLatest(2699,17);
this.SubFn15();
_Phi=17;
case 18: // if.done
this.setLatest(2699,18);
_t22=((_Phi==17)?_t18:(_Phi==19)?_t18:(_Phi==20)?_t25:(_Phi==21)?_t28:(_Phi==22)?_t29:(_Phi==23)?_t31:0.0); // _t22 = phi [17.if.then: t18, 19.if.else: t18, 20.if.then: t25, 21.if.then: t28, 22.if.then: t29, 23.if.then: t31] #x *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:39:16
this.SubFn16();
_Phi=18;
case 19: // if.else
this.setLatest(2699,19);
this.SubFn17();
_Phi=19;
case 20: // if.then
this.setLatest(2699,20);
this.SubFn18();
_Phi=20;
case 21: // if.then
this.setLatest(2699,21);
this.SubFn19();
_Phi=21;
case 22: // if.then
this.setLatest(2699,22);
this.SubFn20();
_Phi=22;
case 23: // if.then
this.setLatest(2699,23);
this.SubFn21();
_Phi=23;
case 24: // if.then
this.setLatest(2699,24);
this.SubFn22();
_Phi=24;
case 25: // if.done
this.setLatest(2699,25);
_t33=((_Phi==18)?_t22:(_Phi==24)?_t32:0.0); // _t33 = phi [18.if.done: t22, 24.if.then: t32] #x *ssa.Phi @ /usr/local/go/src/pkg/math/remainder.go:39:16
this.setPH(2744);
_res= _t33;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t33 *ssa.Return @ /usr/local/go/src/pkg/math/remainder.go:84:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
_Next=_t0 ? 5 : 7; // if t0 goto 5.binop.done else 7.cond.false *ssa.If near /usr/local/go/src/pkg/math/remainder.go:84:2
}// end SubFn0
private inline  function SubFn1():Void {
_Next=_t2 ? 2 : 8; // if t2 goto 2.switch.body else 8.switch.next *ssa.If near /usr/local/go/src/pkg/math/remainder.go:84:2
}// end SubFn1
private inline  function SubFn2():Void {
this.setPH(2706);
_t3=(Force.toFloat(p_y)==Force.toFloat(0)); // _t3 = y == 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:46:48
_Next=5; // jump 5.binop.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:46:48
}// end SubFn2
private inline  function SubFn3():Void {
_Next=_t4 ? 1 : 3; // if t4 goto 1.switch.body else 3.switch.next *ssa.If near /usr/local/go/src/pkg/math/remainder.go:46:48
}// end SubFn3
private inline  function SubFn4():Void {
_Next=_t5 ? 5 : 4; // if t5 goto 5.binop.done else 4.binop.rhs *ssa.If near /usr/local/go/src/pkg/math/remainder.go:46:48
}// end SubFn4
private inline  function SubFn5():Void {
_Next=_t6 ? 5 : 6; // if t6 goto 5.binop.done else 6.cond.false *ssa.If near /usr/local/go/src/pkg/math/remainder.go:46:48
}// end SubFn5
private inline  function SubFn6():Void {
var _t7:Bool;
this.setPH(2712);
_t7=(Force.toFloat(p_x)<Force.toFloat(0)); // _t7 = x < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:52:7
_Next=_t7 ? 9 : 10; // if t7 goto 9.if.then else 10.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:52:7
}// end SubFn6
private inline  function SubFn7():Void {
this.setPH(2713);
_t8=(-Force.toFloat(p_x)); // _t8 = -x *ssa.UnOp @ /usr/local/go/src/pkg/math/remainder.go:53:7
_Next=10; // jump 10.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:53:7
}// end SubFn7
private inline  function SubFn8():Void {
var _t11:Bool;
this.setPH(2716);
_t11=(Force.toFloat(p_y)<Force.toFloat(0)); // _t11 = y < 0:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:56:7
_Next=_t11 ? 11 : 12; // if t11 goto 11.if.then else 12.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:56:7
}// end SubFn8
private inline  function SubFn9():Void {
this.setPH(2717);
_t12=(-Force.toFloat(p_y)); // _t12 = -y *ssa.UnOp @ /usr/local/go/src/pkg/math/remainder.go:57:7
_Next=12; // jump 12.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:57:7
}// end SubFn9
private inline  function SubFn10():Void {
var _t14:Bool;
this.setPH(2719);
_t14=(Force.toFloat(_t9)==Force.toFloat(_t13)); // _t14 = t9 == t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:59:7
_Next=_t14 ? 13 : 14; // if t14 goto 13.if.then else 14.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:59:7
}// end SubFn10
private inline  function SubFn11():Void {
var _t15:Bool;
this.setPH(2722);
_t15=(Force.toFloat(_t13)<=Force.toFloat(8.988465674311579e+307)); // _t15 = t13 <= 89884656743115785407263711865852178399050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:62:7
_Next=_t15 ? 15 : 16; // if t15 goto 15.if.then else 16.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:62:7
}// end SubFn11
private inline  function SubFn12():Void {
this.setPH(2723);
_t16=(Force.toFloat(_t13)+Force.toFloat(_t13)); // _t16 = t13 + t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:63:15
}// end SubFn12
private inline  function SubFn13():Void {
_Next=16; // jump 16.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:63:15
}// end SubFn13
private inline  function SubFn14():Void {
var _t19:Bool;
this.setPH(2725);
_t19=(Force.toFloat(_t13)<Force.toFloat(4.450147717014403e-308)); // _t19 = t13 < 222507385850720138309/5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:float64 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:65:7
_Next=_t19 ? 17 : 19; // if t19 goto 17.if.then else 19.if.else *ssa.If near /usr/local/go/src/pkg/math/remainder.go:65:7
}// end SubFn14
private inline  function SubFn15():Void {
var _t20:Float;
var _t21:Bool;
this.setPH(2726);
_t20=(Force.toFloat(_t18)+Force.toFloat(_t18)); // _t20 = t18 + t18 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:66:7
_t21=(Force.toFloat(_t20)>Force.toFloat(_t13)); // _t21 = t20 > t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:66:10
_Next=_t21 ? 20 : 18; // if t21 goto 20.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:66:10
}// end SubFn15
private inline  function SubFn16():Void {
_Next=_t10 ? 24 : 25; // if t10 goto 24.if.then else 25.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:66:10
}// end SubFn16
private inline  function SubFn17():Void {
var _t24:Bool;
this.setPH(2733);
_t23=(Force.toFloat(0.5)*Force.toFloat(_t13)); // _t23 = 1/2:float64 * t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:73:16
this.setPH(2734);
_t24=(Force.toFloat(_t18)>Force.toFloat(_t23)); // _t24 = t18 > t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:74:8
_Next=_t24 ? 22 : 18; // if t24 goto 22.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:74:8
}// end SubFn17
private inline  function SubFn18():Void {
var _t26:Float;
var _t27:Bool;
_t25=(Force.toFloat(_t18)-Force.toFloat(_t13)); // _t25 = t18 - t13 *ssa.BinOp near /usr/local/go/src/pkg/math/remainder.go:74:8
this.setPH(2728);
_t26=(Force.toFloat(_t25)+Force.toFloat(_t25)); // _t26 = t25 + t25 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:68:8
_t27=(Force.toFloat(_t26)>=Force.toFloat(_t13)); // _t27 = t26 >= t13 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:68:11
_Next=_t27 ? 21 : 18; // if t27 goto 21.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:68:11
}// end SubFn18
private inline  function SubFn19():Void {
_t28=(Force.toFloat(_t25)-Force.toFloat(_t13)); // _t28 = t25 - t13 *ssa.BinOp near /usr/local/go/src/pkg/math/remainder.go:68:11
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:68:11
}// end SubFn19
private inline  function SubFn20():Void {
var _t30:Bool;
_t29=(Force.toFloat(_t18)-Force.toFloat(_t13)); // _t29 = t18 - t13 *ssa.BinOp near /usr/local/go/src/pkg/math/remainder.go:68:11
this.setPH(2736);
_t30=(Force.toFloat(_t29)>=Force.toFloat(_t23)); // _t30 = t29 >= t23 *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:76:9
_Next=_t30 ? 23 : 18; // if t30 goto 23.if.then else 18.if.done *ssa.If near /usr/local/go/src/pkg/math/remainder.go:76:9
}// end SubFn20
private inline  function SubFn21():Void {
_t31=(Force.toFloat(_t29)-Force.toFloat(_t13)); // _t31 = t29 - t13 *ssa.BinOp near /usr/local/go/src/pkg/math/remainder.go:76:9
_Next=18; // jump 18.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:76:9
}// end SubFn21
private inline  function SubFn22():Void {
this.setPH(2742);
_t32=(-Force.toFloat(_t22)); // _t32 = -t22 *ssa.UnOp @ /usr/local/go/src/pkg/math/remainder.go:82:7
_Next=25; // jump 25.if.done *ssa.Jump near /usr/local/go/src/pkg/math/remainder.go:82:7
}// end SubFn22
}
#if js @:expose("Go_utf8_ValidString") #end class Go_utf8_ValidString extends StackFrameBasis implements StackFrame {  // /usr/local/go/src/pkg/unicode/utf8/utf8.go:415:6
var p_s:String;
public function new(gr:Int,_bds:Array<Dynamic>, p_s : String) {
super(gr,5659,"Go_utf8_ValidString");
this._bds=_bds;
this.p_s=p_s;
Scheduler.push(gr,this);
}
var _res:Bool;
public inline function res():Dynamic {return _res;}
var _t0:Dynamic=null;
var _t1:{r0:Bool,r1:Int,r2:Int}=null;
var _t2:Bool=false;
var _t3:Int=0;
var _t4:Int=0;
var _t5:Bool=false;
var _t6:String="";
var _SF1:StackFrame;
var _t7:{r0:Int,r1:Int}=null;
var _t9:Int=0;
var _t10:Bool=false;
var _Next:Int=0;
public static inline function callFromHaxe( p_s : String) : Bool {
if(!Go.doneInit) Go.init();
var _sf=new Go_utf8_ValidString(0,[], p_s).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_s : String) : Bool {
var _sf=new Go_utf8_ValidString(_gr,[], p_s).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_s : String) : Go_utf8_ValidString
{return new Go_utf8_ValidString(gr,_bds, p_s);
}
public function run():Go_utf8_ValidString {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(5659,0);
this.SubFn0();

case 1: // rangeiter.loop
this.setLatest(5659,1);
this.SubFn1();

case 2: // rangeiter.body
this.setLatest(5659,2);
this.SubFn2();

case 3: // rangeiter.done
this.setLatest(5659,3);
this.setPH(5672);
_res= true;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return true:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:428:2

case 4: // if.then
this.setLatest(5672,4);
this.SubFn3();
this.setPH(5666);
_SF1=Go_utf8_DecodeRuneInString.call(this._goroutine,[],_t6);
_Next = -1;
return this;
case -1:
this.setLatest(5666,-1);
_t7=_SF1.res();
 // _t7 = DecodeRuneInString(t6) *ssa.Call @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:422:33
this.SubFn4();

case 5: // if.then
this.setLatest(5666,5);
this.setPH(5668);
_res= false;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return false:bool *ssa.Return @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:424:5

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
this.setPH(5660);
_t0={k:0,v:Force.toUTF8slice(this._goroutine,p_s)}; // _t0 = range s *ssa.Range @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
_Next=1; // jump 1.rangeiter.loop *ssa.Jump near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
}// end SubFn0
private inline  function SubFn1():Void {
var _t2:Bool;
_t1={var _thisK:Int=_t0.k;if(_t0.k>=_t0.v.len()){r0:false,r1:0,r2:0};else {var _dr:{r0:Int,r1:Int}=Go_utf8_DecodeRune.callFromRT(this._goroutine,_t0.v.subSlice(_thisK,-1));_t0.k+=_dr.r1;{r0:true,r1:cast(_thisK,Int),r2:cast(_dr.r0,Int)};}}; // _t1 = next t0 *ssa.Next near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
_t2=_t1.r0; // _t2 = extract t1 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
_Next=_t2 ? 2 : 3; // if t2 goto 2.rangeiter.body else 3.rangeiter.done *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
}// end SubFn1
private inline  function SubFn2():Void {
var _t5:Bool;
_t3=_t1.r1; // _t3 = extract t1 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
_t4=_t1.r2; // _t4 = extract t1 #2 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:416:2
this.setPH(5661);
_t5=(_t4==65533); // _t5 = t4 == 65533:int32 *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:417:8
_Next=_t5 ? 4 : 1; // if t5 goto 4.if.then else 1.rangeiter.loop *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:417:8
}// end SubFn2
private inline  function SubFn3():Void {
this.setPH(5666);
_t6=Force.toRawString(this._goroutine,Force.toUTF8slice(this._goroutine,p_s).subSlice(_t3,-1)); // _t6 = slice s[t3:] *ssa.Slice @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:422:35
}// end SubFn3
private inline  function SubFn4():Void {
var _t10:Bool;
 // _t8 = extract t7 #0 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:422:35 [REGISTER VALUE UN-USED]
_t9=_t7.r1; // _t9 = extract t7 #1 *ssa.Extract near /usr/local/go/src/pkg/unicode/utf8/utf8.go:422:35
this.setPH(5667);
_t10=(_t9==1); // _t10 = t9 == 1:int *ssa.BinOp @ /usr/local/go/src/pkg/unicode/utf8/utf8.go:423:12
_Next=_t10 ? 5 : 1; // if t10 goto 5.if.then else 1.rangeiter.loop *ssa.If near /usr/local/go/src/pkg/unicode/utf8/utf8.go:423:12
}// end SubFn4
}
#if (!php) private #end class Go_main_dot_circle_perim extends StackFrameBasis implements StackFrame {  // interfaces.go:39:17
var p_c:Array<Dynamic>;
public function new(gr:Int,_bds:Array<Dynamic>, p_c : Array<Dynamic>) {
super(gr,39,"Go_main_dot_circle_perim");
this._bds=_bds;
this.p_c=p_c;
Scheduler.push(gr,this);
}
var _res:Float;
public inline function res():Dynamic {return _res;}
var _t0:Pointer=null;
var _t1:Array<Dynamic>=null;
var _t2:Float=0.0;
var _t3:Float=0.0;
var _Next:Int=0;
public static inline function callFromHaxe( p_c : Array<Dynamic>) : Float {
if(!Go.doneInit) Go.init();
var _sf=new Go_main_dot_circle_perim(0,[], p_c).run(); 
while(_sf._incomplete) Scheduler.runAll();
return _sf.res();
}
public static inline function callFromRT( _gr, p_c : Array<Dynamic>) : Float {
var _sf=new Go_main_dot_circle_perim(_gr,[], p_c).run(); 
while(_sf._incomplete) Scheduler.run1(_gr);
return _sf.res();
}
public static inline function call( gr:Int,_bds:Array<Dynamic>, p_c : Array<Dynamic>) : Go_main_dot_circle_perim
{return new Go_main_dot_circle_perim(gr,_bds, p_c);
}
public function run():Go_main_dot_circle_perim {
while(true){
switch(_Next) {
case 0: // entry
this.setLatest(39,0);
this.SubFn0();
this.setPH(40);
_res= _t3;
this._incomplete=false;
Scheduler.pop(this._goroutine);
return this; // return t3 *ssa.Return @ interfaces.go:40:2

default: Scheduler.bbi();}}}
private inline  function SubFn0():Void {
var _t0:Pointer;
var _t1:Array<Dynamic>;
var _t2:Float;
this.setPH(39);
_t0=new Pointer({var _v=new Array<Dynamic>();_v=[0.0]; _v;}); // _t0 = local circle (c) *ssa.Alloc @ interfaces.go:39:7
_t0.store(p_c); // *t0 = c *ssa.Store near interfaces.go:39:7
_t1=_t0.load(); // _t1 = *t0 *ssa.UnOp near interfaces.go:39:7
this.setPH(40);
_t2=_t1[0]; // _t2 = t1.radius [#0] *ssa.Field @ interfaces.go:40:25
_t3=(Force.toFloat(6.283185307179586)*Force.toFloat(_t2)); // _t3 = 314159265358979323846264338327950288419716939937510582097494459/50000000000000000000000000000000000000000000000000000000000000:float64 * t2 *ssa.BinOp @ interfaces.go:40:21
}// end SubFn0
}

#if js
@:expose("Go")
#end
class Go
{

	public static function Platform():String { // codes returned the same as used by Haxe 
    #if flash
    	return "flash";
    #elseif js
    	return "js";
    #elseif cpp
    	return "cpp";
    #elseif java
    	return "java";
    #elseif cs
    	return "cs";
    #elseif php
    	return "php";
    #elseif neko
    	return "neko";
    #else 
        #error "Only the js, flash, cpp (C++), java, cs (C#), php and neko Haxe targets are supported as a Go platform" 
    #end
	}

public static var math_MinInt8:Int = (-128);
public static var math_SqrtPi:Float = 1.772453850905516;
public static var math_MinInt16:Int = (-32768);
public static var math_Sqrt2:Float = 1.4142135623730951;
public static var math_Ln2:Float = 0.6931471805599453;
public static var math_SmallestNonzeroFloat32:Float = 1.401298464324817e-45;
public static var math_Phi:Float = 1.618033988749895;
public static var math_Ln10:Float = 2.302585092994046;
public static var math_Log2E:Float = 1.4426950408889634;
public static var math_SqrtPhi:Float = 1.272019649514069;
public static var math_Log10E:Float = 0.4342944819032518;
public static var math_SmallestNonzeroFloat64:Float = 5e-324;
public static var math_E:Float = 2.718281828459045;
public static var math_Pi:Float = 3.141592653589793;
public static var math_MaxFloat32:Float = 3.4028234663852886e+38;
public static var math_MaxInt64:GOint64 = GOint64.make(0x7fffffff,0xffffffff);
public static var math_MaxInt32:Int = 2147483647;
public static var math_MaxInt8:Int = 127;
public static var math_MaxFloat64:Float = 1.7976931348623157e+308;
public static var math_MaxUint32:Int = (-1);
public static var math_MaxUint64:Int = (-1);
public static var math_SqrtE:Float = 1.6487212707001282;
public static var math_MinInt32:Int = (-2147483648);
public static var math_MaxUint16:Int = 65535;
public static var math_MaxUint8:Int = 255;
public static var math_MinInt64:GOint64 = GOint64.make(0x80000000,0x0);
public static var math_MaxInt16:Int = 32767;
public static var utf8_UTFMax:Int = 4;
public static var utf8_RuneSelf:Int = 128;
public static var utf8_RuneError:Int = 65533;
public static var utf8_MaxRune:Int = 1114111;
public static var haxegoruntime_init_36_guard:Pointer=new Pointer(false); 
public static var haxegoruntime_ZiLen:Pointer=new Pointer(0);  // langgoruntime.go:33:5
public static var math__lgamW:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...7){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:156:5
public static var math_init_36_guard:Pointer=new Pointer(false); 
public static var math__lgamV:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:148:5
public static var math__lgamU:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:140:5
public static var math__lgamT:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...15){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:123:5
public static var math__lgamA:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...12){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:91:5
public static var math_pow10tab:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...70){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/pow10.go:9:5
public static var math__gamQ:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...8){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/gamma.go:75:5
public static var math_p0R3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:274:5
public static var math_q0S3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:383:5
public static var math_p1S5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:258:5
public static var math__gamP:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...7){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/gamma.go:66:5
public static var math_p0S5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:265:5
public static var math_p0R2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:291:5
public static var math_q0R5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:357:5
public static var math_q0S2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:401:5
public static var math_q1R8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:332:5
public static var math__cos:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/sin.go:103:5
public static var math__gamS:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/gamma.go:85:5
public static var math_q1S8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:340:5
public static var math_p1R5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:250:5
public static var math_p1R2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:284:5
public static var math_p1R3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:267:5
public static var math_p0R5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:257:5
public static var math_p0S2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:299:5
public static var math_q0S5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:365:5
public static var math_q0R2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:393:5
public static var math_p1S3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:275:5
public static var math_p0S3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:282:5
public static var math_q0R3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:375:5
public static var math_p1S2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:292:5
public static var math_q1S2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:394:5
public static var math_q1S3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:376:5
public static var math_q1R3:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:368:5
public static var math__sin:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/sin.go:93:5
public static var math_p0R8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:240:5
public static var math_q0S8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:347:5
public static var math_q1R2:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:386:5
public static var math_p0S8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:248:5
public static var math_q0R8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j0.go:339:5
public static var math_q1R5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:350:5
public static var math_p1S8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:241:5
public static var math_p1R8:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:233:5
public static var math_q1S5:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...6){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/j1.go:358:5
public static var math_tanhP:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...3){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/tanh.go:57:5
public static var math_tanhQ:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...3){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/tanh.go:62:5
public static var math__lgamS:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...7){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:114:5
public static var math__tanQ:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...5){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/tan.go:68:5
public static var math__lgamR:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...7){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/lgamma.go:105:5
public static var math__tanP:Pointer=new Pointer({var _v=new Array<Float>();for(_vi in 0...3){_v[_vi]=0.0;}; _v;});  // /usr/local/go/src/pkg/math/tan.go:63:5
public static var main_init_36_guard:Pointer=new Pointer(false); 
public static var utf16_init_36_guard:Pointer=new Pointer(false); 
public static var utf8_init_36_guard:Pointer=new Pointer(false); 
public static var doneInit:Bool=false;

public static function init() : Void {
doneInit=true;
var gr:Int=Scheduler.makeGoroutine();
if(gr!=0) throw "non-zero goroutine number in init";
var _sfgr=new Go_haxegoruntime_init(gr,[]).run();
while(_sfgr._incomplete) Scheduler.runAll();
var _sf=new Go_main_init(gr,[]).run();
while(_sf._incomplete) Scheduler.runAll();
Scheduler.doneInit=true;
Go.haxegoruntime_ZiLen.store('字'.length);
}

public static function main() : Void {
Go_main_main.callFromHaxe();
}
public static function CPos(pos:Int):String {
var prefix:String="";
if (pos==0) return "(pogo.NoPosHash)";
if (pos<0) { pos = -pos; prefix= "near ";}
if(pos>5244) return prefix+"/usr/local/go/src/pkg/unicode/utf8/utf8.go:"+Std.string(pos-5244);
else if(pos>5136) return prefix+"/usr/local/go/src/pkg/unicode/utf16/utf16.go:"+Std.string(pos-5136);
else if(pos>4995) return prefix+"langgoruntime.go:"+Std.string(pos-4995);
else if(pos>4974) return prefix+"/usr/local/go/src/pkg/math/unsafe.go:"+Std.string(pos-4974);
else if(pos>4844) return prefix+"/usr/local/go/src/pkg/math/tan.go:"+Std.string(pos-4844);
else if(pos>4422) return prefix+"/usr/local/go/src/pkg/math/j1.go:"+Std.string(pos-4422);
else if(pos>4346) return prefix+"/usr/local/go/src/pkg/math/cbrt.go:"+Std.string(pos-4346);
else if(pos>4296) return prefix+"/usr/local/go/src/pkg/math/logb.go:"+Std.string(pos-4296);
else if(pos>3931) return prefix+"/usr/local/go/src/pkg/math/lgamma.go:"+Std.string(pos-3931);
else if(pos>3707) return prefix+"/usr/local/go/src/pkg/math/sin.go:"+Std.string(pos-3707);
else if(pos>3570) return prefix+"/usr/local/go/src/pkg/math/pow.go:"+Std.string(pos-3570);
else if(pos>3427) return prefix+"/usr/local/go/src/pkg/math/sqrt.go:"+Std.string(pos-3427);
else if(pos>3350) return prefix+"/usr/local/go/src/pkg/math/sinh.go:"+Std.string(pos-3350);
else if(pos>2921) return prefix+"/usr/local/go/src/pkg/math/j0.go:"+Std.string(pos-2921);
else if(pos>2824) return prefix+"/usr/local/go/src/pkg/math/tanh.go:"+Std.string(pos-2824);
else if(pos>2814) return prefix+"/usr/local/go/src/pkg/math/signbit.go:"+Std.string(pos-2814);
else if(pos>2745) return prefix+"/usr/local/go/src/pkg/math/sincos.go:"+Std.string(pos-2745);
else if(pos>2660) return prefix+"/usr/local/go/src/pkg/math/remainder.go:"+Std.string(pos-2660);
else if(pos>2633) return prefix+"/usr/local/go/src/pkg/math/nextafter.go:"+Std.string(pos-2633);
else if(pos>2593) return prefix+"/usr/local/go/src/pkg/math/pow10.go:"+Std.string(pos-2593);
else if(pos>2543) return prefix+"/usr/local/go/src/pkg/math/mod.go:"+Std.string(pos-2543);
else if(pos>2343) return prefix+"/usr/local/go/src/pkg/math/log1p.go:"+Std.string(pos-2343);
else if(pos>2309) return prefix+"/usr/local/go/src/pkg/math/modf.go:"+Std.string(pos-2309);
else if(pos>2186) return prefix+"/usr/local/go/src/pkg/math/log.go:"+Std.string(pos-2186);
else if(pos>2141) return prefix+"/usr/local/go/src/pkg/math/ldexp.go:"+Std.string(pos-2141);
else if(pos>2085) return prefix+"/usr/local/go/src/pkg/math/floor.go:"+Std.string(pos-2085);
else if(pos>2042) return prefix+"/usr/local/go/src/pkg/math/hypot.go:"+Std.string(pos-2042);
else if(pos>2020) return prefix+"/usr/local/go/src/pkg/math/log10.go:"+Std.string(pos-2020);
else if(pos>1714) return prefix+"/usr/local/go/src/pkg/math/jn.go:"+Std.string(pos-1714);
else if(pos>1642) return prefix+"/usr/local/go/src/pkg/math/dim.go:"+Std.string(pos-1642);
else if(pos>1405) return prefix+"/usr/local/go/src/pkg/math/expm1.go:"+Std.string(pos-1405);
else if(pos>1372) return prefix+"/usr/local/go/src/pkg/math/frexp.go:"+Std.string(pos-1372);
else if(pos>1170) return prefix+"/usr/local/go/src/pkg/math/gamma.go:"+Std.string(pos-1170);
else if(pos>979) return prefix+"/usr/local/go/src/pkg/math/exp.go:"+Std.string(pos-979);
else if(pos>644) return prefix+"/usr/local/go/src/pkg/math/erf.go:"+Std.string(pos-644);
else if(pos>632) return prefix+"/usr/local/go/src/pkg/math/copysign.go:"+Std.string(pos-632);
else if(pos>581) return prefix+"/usr/local/go/src/pkg/math/const.go:"+Std.string(pos-581);
else if(pos>476) return prefix+"/usr/local/go/src/pkg/math/atan.go:"+Std.string(pos-476);
else if(pos>407) return prefix+"/usr/local/go/src/pkg/math/asinh.go:"+Std.string(pos-407);
else if(pos>352) return prefix+"/usr/local/go/src/pkg/math/asin.go:"+Std.string(pos-352);
else if(pos>275) return prefix+"/usr/local/go/src/pkg/math/atanh.go:"+Std.string(pos-275);
else if(pos>216) return prefix+"/usr/local/go/src/pkg/math/bits.go:"+Std.string(pos-216);
else if(pos>145) return prefix+"/usr/local/go/src/pkg/math/atan2.go:"+Std.string(pos-145);
else if(pos>85) return prefix+"/usr/local/go/src/pkg/math/acosh.go:"+Std.string(pos-85);
else if(pos>63) return prefix+"/usr/local/go/src/pkg/math/abs.go:"+Std.string(pos-63);
else if(pos>0) return prefix+"interfaces.go:"+Std.string(pos-0);
else return "(invalid pogo.PosHash:"+Std.string(pos)+")";}
} // end Go class
class TypeInfo{
public static function getName(id:Int):String {
switch(id){
case 0: return "main.square";
case 1: return "main.circle";
default: return "UNKNOWN";}}
public static function typeString(i:Interface):String {
return getName(i.typ);
}
public static function getId(name:String):Int {
switch(name){
case "main.square": return 0;
case "main.circle": return 1;
default: return -1;}}
public static function isAssignableTo(v:Int,t:Int):Bool {
if(v==t) return true;
switch(v){
case 0: switch(t){
default: return false;}
case 1: switch(t){
default: return false;}
default: return false;}}
public static function isIdentical(v:Int,t:Int):Bool {
if(v==t) return true;
switch(v){
case 0: switch(t){
default: return false;}
case 1: switch(t){
default: return false;}
default: return false;}}
public static function isConcrete(t:Int):Bool {
switch(t){
case 0: return true;
case 1: return true;
default: return false;}}
public static function zeroValue(t:Int):Dynamic {
switch(t){
case 0: return {var _v=new Array<Dynamic>();_v=[0.0,0.0]; _v;};
case 1: return {var _v=new Array<Dynamic>();_v=[0.0]; _v;};
default: return null;}}
public static function method(t:Int,m:String):Dynamic {
switch(t){
case 0: switch(m){
case "area": return Go_main_dot_square_area.call; // area 1 [0] false
case "perim": return Go_main_dot_square_perim.call; // perim 1 [1] false
default:}
case 1: switch(m){
case "area": return Go_main_dot_circle_area.call; // area 1 [0] false
case "perim": return Go_main_dot_circle_perim.call; // perim 1 [1] false
default:}
default:}
 Scheduler.panicFromHaxe( "no method found!"); return null;}
}

 // Warning: *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:17:70 (Haxe) Attempt to convert a value to be an Unsafe Pointer, which is unsupported
 // Warning: *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:173:11 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.Phi @ /usr/local/go/src/pkg/math/expm1.go:173:11 (inexact) constant value -1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:160:10 (inexact) constant value 38.816242111356935 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:161:11 (inexact) constant value 709.782712893384 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:172:10 (inexact) constant value 0.34657359027997264 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:174:11 (inexact) constant value 1.0397207708399179 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:47 (inexact) constant value -2.0109921818362437e-07 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:43 (inexact) constant value 4.008217827329362e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:35 (inexact) constant value -7.93650757867488e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:27 (inexact) constant value 0.0015873015872548146 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:205:19 (inexact) constant value -0.03333333333333313 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:176:12 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:180:12 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:186:19 (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:191:14 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:192:11 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/expm1.go:188:19 (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:224:17 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:237:8 (inexact) constant value 0.9 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:240:11 (inexact) constant value 0.7316321449683623 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:253:11 (inexact) constant value 1.7316321449683623 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:244:11 (inexact) constant value 0.46163214496836225 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:243:11 (inexact) constant value 0.19163214496836226 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:257:11 (inexact) constant value 1.4616321449683622 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:256:11 (inexact) constant value 1.1916321449683622 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:277:20 (inexact) constant value -3.638676997039505e-18 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:278:18 (inexact) constant value -0.12148629053584961 cannot be accurately represented in float64
 // Warning: *ssa.Call @ langgoruntime.go:16:18 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:17:17 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:18:15 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:19:18 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:20:17 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:21:15 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:22:14 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:23:19 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:25:18 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:26:20 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:28:18 (pogo) The result from a function call is not used
 // Warning: *ssa.Call @ langgoruntime.go:29:18 (pogo) The result from a function call is not used
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:24 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:24 (inexact) constant value 1.7976931348623157e+308 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:55 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:48:55 (inexact) constant value -1.7976931348623157e+308 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:54:14 (inexact) constant value 1.5707963267948966 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:14 (inexact) constant value 0.7853981256484985 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:24 (inexact) constant value 3.774894707930798e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:155:34 (inexact) constant value 2.6951514290790595e-15 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:330:18 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:354:14 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:356:14 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:358:14 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:360:15 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/lgamma.go:362:14 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/copysign.go:11:39 (inexact) constant value -9223372036854775808 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/copysign.go:11:62 (inexact) constant value -9223372036854775808 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:14 (inexact) constant value 0.7853981256484985 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:24 (inexact) constant value 3.774894707930798e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sin.go:213:34 (inexact) constant value 2.6951514290790595e-15 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:81:7 (inexact) constant value 0.66 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:84:7 (inexact) constant value 2.414213562373095 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:85:15 (inexact) constant value 1.5707963267948966 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:85:28 (inexact) constant value 6.123233995736766e-17 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:14 (inexact) constant value 0.7853981633974483 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:87:35 (inexact) constant value 3.061616997868383e-17 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:35:7 (inexact) constant value 0.7 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/asin.go:36:15 (inexact) constant value 1.5707963267948966 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:107:8 (inexact) constant value 0.7071067811865476 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:35 (inexact) constant value 0.14798198605116586 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:32 (inexact) constant value 0.1818357216161805 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:25 (inexact) constant value 0.2857142874366239 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:118:17 (inexact) constant value 0.6666666666666735 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:28 (inexact) constant value 0.15313837699209373 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:25 (inexact) constant value 0.22222198432149784 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:119:17 (inexact) constant value 0.3999999999940942 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:10 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log.go:122:43 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/bits.go:55:12 (inexact) constant value 2.2250738585072014e-308 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/asinh.go:57:17 (inexact) constant value 0.6931471805599453 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/signbit.go:9:23 (inexact) constant value -9223372036854775808 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:16 (inexact) constant value -0.8750608600031904 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:18 (inexact) constant value -16.157537187333652 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:24 (inexact) constant value -75.00855792314705 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:30 (inexact) constant value -122.88666844901361 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:37 (inexact) constant value -64.85021904942025 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:51 (inexact) constant value 24.858464901423062 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:57 (inexact) constant value 165.02700983169885 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:63 (inexact) constant value 432.88106049129027 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:69 (inexact) constant value 485.3903996359137 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan.go:69:76 (inexact) constant value 194.5506571482614 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:24 (inexact) constant value 0.1728395061728395 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:26 (inexact) constant value 0.2222222222222222 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:71:40 (inexact) constant value 0.3333333333333333 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:9 (inexact) constant value 0.1662848358 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:12 (inexact) constant value 1.096040958 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:25 (inexact) constant value 0.5649335816 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:55:21 (inexact) constant value 0.4105032829 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:9 (inexact) constant value 0.2639607233 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:12 (inexact) constant value 0.8699282849 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:25 (inexact) constant value 0.2824667908 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:58:21 (inexact) constant value 0.1629083358 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:9 (inexact) constant value 0.4190115298 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:12 (inexact) constant value 0.6904625373 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:25 (inexact) constant value 0.1412333954 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/cbrt.go:61:21 (inexact) constant value 0.0646502159 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:14 (inexact) constant value 0.7853981256484985 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:24 (inexact) constant value 3.774894707930798e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sincos.go:55:34 (inexact) constant value 2.6951514290790595e-15 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:15 (inexact) constant value -26.30563213397497 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:18 (inexact) constant value -2894.211355989564 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:25 (inexact) constant value -89912.72022039509 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:53:33 (inexact) constant value -630767.3640497717 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:22 (inexact) constant value -173.6789535582337 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:29 (inexact) constant value 15215.17378790019 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/sinh.go:54:37 (inexact) constant value -630767.3640497717 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log10.go:12:16 (inexact) constant value 0.4342944819032518 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log10.go:21:18 (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:103:7 (inexact) constant value 143.01608 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:109:16 (inexact) constant value 2.5066282746310007 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:133:10 (inexact) constant value 0.41421356237309503 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:140:8 (inexact) constant value -0.2928932188134525 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:53 (inexact) constant value 0.14798198605116586 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:51 (inexact) constant value 0.15313837699209373 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:44 (inexact) constant value 0.1818357216161805 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:37 (inexact) constant value 0.22222198432149784 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:30 (inexact) constant value 0.2857142874366239 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:23 (inexact) constant value 0.3999999999940942 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:195:15 (inexact) constant value 0.6666666666666735 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:187:40 (inexact) constant value 0.6666666666666666 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:183:21 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:184:22 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:20 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:191:46 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:19 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/log1p.go:199:62 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:133:9 (inexact) constant value -170.5674972726612 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:133:35 (inexact) constant value 171.61447887182297 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:151:17 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:155:10 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:166:8 (inexact) constant value -1e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:173:8 (inexact) constant value 1e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/gamma.go:193:24 (inexact) constant value 0.5772156649015329 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/acosh.go:54:17 (inexact) constant value 0.6931471805599453 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:111:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:111:8 (inexact) constant value 8.988465674311579e+307 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:124:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:125:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:129:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:33 (inexact) constant value -4.618326885321032e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:31 (inexact) constant value 1.8295404953270067e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:24 (inexact) constant value -0.00018997929423885472 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:140:16 (inexact) constant value 0.015624999999999995 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:33 (inexact) constant value 1.1661400333379e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:31 (inexact) constant value 5.135465502073181e-07 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:24 (inexact) constant value 0.00011692678466333745 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:141:17 (inexact) constant value 0.015619102946489001 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:14 (inexact) constant value 0.7853981256484985 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:24 (inexact) constant value 3.774894707930798e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:115:34 (inexact) constant value 2.6951514290790595e-15 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/tan.go:118:8 (inexact) constant value 1e-14 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/tanh.go:78:9 (inexact) constant value 44.014845965556525 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:203:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:203:8 (inexact) constant value 8.988465674311579e+307 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:212:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:213:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:217:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:222:22 (inexact) constant value 0.6366197723675814 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:222:14 (inexact) constant value -0.07380429510868723 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:49 (inexact) constant value -3.982051941321034e-11 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:47 (inexact) constant value 1.9559013703502292e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:40 (inexact) constant value -3.8140705372436416e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:33 (inexact) constant value 0.00034745343209368365 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:26 (inexact) constant value -0.01381856719455969 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:19 (inexact) constant value 0.17666645250918112 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:225:11 (inexact) constant value -0.07380429510868723 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:33 (inexact) constant value 4.4111031133267547e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:31 (inexact) constant value 2.591508518404578e-07 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:24 (inexact) constant value 7.600686273503533e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:226:17 (inexact) constant value 0.01273048348341237 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:227:21 (inexact) constant value 0.6366197723675814 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.00016011952247675185 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0011913514700658638 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.010421379756176158 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.04763678004571372 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.20744822764843598 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.4942148268014971 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.3158187332412014e-05 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0005396055804933034 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.004456419138517973 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.011813978522206043 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.035823639860549865 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.23459179571824335 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0714304917030273 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0007873113957930937 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.00022954996161337813 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0026813261780578124 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0034722222160545866 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.08333333333334822 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07031249999999004 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -8.081670412753498 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -257.06310567970485 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2485.216410094288 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -5253.043804907295 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 116.53436461966818 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3833.7447536412183 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 40597.857264847255 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 116752.97256437592 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 47627.728414673096 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.141254646918945e-11 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07031249408735993 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -4.159610644705878 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -67.67476522651673 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -331.23129964917297 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -346.4333883656049 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 60.753938269230034 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1051.2523059570458 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 5978.970943338558 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 9625.445143577745 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2406.058159229391 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.547046017719519e-09 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07031196163814817 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.409032215495296 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -21.96597747348831 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -58.07917047017376 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -31.44794705948885 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 35.85603380552097 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 361.51398305030386 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1193.6078379211153 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1127.9967985690741 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 173.58093081333575 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -8.875343330325264e-08 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07030309954836247 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.4507384678095299 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -7.635696138235278 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -11.193166886035675 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -3.2336457935133534 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 22.22029975320888 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 136.2067942182152 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 270.4702786580835 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 153.87539420832033 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 14.65761769482562 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0732421874999935 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 11.76820646822527 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 557.6733802564019 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 8859.197207564686 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 37014.62677768878 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 163.77602689568982 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 8098.344946564498 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 142538.29141912048 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 803309.2571195144 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 840501.5798190605 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -343899.2935378666 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.8408596359451553e-11 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.07324217666126848 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 5.8356350896205695 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 135.11157728644983 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1027.243765961641 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1989.9778586460538 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 82.77661022365378 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2077.81416421393 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 18847.28877857181 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 56751.11228949473 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 35976.75384251145 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -5354.342756019448 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 4.377410140897386e-09 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.07324111800429114 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3.344231375161707 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 42.621844074541265 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 170.8080913405656 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 166.73394869665117 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 48.75887297245872 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 709.689221056606 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3704.1482262011136 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 6460.425167525689 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2516.3336892036896 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -149.2474518361564 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.5044444488698327e-07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.07322342659630793 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.99819174093816 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 14.495602934788574 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 31.666231750478154 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 16.252707571092927 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 30.36558483552192 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 269.34811860804984 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 844.7837575953201 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 882.9358451124886 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 212.66638851179883 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -5.3109549388266695 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.11718749999998865 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 13.239480659307358 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 412.05185430737856 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3874.7453891396053 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 7914.479540318917 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 114.20737037567841 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3650.9308342085346 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 36956.206026903346 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 97602.79359349508 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 30804.27206278888 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.3199051955624352e-11 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.1171874931906141 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 6.802751278684329 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 108.30818299018911 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 517.6361395331998 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 528.7152013633375 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 59.28059872211313 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 991.4014187336144 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 5353.26695291488 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 7844.690317495512 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1504.0468881036106 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3.025039161373736e-09 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.11718686556725359 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3.9329775003331564 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 35.11940355916369 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 91.05501107507813 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 48.55906851973649 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 34.79130950012515 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 336.76245874782575 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1046.8713997577513 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 890.8113463982564 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 103.78793243963928 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.0771083010687374e-07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.11717621946268335 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.368514966676088 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 12.242610914826123 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 17.693971127168773 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 5.073523125888185 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 21.43648593638214 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 125.29022716840275 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 232.2764690571628 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 117.6793732871471 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 8.364638933716183 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.10253906249999271 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -16.271753454459 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -759.6017225139501 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -11849.806670242959 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -48438.512428575035 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 161.3953697007229 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 7825.385999233485 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 133875.33628724958 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 719657.7236832409 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 666601.2326177764 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -294490.26430383464 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.089799311417641e-11 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.10253905024137543 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -8.05644828123936 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -183.66960747488838 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1373.1937606550816 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2612.4444045321566 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 81.27655013843358 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1991.7987346048596 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 17468.48519249089 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 49851.42709103523 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 27948.075163891812 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -4719.183547951285 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -5.078312264617666e-09 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.10253782982083709 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -4.610115811394734 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -57.847221656278364 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -228.2445407376317 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -219.21012847890933 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 47.66515503237295 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 673.8651126766997 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3380.1528667952634 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 5547.729097207228 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1903.119193388108 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -135.20119144430734 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.7838172751095887e-07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.10251704260798555 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.7522056827818746 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -19.663616264370372 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -42.32531333728305 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -21.371921170370406 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 29.533362906052385 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 252.98154998219053 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 757.5028348686454 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 739.3932053204672 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 155.94900333666612 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -4.959498988226282 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.07721566490153287 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.3224670334241136 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.06735230105312927 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.020580808432516733 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.007385550860814029 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0028905138367341563 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0011927076318336207 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0005100697921535113 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.00022086279071390839 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.00010801156724758394 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.5214456545125733e-05 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 4.4864094961891516e-05 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.3920053346762105 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.7219355475671381 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.17193386563280308 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.01864591917156529 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0007779424963818936 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 7.326684307446256e-06 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07721566490153287 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.21498241596060885 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.325778796408931 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.14635047265246445 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.02664227030336386 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0018402845140733772 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 3.194753265841009e-05 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.48383612272381005 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.1475877229945939 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.06462494023913339 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.032788541075985965 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.01797067508118204 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.010314224129834144 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.006100538702462913 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0036845201678113826 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0022596478090061247 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0014034646998923284 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.000881081882437654 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0005385953053567405 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.00031563207090362595 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.00031275416837512086 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0003355291926355191 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.07721566490153287 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.6328270640250934 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.4549225013723477 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.9777175279633727 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.22896372806469245 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.013381091853678766 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.4559779371304113 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.128489763798934 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.7692851504566728 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.10422264559336913 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.003217092422824239 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.4189385332046727 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.08333333333333297 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0027777777772877554 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0007936505586430196 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.00059518755745034 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.0008363399189962821 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0016309293409657527 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.5896230157654656e-10 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.5050747762857807e-08 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.7557313621385722e-06 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0001984126982958954 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.008333333333322118 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.1666666666666663 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.1358536521387682e-11 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.087570084197473e-09 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -2.755731417929674e-07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.4801587288851704e-05 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.0013888888888873056 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 0.041666666666666595 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -13093.693918138379 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 1.1535166483858742e+06 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.7956525197648488e+07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 13681.296347069296 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1.3208923444021097e+06 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2.500838018233579e+07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -5.3869575592945464e+07 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -0.9643991794250523 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -99.28772310019185 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value -1614.6876844170845 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 112.81167849163293 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 2235.4883906010045 cannot be accurately represented in float64
 // Warning: *ssa.Store near /usr/local/go/src/pkg/math/j0.go:227:13 (inexact) constant value 4844.063053251255 cannot be accurately represented in float64
 // Warning: *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:14:75 (Haxe) Attempt to convert a value to be an Unsafe Pointer, which is unsupported
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:210:9 (inexact) constant value 2.848094538889218e-306 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:37 (inexact) constant value -2.3763016656650163e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:35 (inexact) constant value -0.005770270296489442 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:28 (inexact) constant value -0.02848174957559851 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:21 (inexact) constant value -0.3250421072470015 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:217:13 (inexact) constant value 0.12837916709551256 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:42 (inexact) constant value -3.960228278775368e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:40 (inexact) constant value 0.00013249473800432164 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:33 (inexact) constant value 0.005081306281875766 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:26 (inexact) constant value 0.0650222499887673 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:218:19 (inexact) constant value 0.39791722395915535 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:211:33 (inexact) constant value 1.0270333367641007 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:213:19 (inexact) constant value 0.1283791670955126 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:50 (inexact) constant value -0.002166375594868791 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:48 (inexact) constant value 0.035478304325618236 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:41 (inexact) constant value -0.11089469428239668 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:34 (inexact) constant value 0.31834661990116175 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:27 (inexact) constant value -0.3722078760357013 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:20 (inexact) constant value 0.41485611868374833 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:229:12 (inexact) constant value -0.0023621185607526594 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:48 (inexact) constant value 0.011984499846799107 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:46 (inexact) constant value 0.01363708391202905 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:39 (inexact) constant value 0.12617121980876164 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:32 (inexact) constant value 0.07182865441419627 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:25 (inexact) constant value 0.540397917702171 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:230:18 (inexact) constant value 0.10642088040084423 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:232:16 (inexact) constant value -0.8450629115104675 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:234:14 (inexact) constant value 0.8450629115104675 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:244:7 (inexact) constant value 2.857142857142857 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:56 (inexact) constant value -9.814329344169145 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:54 (inexact) constant value -81.2874355063066 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:47 (inexact) constant value -184.60509290671104 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:40 (inexact) constant value -162.39666946257347 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:33 (inexact) constant value -62.375332450326006 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:26 (inexact) constant value -10.558626225323291 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:19 (inexact) constant value -0.6938585727071818 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:245:11 (inexact) constant value -0.009864944034847148 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:61 (inexact) constant value -0.0604244152148581 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:59 (inexact) constant value 6.570249770319282 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:52 (inexact) constant value 108.63500554177944 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:45 (inexact) constant value 429.00814002756783 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:38 (inexact) constant value 645.3872717332679 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:31 (inexact) constant value 434.56587747522923 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:24 (inexact) constant value 137.65775414351904 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:246:17 (inexact) constant value 19.651271667439257 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:251:38 (inexact) constant value -4294967296 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:49 (inexact) constant value -483.5191916086514 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:47 (inexact) constant value -1025.0951316110772 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:40 (inexact) constant value -637.5664433683896 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:33 (inexact) constant value -160.63638485582192 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:26 (inexact) constant value -17.757954917754752 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:19 (inexact) constant value -0.799283237680523 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:248:11 (inexact) constant value -0.0098649429247001 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:54 (inexact) constant value -22.44095244658582 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:52 (inexact) constant value 474.52854120695537 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:45 (inexact) constant value 2553.0504064331644 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:38 (inexact) constant value 3199.8582195085955 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:31 (inexact) constant value 1536.729586084437 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:24 (inexact) constant value 325.7925129965739 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:249:17 (inexact) constant value 30.33806074348246 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:415:14 (inexact) constant value 4.5454 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:418:14 (inexact) constant value 2.8571 cannot be accurately represented in float64
 // Warning: *ssa.Call @ langgoruntime.go:84:18 (pogo) The result from a function call is not used
 // Warning: *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:21:75 (Haxe) Attempt to convert a value to be an Unsafe Pointer, which is unsupported
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:306:14 (inexact) constant value 4.5454 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:309:14 (inexact) constant value 2.8571 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:42:18 (inexact) constant value 1.5707963267948966 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:40:18 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:59:18 (inexact) constant value 1.5707963267948966 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:47:20 (inexact) constant value 0.7853981633974483 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:54:19 (inexact) constant value 2.356194490192345 cannot be accurately represented in float64
 // Warning: *ssa.Call @ /usr/local/go/src/pkg/math/atan2.go:56:19 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:66:13 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/atan2.go:68:12 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:185:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:185:8 (inexact) constant value 8.988465674311579e+307 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:205:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:206:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:210:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:215:20 (inexact) constant value -0.6366197723675814 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:35 (inexact) constant value -9.190991580398789e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:33 (inexact) constant value 2.352526005616105e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:26 (inexact) constant value -0.0019125689587576355 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:19 (inexact) constant value 0.05044387166398113 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:218:11 (inexact) constant value -0.19605709064623894 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:40 (inexact) constant value 1.6655924620799208e-11 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:38 (inexact) constant value 6.227414523646215e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:31 (inexact) constant value 1.3560880109751623e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:24 (inexact) constant value 0.00020255258102513517 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:219:17 (inexact) constant value 0.01991673182366499 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:220:25 (inexact) constant value 0.6366197723675814 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:109:9 (inexact) constant value 709.782712893384 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:111:9 (inexact) constant value -745.1332191019411 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:125:22 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:126:19 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:121:16 (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:123:16 (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:313:14 (inexact) constant value 4.5454 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j0.go:316:14 (inexact) constant value 2.8571 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/pow.go:94:8 (inexact) constant value -9223372036854775808 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:37 (inexact) constant value -2.3763016656650163e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:35 (inexact) constant value -0.005770270296489442 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:28 (inexact) constant value -0.02848174957559851 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:21 (inexact) constant value -0.3250421072470015 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:287:13 (inexact) constant value 0.12837916709551256 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:42 (inexact) constant value -3.960228278775368e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:40 (inexact) constant value 0.00013249473800432164 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:33 (inexact) constant value 0.005081306281875766 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:26 (inexact) constant value 0.0650222499887673 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:288:19 (inexact) constant value 0.39791722395915535 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:50 (inexact) constant value -0.002166375594868791 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:48 (inexact) constant value 0.035478304325618236 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:41 (inexact) constant value -0.11089469428239668 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:34 (inexact) constant value 0.31834661990116175 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:27 (inexact) constant value -0.3722078760357013 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:20 (inexact) constant value 0.41485611868374833 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:303:12 (inexact) constant value -0.0023621185607526594 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:48 (inexact) constant value 0.011984499846799107 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:46 (inexact) constant value 0.01363708391202905 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:39 (inexact) constant value 0.12617121980876164 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:32 (inexact) constant value 0.07182865441419627 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:25 (inexact) constant value 0.540397917702171 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:304:18 (inexact) constant value 0.10642088040084423 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:306:19 (inexact) constant value 1.8450629115104675 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:308:18 (inexact) constant value 0.15493708848953247 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:314:8 (inexact) constant value 2.857142857142857 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:57 (inexact) constant value -9.814329344169145 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:55 (inexact) constant value -81.2874355063066 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:48 (inexact) constant value -184.60509290671104 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:41 (inexact) constant value -162.39666946257347 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:34 (inexact) constant value -62.375332450326006 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:27 (inexact) constant value -10.558626225323291 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:20 (inexact) constant value -0.6938585727071818 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:315:12 (inexact) constant value -0.009864944034847148 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:62 (inexact) constant value -0.0604244152148581 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:60 (inexact) constant value 6.570249770319282 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:53 (inexact) constant value 108.63500554177944 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:46 (inexact) constant value 429.00814002756783 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:39 (inexact) constant value 645.3872717332679 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:32 (inexact) constant value 434.56587747522923 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:25 (inexact) constant value 137.65775414351904 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:316:18 (inexact) constant value 19.651271667439257 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:324:39 (inexact) constant value -4294967296 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:50 (inexact) constant value -483.5191916086514 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:48 (inexact) constant value -1025.0951316110772 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:41 (inexact) constant value -637.5664433683896 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:34 (inexact) constant value -160.63638485582192 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:27 (inexact) constant value -17.757954917754752 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:20 (inexact) constant value -0.799283237680523 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:321:12 (inexact) constant value -0.0098649429247001 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:55 (inexact) constant value -22.44095244658582 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:53 (inexact) constant value 474.52854120695537 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:46 (inexact) constant value 2553.0504064331644 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:39 (inexact) constant value 3199.8582195085955 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:32 (inexact) constant value 1536.729586084437 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:25 (inexact) constant value 325.7925129965739 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/erf.go:322:18 (inexact) constant value 30.33806074348246 cannot be accurately represented in float64
 // Warning: _t2@/usr/local/go/src/pkg/unicode/utf8/utf8.go:382:6 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: _t2@/usr/local/go/src/pkg/unicode/utf8/utf8.go:382:6 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: _t2@/usr/local/go/src/pkg/unicode/utf8/utf8.go:382:6 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: _t2@/usr/local/go/src/pkg/unicode/utf8/utf8.go:382:6 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: temp var declaration (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: temp var declaration (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: *ssa.Next near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: *ssa.Next near /usr/local/go/src/pkg/unicode/utf8/utf8.go:383:2 (Haxe) LangType() unrecognised basic type, Dynamic assumed
 // Warning: *ssa.Convert @ /usr/local/go/src/pkg/math/unsafe.go:10:70 (Haxe) Attempt to convert a value to be an Unsafe Pointer, which is unsupported
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:408:14 (inexact) constant value 4.5454 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:411:14 (inexact) constant value 2.8571 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:152:9 (inexact) constant value 1023.9999999999999 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:168:10 (inexact) constant value 0.6931471803691238 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:169:11 (inexact) constant value 1.9082149292705877e-10 cannot be accurately represented in float64
 // Warning: *ssa.Phi @ /usr/local/go/src/pkg/math/bits.go:18:6 (inexact) constant value -4503599627370496 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:268:7 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:293:20 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:36 (inexact) constant value 4.1381367970572385e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:34 (inexact) constant value -1.6533902205465252e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:28 (inexact) constant value 6.613756321437934e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:22 (inexact) constant value -0.0027777777777015593 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/exp.go:187:16 (inexact) constant value 0.16666666666666602 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:90:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:116:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:199:11 (inexact) constant value 709.782712893384 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:211:11 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/jn.go:211:11 (inexact) constant value 1e+100 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ interfaces.go:37:17 (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:108:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:108:8 (inexact) constant value 8.988465674311579e+307 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:121:8 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:122:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:126:21 (inexact) constant value 0.5641895835477563 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:33 (inexact) constant value 4.9672799960958445e-08 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:31 (inexact) constant value -1.599556310840356e-05 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:137:24 (inexact) constant value 0.001407056669551897 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:42 (inexact) constant value 1.2354227442613791e-11 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:40 (inexact) constant value 5.0463625707621704e-09 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:33 (inexact) constant value 1.1771846404262368e-06 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:26 (inexact) constant value 0.00018594678558863092 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/j1.go:138:19 (inexact) constant value 0.019153759953836346 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:62:7 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:62:7 (inexact) constant value 8.988465674311579e+307 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ /usr/local/go/src/pkg/math/remainder.go:65:7 (inexact) constant value 4.450147717014403e-308 cannot be accurately represented in float64
 // Warning: *ssa.BinOp @ interfaces.go:40:21 (inexact) constant value 6.283185307179586 cannot be accurately represented in float64
 // Warning: :math.SqrtPi (inexact) constant value 1.772453850905516 cannot be accurately represented in float64
 // Warning: :math.Sqrt2 (inexact) constant value 1.4142135623730951 cannot be accurately represented in float64
 // Warning: :math.Ln2 (inexact) constant value 0.6931471805599453 cannot be accurately represented in float64
 // Warning: :math.SmallestNonzeroFloat32 (inexact) constant value 1.401298464324817e-45 cannot be accurately represented in float64
 // Warning: :math.Phi (inexact) constant value 1.618033988749895 cannot be accurately represented in float64
 // Warning: :math.Ln10 (inexact) constant value 2.302585092994046 cannot be accurately represented in float64
 // Warning: :math.Log2E (inexact) constant value 1.4426950408889634 cannot be accurately represented in float64
 // Warning: :math.SqrtPhi (inexact) constant value 1.272019649514069 cannot be accurately represented in float64
 // Warning: :math.Log10E (inexact) constant value 0.4342944819032518 cannot be accurately represented in float64
 // Warning: :math.SmallestNonzeroFloat64 (inexact) constant value 5e-324 cannot be accurately represented in float64
 // Warning: :math.E (inexact) constant value 2.718281828459045 cannot be accurately represented in float64
 // Warning: :math.Pi (inexact) constant value 3.141592653589793 cannot be accurately represented in float64
 // Warning: :math.MaxFloat32 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: :math.MaxInt64 (Haxe) Integer constant value > 32 bits, rendered as 64-bit : 9223372036854775807
 // Warning: :math.MaxFloat64 (inexact) constant value 0 cannot be accurately represented in int64
 // Warning: :math.MaxFloat64 (inexact) constant value 1.7976931348623157e+308 cannot be accurately represented in float64
 // Warning: :math.MaxUint64 (inexact) constant value -1 cannot be accurately represented in int64
 // Warning: :math.SqrtE (inexact) constant value 1.6487212707001282 cannot be accurately represented in float64
 // Warning: :math.MinInt64 (Haxe) Integer constant value > 32 bits, rendered as 64-bit : -9223372036854775808
 // Package List:
 //  package goruntime
 //  package math
 //  package main
 //  package unicode/utf16
 //  package unicode/utf8
